% \iffalse meta-comment
%
% Copyright (C) 2014 by Julien Cretel
%                       <jubobs.matlab.prettifier at gmail.com>
%
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3
% of this license or (at your option) any later version.
% The latest version of this license is in
%
%     http://www.latex-project.org/lppl.txt
%
% and version 1.3 or later is part of all distributions of LaTeX
% version 2005/12/01 or later.
%
% \fi
%
% \iffalse
%<package>\NeedsTeXFormat{LaTeX2e}[2011/06/27]
%<package>\ProvidesPackage{matlab-prettifier}
%<package>  [2014/04/24 v0.1 A package for prettyprinting Matlab source code]
%
%<*driver>
\documentclass[a4paper]{ltxdoc}
\EnableCrossrefs
\CodelineIndex
\RecordChanges

\usepackage[T1]{fontenc}
\usepackage{lmodern}
\usepackage{xcolor}
\usepackage{lstdoc}
\usepackage{matlab-prettifier}
\usepackage{hyperref}
\usepackage{cleveref}

\lstset
{
  language=Matlab-pretty,
  upquote=true,
  mlunquotedstringdelim={/*}{*/},
  mlmoresharedvars={myglobalvar},
}
\lstMakeShortInline"
\let\ph\snippetPlaceholder
\newcommand*{\pkg}[1]{\textsf{#1}}
\newcommand*{\opt}[1]{\texttt{#1}}
\newcommand*{\lststy}[1]{\texttt{#1}}
\newcommand*{\lstlng}[1]{\texttt{#1}}
\newcommand\matlab{\textsc{Matlab}}
\newcommand\matlabver{\matlab~(R2013a)}
\newcommand\mathworks{MathWorks}
\newcommand*\trademark[1]{#1\textsuperscript{\textregistered}}
\newcommand\mlpkg{\pkg{matlab-prettifier}}
\newcommand\lstpkg{\pkg{listings}}
\newcommand\beamercls{\pkg{beamer}}
\newcommand\mllng{\texttt{Matlab-pretty}}
\newcommand\itemp{\item[\(+\)]}
\newcommand\itemm{\item[\(-\)]}

\makeindex

\begin{document}
  \DocInput{matlab-prettifier.dtx}
\end{document}
%</driver>
% \fi
%
% \CheckSum{583}
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
% \changes{v0.1}{2014/04/24}{Initial release.}
%
% \GetFileInfo{matlab-prettifier.sty}
%
%  ^^A see http://www.latex-project.org/cgi-bin/ltxbugs2html?pr=latex%2F3540
%  \begingroup
%    \def\x{\#,\$,\%,\^,\_,\~,\&,\{,\},\/}%^^A
%    \makeatletter
%    \@onelevel@sanitize\x
%  \expandafter\endgroup\expandafter\DoNotIndex\expandafter{\x}
%
% \begingroup
%    \makeatletter
%    \lccode`9=32\relax
%    \lowercase{%^^A
%      \edef\x{\noexpand\DoNotIndex{\@backslashchar9}}%^^A
%    }%^^A
%  \expandafter\endgroup\x
%
% \DoNotIndex{\@empty,\@ifpackagewith,\@lst,\@namedef,\@ne}
% \DoNotIndex{\advance}
% \DoNotIndex{\baselineskip,\bfseries,\bgroup}
% \DoNotIndex{\ClosingEndKW@mlpr@false,\ClosingEndKW@mlpr@true,^^A
%   \color,\colorlet,\csname,\CurrentOption}
% \DoNotIndex{\DeclareOption,\def,\definecolor,\dimexpr}
% \DoNotIndex{\edef,\egroup,\else,\endcsname,\expandafter}
% \DoNotIndex{\f@shape,\fi,\font,\fontchardp,\fontcharht,\fontfamily,^^A
%   \fvm@Scale}
% \DoNotIndex{\gdef,\global}
% \DoNotIndex{\ifnum,\ifx,^^A
%   \InClassdef@mlpr@false,\InClassdef@mlpr@true,^^A
%   \InStr@mlpr@false,\InStr@mlpr@true,^^A
%   \itdefault,\itshape}
% \DoNotIndex{\lst@AddToHook,\lst@CalcLostSpaceAndOutput,\lst@DefSaveDef,^^A
%   \lst@DelimKey,\lst@ifdisplaystyle,\lst@ifwhitespace,^^A
%   \lst@InstallKeywords,\lst@Key,\lst@language,\lst@LeaveMode,^^A
%   \lst@linewidth,\lst@Lmodetrue,\lst@mode,\lst@NormedDef,\lst@Pmode,^^A
%   \lst@DeleteKeywords,\lst@InstallFamily@,\lst@MakeKeywords,^^A
%   \lst@MakeMoreKeywords,\lst@UseFamily,\lstdefinelanguage,^^A
%   \lstdefinestyle,\lstKV@SetIf}
% \DoNotIndex{\m@ne,\makebox}
% \DoNotIndex{\newcommand,\newcount,\newif,\newlength,^^A,
%   \VisCharOccured@mlpr@true,\VisCharOccured@mlpr@false,^^A
%   \normalsize}
% \DoNotIndex{\OptionNotUsed}
% \DoNotIndex{\PackageError,\PackageWarning,\ProcessOptions}
% \DoNotIndex{\raisebox,\relax,\renewcommand,\RequirePackage,\rule,\rmfamily}
% \DoNotIndex{\selectfont,\setlength,\sldefault,\textlangle,\textrangle,^^A
%   \ttfamily}
% \DoNotIndex{\upshape}
% \DoNotIndex{\WithinSectionTitle@mlpr@false,\WithinSectionTitle@mlpr@true}
%
% \title^^A
% {^^A
%   The \mlpkg{} package^^A
%   \thanks^^A
%   {^^A
%     This document corresponds to \mlpkg~\fileversion,
%     dated~\filedate.^^A
%   }^^A
%  }
% \author{Julien Cretel\\ \texttt{jubobs.matlab.prettifier at gmail.com}}
% \date{\filedate}
% \thispagestyle{empty}
% \maketitle
%
% \begin{abstract}
%   The \mlpkg{} package allows you to effortlessly prettyprint
%   \matlab{} source code in documents typeset with \LaTeX{} \& friends. Built
%   on top of the \lstpkg{} package, \mlpkg{} defines a language called
%   \mllng{}, which can be invoked by \lstpkg{} macros and
%   environments and can be used in conjunction with (most) parameters
%   provided by the \lstpkg{} package. Fine-tuning of the output is possible
%   via a key-value interface extending that of \lstpkg{}. The \mlpkg{}
%   package also conveniently provides three predefined styles, for fast
%   deployment.
% \end{abstract}
%
% \tableofcontents\newpage
%
%
% \part{Introduction}
%
%
% \section{Why this package?}
%
% \trademark{\matlab} is a high-level language and interactive environment for
% numerical computation, visualization, and programming.^^A
%   \footnote{Source: \url{http://www.mathworks.co.uk/products/matlab/}}
% Despite being proprietary and occasionally frustrating, \matlab{} remains a
% great tool for prototyping matrix-oriented, number-crunching programs.
% As such, it enjoys widespread popularity, especially in academia,
% where, in particular, it is often used for teaching numerical methods.
%
% Users of both \matlab{} and \LaTeX{} (and friends) often need to typeset
% \matlab{} listings in \LaTeX{} documents, usually with some syntax
% highlighting, for improved code readability;
% the relatively large number of relevant questions posted on
% \href{http://tex.stackexchange.com/search?q=matlab+code+is%3Aquestion}^^A
% {tex.stackexchange.com} attests to that need.
%
% Recent versions of \matlab{} provide a built-in function, called "publish",
%  that can generate \LaTeX{} code for typesetting \matlab{} listings, but
% that function uses a |verbatim| environment, which doesn't allow for any
% fancy formatting.
% Several \LaTeX{} packages^^A
% ---vanilla \lstpkg{}, \pkg{mcode}, and \pkg{minted}, among others---^^A
% allow for automatic syntax highlighting of \matlab{} listings in \LaTeX{}
% documents.
% However, none of those packages do a great job at replicating the very
% specific syntax-highlighting style performed on the fly by the \matlab{}
% editor.^^A
%   \footnote{see ... for a comparison.}
%  
% The lack of tools for faithfully mimicking the style of the \matlab{}
% editor is unfortunate, especially from an educational standpoint, for the
% following reason.
% Most newcomers to \matlab{} read and write code in the \matlab{} editor
% and are, therefore, continually exposed to its highlighting style.
% Visual cues^^A
% ---such as those provided by syntax highlighting---^^A
% play an important role for recognising patterns,
% and students of a programming language are more likely to quickly and
% effectively learn and recognise its syntax if they see it highlighted in a
% consistent manner, whether it be in a text editor or in some course material
% (lab handout, assignment paper, etc.).
%
% The \mlpkg{} package is intended to fill that gap.
% Built on top of the feature-rich \lstpkg{} package, \mlpkg{} allows you to
%  beautifully and effortlessly typeset \matlab{} listings, as it configures
% \lstpkg{} ``behind the scenes'' to replicate, as closely as possible, the
% syntax-highlighting style of the \matlab{} editor.
% Furthermore, \mlpkg{} comes with a few additional features that should make
% your life easier. Read on!
%
%
% \section{Review of other approaches}
%
% Here is a review of the different options^^A
% ---other than the \mlpkg{} package and \matlab{}'s "publish" function---^^A
% available for typesetting \matlab{} listings in \LaTeX{} documents.
%
% \paragraph{\lstpkg{}' \lstlng{Matlab} language} 
%^^A
% \begin{itemize}
%   \itemp A starting point!
%   \itemp \lstpkg{}' rich features are available.
%   \itemp Settings for \matlab{} listings are bundled into a \lstpkg{}
%     language, which can be invoked \emph{locally}.
%   \itemm Some \matlab{} keywords (e.g.\ "parfor") are not listed.
%   \itemm Built-in \matlab{} function names (e.g.\ "sum") get highlighted
%     like \matlab{} keywords do, which is very distracting.
%   \itemm Highlighting of keywords is not context-aware;
%     in particular, the |end| keyword gets typeset in the same style,
%     regardless of the context (closing keyword or last-element keyword)
%     in which it occurs.
%   \itemm No highlighting of block comments.
%   \itemm No highlighting of line-continuation token and associated comment.
%   \itemm Section titles are not highlighted in a style distinct from that of
%     comments.
%   \itemm No highlighting of unquoted strings.
% \end{itemize}
%
% \paragraph{\pkg{mcode}}
%^^A
% \begin{itemize}
%   \itemp An honest attempt at improving \lstpkg{}' \lstlng{Matlab} language.
%   \itemp Package options for quickly effecting global changes to the look
%     of \matlab{} listings.
%   \itemp Block comments are highlighted as such.
%   \itemp A line-continuation token activates comment style\ldots
%   \itemm \ldots but also gets highlighted in comment style.
%   \itemm Settings for \matlab{} listings are defined \emph{globally}
%     (using |\lstset|) rather than locally,
%     which means those settings can easily be overwritten/lost.
%   \itemm The \lstinline[mloverride]|enumeration| keyword is not listed.
%   \itemm Highlighting of the last-element keyword is handled by a series of
%     literate replacements;
%     this approach works well only in a limited number of cases in which
%     that keyword occurs.
%   \itemm Highlighting of class-definition keywords is not context-aware;
%     in particular, |properties| gets typeset in the same style,
%     regardless of the context (function of class-definition keyword)
%     in which it occurs.
%   \itemm Undesirable literate replacements
%     ("<=" by~\(\leq\), "delta" by~\(\Delta\)) are forced upon the user,
%     and cannot be easily prevented without breaking other literate
%     replacements put in place for highlighting the last-element keyword.
%   \itemm No highlighting of line-continuation token and associated comment.
%   \itemm Section titles are not highlighted in a style distinct from that of
%     comments.
%   \itemm No highlighting of unquoted strings.
%   \itemm The implementation of \pkg{mcode} lacks ``namespacing'',
%     which increases the risk of conflict with other packages.
%   \itemm \pkg{mcode} is currently not available on
%     \href{http://ftp.heanet.ie/pub/CTAN/tex/support/ctanify/ctanify.pdf}
%       {CTAN}.
% \end{itemize}
%
% \paragraph{Pygments-based packages
%   (\pkg{minted}, \pkg{verbments}, \pkg{pythontex})}
%^^A
% \begin{itemize}
%   \itemp Python!
%   \itemp Pygments!
%   \itemp Slick look.
%   \itemm \lstpkg{}' features are not available.
%   \itemm Highlighting of keywords is not context-aware;
%     in particular, the last-element keyword gets highlighted like the
%     closing keyword does, which is very distracting.
%   \itemm \matlab{}'s transpose operator (".'") is misinterpreted as a string
%     delimiter; same problem with "}'".
%   \itemm Escape to \LaTeX{} is only allowed in comments.
%   \itemm Relatively slow; \pkg{minted}'s maintainer has plans to make that
%     package faster, though.
%   \itemm Requires |-shell-escape|.
% \end{itemize}
%
%
% \section{Syntax highlighting performed by \mlpkg{}}
% 
% The \mlpkg{} package defines a \pkg{listings} \emph{language} called
% \mllng{}, which can be invoked in the user-level macros and environments
% provided by the \lstpkg{} package. This \mllng{} language automatically
% highlights elements of \matlab{} syntax, as describe below.
% 
% \paragraph{Context-insensitive keywords}
% "while", "for", "break", etc.
%
% \paragraph{Context-sensitive keywords}
% "end",
% \lstinline[mloverride]|events|,
% \lstinline[mloverride]|properties|,
% etc.
% 
% \paragraph{Quoted strings}
% "'I''m a (quoted) string.'"
%
% \paragraph{To-end-of-line and block comments}
% \mbox{}
% \iffalse
%<*example>
% \fi
\begin{lstlisting}
% I'm a to-end-of-line comment.
a = pi
%{
I'm a block comment.
%}
\end{lstlisting}
% \iffalse
%</example>
% \fi
% 
% \paragraph{Line-continuation token (and associated to-end-of-line comment)}
% \mbox{}
% \iffalse
%<*example>
% \fi
\begin{lstlisting}
A = [ 1, 2, 3,... (I'm a comment)
      4, 5, 6];
\end{lstlisting}
% \iffalse
%</example>
% \fi
%
% \paragraph{Section titles}
% \mbox{}
% \iffalse
%<*example>
% \fi
\begin{lstlisting}
%% I'm a section title.
\end{lstlisting}
% \iffalse
%</example>
% \fi
%
%
% \section{Other features}
%
% Additional features include
%
% \begin{itemize}
%   \item a key-value interface extending that of the \lstpkg{} package,
%   \item automatic scaling of inline code according to its surroundings,
%   \item manual highlighting of variables with shared scope
%     (e.g.\ "myglobalvar"),
%   \item manual highlighting of unquoted strings
%     (e.g.\ ``on'' in ``"hold /*on*/"''),
%   \item a macro for easily typesetting placeholders
%     (e.g.\ \ph{initial-value}),
%   \item three \lstpkg{} styles for \matlab{} listings.
% \end{itemize}
% 
%
% \part{User's guide}
%
% \section{Installation}
%
% \subsection{Package dependencies}
%
% \mlpkg{} requires relatively up-to-date versions of packages \pkg{textcomp},
% \pkg{xcolor}, and \lstpkg{}, all three of which ship with popular \TeX{}
% distributions. It loads those three packages without any options.
%
%
% \subsection{Installing \texorpdfstring{\mlpkg{}}{matlab-prettifier}}
%
% To install \mlpkg{} manually, run
%^^A
% \begin{verbatim}
%   tex matlab-prettifier.ins\end{verbatim}
%^^A
% and copy \mlpkg{}.sty to a path where \LaTeX{} can find it.
% To generate the documentation, run
%^^A
% \begin{verbatim}
%   pdflatex matlab-prettifier.dtx
%   makeindex -s gglo.ist -o matlab-prettifier.gls matlab-prettifier.glo
%   makeindex -s gind.ist -o matlab-prettifier.ind matlab-prettifier.idx
%   pdflatex matlab-prettifier.dtx
%   pdflatex matlab-prettifier.dtx\end{verbatim}
%^^A
%
%
% \section{Getting started}
%
% As stated above, the \mlpkg{} package is built on top of the \lstpkg{}
% package.
% If you already are a seasoned \lstpkg{} user, you should feel right at home.
% If you're not, be aware that this user's guide makes use of some \lstpkg{}
% functionalities (such as key-value options) without describing their usage.
% For more details on those functionalities, you should consult the
% \href{http://www.ctan.org/pkg/listings}{\lstpkg{} documentation}.
%
%
% \subsection{Loading \texorpdfstring{\mlpkg{}}{matlab-prettifier}}
%
% Simply write
%^^A
% \begin{verbatim}
%   \usepackage{matlab-prettifier}\end{verbatim}
%^^A
% somewhere in your preamble. You may want to load the \lstpkg{} and
% \pkg{xcolor} packages with some options; in that case, make sure those
% options are passed to those two packages \emph{before} loading the \mlpkg{}
% package.
%
% The \mlpkg{} package currently offers no package options.
%
%
% \subsection{Displayed listings}
%
% To typeset a \matlab{} listing embedded in your |tex| file, simply enclose
% it in an |lstlisting| environment, and specify |language=|\mllng{} in the
% environment's optional argument.
%^^A
% \begin{verbatim}
%   \begin{lstlisting}[language=Matlab-pretty]
%     ...
%   \end{lstlisting}\end{verbatim}
%
%
% \subsection{Standalone listings}
%
% In practice, though, keeping your \matlab{} listings in external files^^A
% ---rather than embedding them in a |tex|~file---^^A
% is preferable, for maintainability reasons.
% To typeset a \matlab{} listing residing in an m-file, simply invoke the
% |\lstinputlisting| macro; specify |language=|\mllng{} in the macro's
% optional argument, and specify the path to the m-file in question in the
% mandatory argument.
%^^A
% \begin{verbatim}
%   \lstinputlisting[language=Matlab-pretty]{sample.m}\end{verbatim}
%^^A
%
%
% \subsection{Inline listings}
%
% You may want to typeset fragments of \matlab{} code within the main text of
% your document. For instance, you may want to typeset the "break" keyword in
% a sentence, in order to explain it usage.
% The |\lstinline| macro can be used for typesetting such inline code.
%^^A
% \begin{verbatim}
%   \lstinline[language=Matlab-pretty]!break!\end{verbatim}
%^^A
% Well, that's quite a mouthful for such a simple \matlab{} keyword!
% Writing |\lstinline| for each instance of inline Matlab code in your
% document can rapidly become tedious.
% Fortunately, \lstpkg{} allows its users to define a character as a shorthand
% for inline code via the |\lstMakeShortInline| macro.
% For instance, you could define the double-quote character~(|"|) as a
% shorthand for inline \matlab{} code with
%^^A
% \begin{verbatim}
%   \lstMakeShortInline[language=Matlab-pretty]"\end{verbatim}
%^^A
% and you would then be able to typeset this "break" keyword simply by writing
% |"break"| in your |tex| file (but outside displayed listings, of course).
% 
% You should choose a character that does not otherwise occur in your
% |tex| file, especially in the inline \matlab{} code itself,
% or you run the risk of confusing \TeX{}.
% I find that, in general, the double-quote character~(|"|) offers a good
% compromise.
% If necessary, you can undefine a character as a shorthand for inline code,
% via \lstpkg{}' |\lstDeleteShortInline| macro.
% For more details, see subsection~4.17 in the \lstpkg{} manual.
%
%
% \subsection{Placeholders}
%
% The \mlpkg{} package defines a macro, called \rcmdname{\snippetPlaceholder},
% for typesetting code-snippet placeholders.
% Such placeholders are particularly useful for educational purposes,
% e.g.\ to describe elements of \matlab{} syntax.
% Here is an example: \ph{initial-value}.
% In order to typeset that placeholder, you could use
%^^A
% \begin{verbatim}
%   \snippetPlaceholder{initial-value}\end{verbatim}
%^^A
%
% I purposefully chose a rather long name for this user macro,
% in order to minimise the risk of conflict with other macros.
% However, for convenience, you can of course define a custom macro with a
% shorter name for typesetting placeholders, e.g.~|\ph|:
%^^A
% \begin{verbatim}
%   \let\ph\snippetPlaceholder\end{verbatim}
%^^A
%
% To use \rcmdname{\snippetPlaceholder} inside listings, you must invoke it
% within an \emph{escape to \LaTeX{}}; see subsection~4.14 of the \lstpkg{}
% manual.
% If you choose to define a single character for escaping to \LaTeX{} (via
% \lstpkg{}'s \rkeyname{escapechar} key), I recommend you define
% either the double-quote character~(|"|)
% or the backtick character~(\texttt{\`{}})
% as escape character,
% because neither is allowed in \matlab{} statements and expressions^^A
% ---although they may occur in \matlab{} string literals.
% Note that using~|"| both as shorthand for inline code and as an
% escape-to-\LaTeX{} character inside listings is perfectly allowed.
% The following example illustrates how placeholders may be used to describe
% the syntax of the \matlab{} while loop.
%^^A
% \begin{lstsample}{}{}
%    \begin{lstlisting}[
%      language   = Matlab-pretty,
%      escapechar = `,
%    ]
%    while `\ph{condition}`
%      if `\ph{something-bad-happens}`
%        break
%      else
%        % do something useful
%      end
%    end
%    \end{lstlisting}
% \end{lstsample}
%^^A
%
%
% \subsection{Predefined styles}
%
% Although the primary goal of \mlpkg{} is to allow you to mimic the syntax
% highlighting performed by the \matlab{} editor, the package also defines
% three \lstpkg{} \emph{styles} for \matlab{} listings: 
% \lststy{Matlab-stdstyle}, \lststy{Matlab-bwstyle}, and
% \lststy{Matlab-pygstyle}.

% Those styles differ in terms of color scheme, but all three have the
% following effects on each listing that loads one of them:
% a dark gray surrounding frame is drawn;
% line numbers are printed in light gray to the left of the listing;
% and automatic line-breaking is activated.
%
% To apply any of those three styles to a listing, simply pass the style name
% to \lstpkg{}' \rkeyname{style} key in the listing's optional argument
% (see below for examples).
% Note that you don't need to specify \rkeyname{language}|=|\mllng{} if you
% load one of those three styles.
% 
% Here is a comparison of the three styles defined by \mlpkg{}.
%
% \paragraph{\lststy{Matlab-stdstyle}}
% This style mimicks the default style of the \matlab{} editor.
%^^A
% \begin{lstsample}{}{}
%    \begin{lstlisting}[
%      style=Matlab-stdstyle,
%    ]
%    %% Sample Matlab code
%    !mv test.txt test2.txt
%    A = [1, 2, 3;... foo
%         4, 5, 6];
%    s = 'abcd';
%    for k = 1:4
%      disp(s(k)) % bar
%    end
%    %{
%    create row vector x,
%    then reverse it
%    %}
%    x = linspace(0,1,101);
%    y = x(end:-1:1);
%    \end{lstlisting}
% \end{lstsample}
%
% \paragraph{\lststy{Matlab-bwstyle}}
% This style is mainly for black \& white printing.
%
% \begin{lstsample}{}{}
%    \begin{lstlisting}[
%      style = Matlab-bwstyle,
%    ]
%    %% Sample Matlab code
%    !mv test.txt test2.txt
%    A = [1, 2, 3;... foo
%         4, 5, 6];
%    s = 'abcd';
%    for k = 1:4
%      disp(s(k)) % bar
%    end
%    %{
%    create row vector x,
%    then reverse it
%    %}
%    x = linspace(0,1,101);
%    y = x(end:-1:1);
%    \end{lstlisting}
% \end{lstsample}
%
% \paragraph{\lststy{Matlab-pygstyle}}
% The \pkg{minted}, \pkg{verbments}, and \pkg{pythontex} packages all use
% \href{http://pygments.org}{Pygments} lexers for syntax highlighting of
% listings. This \mlpkg{} style closely mimics that of the Pygments
% lexer for \matlab{} called `MatlabLexer'.
%
% \begin{lstsample}{}{}
%    \begin{lstlisting}[
%      style = Matlab-pygstyle,
%    ]
%    %% Sample Matlab code
%    !mv test.txt test2.txt
%    A = [1, 2, 3;... foo
%         4, 5, 6];
%    s = 'abcd';
%    for k = 1:4
%      disp(s(k)) % bar
%    end
%    %{
%    create row vector x,
%    then reverse it
%    %}
%    x = linspace(0,1,101);
%    y = x(end:-1:1);
%    \end{lstlisting}
% \end{lstsample}
%^^A
% 
%
% \section{Advanced customization}
%
% The \lstpkg{} package provides a large number of options accessible via a
% nifty key-value interface, which is described in the excellent
% \href{http://www.ctan.org/pkg/listings}{\lstpkg{} documentation}.
% The \mlpkg{} package extends \lstpkg{}' key-value interface interface by
% defining several additional keys that allow you to customize the style of
% your \matlab{} listings, should you wish to do so.
% All the keys provided by \mlpkg{} are prefixed by ``|ml|'',
% to help you distinguish them from ``native'' \lstpkg{} keys.
% 
%
% \subsection{\lstpkg{} keys you should not use}
%
% The great majority of keys provided by \lstpkg{} can be used in conjunction
% with keys provided by \mlpkg{} without any detrimental side effects,
% but there are a few exceptions that you should keep in mind.
% 
% Some \mlpkg{} keys rely on \lstpkg{} keys ``under the hood'',
% and using those \mlpkg{} and \lstpkg{} keys in conjunction is
% \emph{strongly discouraged},
% because doing so has the potential to wreak havok on the syntax highlighting
% of \matlab{} listings.
% It would be like \emph{crossing the streams}: it would be \emph{bad}!
%
% For instance, if you want to change the way \matlab{} keywords are typeset,
% you should use the dedicated \mlpkg{} key called \rkeyname{mlkeywordstyle}
% and eschew the \lstpkg{} key called \rkeyname{keywordstyle}.
% More generally, if \lstpkg{} provides a key called \meta{something} and
% \mlpkg{} provides a key called |ml|\meta{something},
% customization of your \matlab{} listings should be done with the latter, not
% the former.
%
%
% \subsection{Key-value interface}
%
% For each of the \mlpkg{} keys described below,
% the default value is indicated on the right-hand side.
%
% \begin{syntax}
%
%   \item[0.1,\color{blue}]
%     \rkeyname{mlkeywordstyle}|=|\meta{style}
%
%     This key determines the style applied to \matlab{} keywords.
%     The last token can be a one-parameter command,
%     such as |\textbf| or |\underbar|.
%
%   \item[0.1,\color{black}]
%     \rkeyname{mllastelementstyle}|=|\meta{style}
%
%     The |end| keyword has different meanings depending on the context in
%     which it occurs:
%     it may be used to close a code block (e.g.\ a while loop),
%     or it may stand for the last element of an array.
%     In the first case, it gets highlighted in the same style as the other
%     \matlab{} keywords, like so: "end".
%     In the other case, it gets highlighted like ``normal text'', like so:
%     \lstinline[language=Matlab-pretty,mloverride]|end|.
%     This key determines the style of this keyword in cases where it means
%     ``last element''.
%
%   \item[0.1,false]
%     \rkeyname{mloverride}|=|\meta{\alternative{true,false}}
%     \syntaxor\rkeyname{mloverride}
%
%     By default, in inline code, \mlpkg{} highlights the |end| keyword as
%     as the closing keyword (\emph{not} as the last-element keyword)
%     and highlights the four class-definition identifiers as \matlab{}
%     functions (\emph{not} as keywords):
%     "end", "events", "enumeration", "methods", and "properties".
%     This key allows you to overrides the current context, so that those
%     five context-sensitive keywords be typeset in the style associated with
%     the alternative context:
%     \lstinline[language=Matlab-pretty,mloverride]|end|,
%     \lstinline[language=Matlab-pretty,mloverride]|events|, 
%     \lstinline[language=Matlab-pretty,mloverride]|enumeration|, 
%     \lstinline[language=Matlab-pretty,mloverride]|methods|,
%     \lstinline[language=Matlab-pretty,mloverride]|properties|.
%
%   \item[0.1,{\color[RGB]{160,32,240}}]
%     \rkeyname{mlstringstyle}|=|\meta{style}
%
%     This key determines the style applied to \matlab{} quoted and unquoted
%     strings.
%     The last token can be a one-parameter command,
%     such as |\textbf| or |\underbar|.
%
%   \item[0.1,{\color[RGB]{34,139,34}}]
%     \rkeyname{mlcommentstyle}|=|\meta{style}
%
%     This key determines the style applied to \matlab{} to-end-of-line and
%     block comments.
%     The last token can be a one-parameter command,
%     such as |\textbf| or |\underbar|.
%
%   \item[0.1,{\bfseries\color[RGB]{34,139,34}}]
%     \rkeyname{mlsectiontitlestyle}|=|\meta{style}
%   
%     This key determines the style applied to \matlab{} section titles.
%     The last token can be a one-parameter command,
%     such as |\textbf| or |\underbar|.
%     
%   \item[0.1,false]
%     \rkeyname{mlshowsectionrules}|=|\meta{\alternative{true,false}}
%     \syntaxor\rkeyname{mlshowsectionrules}
%
%     This key determines whether an horizontal rule gets printed above each
%     \matlab{} section title.
%
%   \item[0.1,.05]
%     \rkeyname{mlsectionrulethickness}|=|\meta{number}
%     
%     This key determines the thickness of the horizontal rule above each
%     \matlab{} section title.
%     The resulting thickness corresponds to the product of the value passed
%     to this key and the length value of |\baselineskip|.
%
%   \item[0.1,black!15]
%     \rkeyname{mlsectionrulecolor}|=|\meta{color}
%
%     This key determines the color of the horizontal rule shown above each
%     \matlab{} section title.
%
%   \item[0.1,{\color[RGB]{178,140,0}}]
%     \rkeyname{mlsyscomstyle}|=|\meta{style}
%
%     This key determines the style applied to \matlab{} system commands.
%     The last token can be a one-parameter command,
%     such as |\textbf| or |\underbar|.
%
%   \item[0.1]
%     \rkeyname{mlsharedvars}|=|\meta{list of variables}
%   \item[0.1]
%     \rkeyname{mlmoresharedvars}|=|\meta{list of variables}
%   \item[0.1]
%     \rkeyname{mldeletesharedvars}|=|\meta{list of variables}
%   \item[0.1,{\color[RGB]{000,163,163}}]
%     \rkeyname{mlsharedvarstyle}|=|\meta{style}
%
%     The first three of those four keys allow you to define, add, or remove
%     (respectively) \matlab{} variables with shared scope.
%     The last one determines the style applied to such variables;
%     the last token can be a one-parameter command,
%     such as |\textbf| or |\underbar|.

%
%   \item[0.1,{\color[RGB]{0,163,163}}]
%     \rkeyname{mlsharedvarstyle}|=|\meta{style}
%
%     This key determines the style applied to \matlab{} variables with
%     shared scope.
%     The last token can be a one-parameter command,
%     such as |\textbf| or |\underbar|.
%
%   \item[0.1]
%     \rkeyname{mlunquotedstringdelim}|={|^^A
%       \meta{opening delimiter}|}{|\meta{closing delimiter}|}|
%
%     This key allows you to define delimiters
%     (possibly composed of multiple characters)
%     for highlighting unquoted strings;
%     the delimiters themselves do not get printed in the output.
%     Be aware that the special characters |{}#%\| must be escaped with a
%     backslash (see item~5 in subsection~4.1 of the
%     \href{http://www.ctan.org/pkg/listings}{\lstpkg{} documentation}).
%     Note that this key is only a tentative solution;
%     automatic highlighting of unquoted strings is a planned feature for the
%     next release of \mlpkg{}, which should make this key obsolete.
%
% \item[0.1,{\rmfamily\itshape\color[RGB]{209,0,86}}]
%     \rkeyname{mlplaceholderstyle}|=|\meta{style}
%
%     This key determines the style applied to placeholders in code snippets.
%     The last token can be a one-parameter command,
%     such as |\textbf| or |\underbar|.
% 
% \end{syntax}
%
%
% \section{Tips and tricks}
%
% Here is a list of recommendations^^A
% ---some more opinionated than others---^^A
% that, if followed, should make your experience with \mlpkg{} more pleasant.
%
% \paragraph{Define your own style.}
% For maintainability reasons, if you're not completely satisfied with any of
% the predefined styles, you should define your own \lstpkg{} style.
% You can even base your custom style on one of the predefined styles and
% tweak it (see subsection~4.5 in the
% \href{http://www.ctan.org/pkg/listings}{\lstpkg{} documentation}).
%
% \paragraph{Stick with the \mllng{} language.}
% Defining a \lstpkg{} language based on \mllng{} is discouraged,
% for the following reason:
% \mlpkg{} performs some necessary housekeeping tasks at the beginning and
% end of each listing, but only under the condition that the name of the
% language used by the listing be \mllng{};
% therefore, \matlab{} listings are unlikely to get correctly highlighted if
% the language name differs from \mllng{}.
%
% \paragraph{Load the \mllng{} language or a style first; customize later.}
% If you want to customize the appearance of your \matlab{} listings, 
% you should use the \rkeyname{language} key or the \rkeyname{style} key
% before using any other (\lstpkg{} or \mlpkg{}) key,
% because loading a language or a style ``too late'' has the potential to
% wipe out most of the current settings.
%
% \paragraph{Define macros for recurring placeholders.}
% For maintainability reasons, you should define macros for oft-used
% placeholders, e.g.
%^^A
% \begin{verbatim}
%   \newcommand\phcond{\snippetPlaceholder{condition}}\end{verbatim}
%^^A
%
% \paragraph{Don't copy \& paste!}
% Do not encourage your readers to copy listings from the PDF and then paste
% them in the \matlab{} editor.
% Unfortunately, it simply is \emph{not} a reliable way of distributing code,
% for at least two reasons:
%
% \begin{itemize}
%   \item the results of copying content from a PDF for
%     subsequent pasting vary widely from one PDF viewer to another;
%   \item line breaks introduced by \lstpkg{} for typesetting a \matlab{}
%     listing may translate to invalid \matlab{} syntax, if copied and pasted
%     \emph{verbatim}.
% \end{itemize}
%
% \paragraph{In \beamercls{}, use the \opt{fragile} option.}
% If you want to typeset listings in a \beamercls{} frame, remember that you
% need to use the |fragile| option for that frame.
%
% \paragraph{Prefer Latin Modern to Computer Modern.}
% If you are satisfied with Computer Modern fonts
% (the default \TeX{} fonts), 
% do yourself a favour and load the \pkg{lmodern} package,
% which loads the very similar but much better Latin Modern fonts.
% I also recommend you load \pkg{fontenc} with the \opt{T1} option,
% if possible.
%
% \paragraph{Printing visible-space characters}
% By default, no visible characters are printed anywhere in \matlab{} code.
% However, you can always override that by setting |showspaces|
% and |showstringspaces| to |true| \emph{after} setting the \mllng{}
% language or one of the styles defines by \mlpkg{}.
%
% \paragraph{Allowing for inline code in footnotes}
% Using inline code in footnotes may generate an error,
% because verbatim content is not normally allowed in footnotes.
% One workaround is to load the \pkg{bigfoot} package.
%
% \paragraph{Typesetting a vertically centered tilde}
% Unfortunately, not all fonts typeset the tilde character ("~") vertically
% centered---as it is in the \matlab{} editor.
% Be aware that, if you set a font for your \matlab{} listings
% (via \lstpkg{}' \rkeyname{basicstyle} key) that is different from \mlpkg{}'s
% default (a scaled-down version of Bera Mono), tilde characters occuring in
% your listings may get typeset vertically off-center.
% Because a good, font-independent workaround seems out of reach,
% I refer you to \url{http://tex.stackexchange.com/q/312/21891},
% where you will find a list of ad-hoc solutions.
%
% \paragraph{Avoid literate replacements like the plague!}
% The \pkg{mcode} package predefines so-called literate replacements
% (see subsection~5.4 in the
% \href{http://www.ctan.org/pkg/listings}{\lstpkg{} documentation}),
% e.g.\ for printing~\(\leq\) in place of each instance of~"<=".
% I deliberately chose not to define any such literate replacements in the
% \mlpkg{} package because I think that,
% rather than improving code readability,
% they have a potential to confuse and mislead your readers.
% In particular, a newcomer to the programming language may not immediately
% realize that those symbols are not part of the language's syntax;
% she may ascribe literal meaning to them and attempt to reproduce them in her
% editor or IDE.
% How counterproductive!
% Of course, if you insist, you can still define your own literate
% replacements (via \lstpkg{}' \rkeyname{literate} key).
%
%
% \part{Miscellaneous}
% 
% \section{To-do list}
%
% \paragraph{Automatic highlighting of unquoted strings}
% In the current version of \mlpkg{}, unquoted strings will only be highlighted
% as strings if you delimit them with custom delimiters
% (defined via the \rkeyname{mlunquotedstringdelim} key).
% However, I have plans to implement an automatic approach in a future
% release.
% Note that this feature will make the \rkeyname{mlunquotedstringdelim} key
% obsolete.
%
% \paragraph{Option to only print the header of a \matlab{} function file}
% A partial solution is available at
% \url{http://tex.stackexchange.com/q/164280/21891}
% but is currently not compatible with \mlpkg{};
% I have plans to implement this feature in a future release of \mlpkg{}.
%
% \section{Missing features and known issues}
%
% Although \mlpkg{} does a reasonably good job at replicating the syntax
% highlighting performed by the \matlab{} editor, some problems remain.
% Here is a list of known, currently unresolved problems.
% 
% \paragraph{No automatic highlighting of variables with shared scope}
% Unfortunately, automatic highlighting of variables with shared scope
% would require multiple passes, which the \lstpkg{} package cannot do.
% However, I believe that the number of variables in your \matlab{} code
% should be small enough^^A
% ---otherwise, your \matlab{} code is probably not sound!---^^A
% that you can afford to highlight those variables manually, if you insist on
% highlighting them at all.
% 
% \paragraph{No highlighting of unterminated strings}
% Because \lstpkg{} cannot look very far ahead, I haven't found an easy way of
% checking whether an opening string delimiter is missing a matching (closing)
% string delimiter on the same line.
%
% \paragraph{No highlighting of invalid characters}
% Characters occuring in places where they are invalid do not get highlighted
% in red, as they would in the \matlab{} editor.
%
% \paragraph{Illegal syntax tends to yield incorrect syntax highlighting}
% For example, the \matlab{} editor would highlight the |end| keyword in the
% listing below, not as closing keyword ("end"), but as last-element keyword
% (\lstinline[language=Matlab-pretty,mloverride]|end|).
%^^A
% \begin{lstsample}{}{}
%    \begin{lstlisting}[
%      language=Matlab-pretty]
%    if=end
%    \end{lstlisting}
% \end{lstsample}
%
% \paragraph{A line composed only of \texttt{\%\%} fails to be highlighted like a
% section title}
% In \matlab{}, a line starting by blanks (spaces, tabs)
% followed by ``\texttt{\%\%}'',
% followed by more blanks,
% followed by a newline
% is a section title.
% \mllng{} incorrectly highlights in comment style.
%^^A
% \begin{lstsample}{}{}
%    \begin{lstlisting}[
%      language=Matlab-pretty]
%    %% This is a section title
%    %  and so is the next line
%    %%
%    % but it gets highlighted
%    % like a comment.
%    \end{lstlisting}
% \end{lstsample}
%
% \paragraph{\lstpkg{}' \keyname{keespaces} key messes up section-title rules}
% If both \lstpkg{}' \keyname{keepspaces} and \mlpkg{}'s
% \keyname{mlshowsectionrules} are set, section titles that start by some
% white space get pushed to the right.
%^^A
% \begin{lstsample}{}{}
%    \begin{lstlisting}[
%      style=Matlab-stdstyle,
%      numbers=none,
%      keepspaces,
%      mlshowsectionrules]
%        %% the rule gets pushed to the right...
%    \end{lstlisting}
% \end{lstsample}

% 
% \paragraph{``Runaway'' block comments end prematurely (in some cases)} 
% \matlab{} requires opening and closing delimiters of block comments to each
% be on a line on its own, without any visible character, but \mlpkg{}
% incorrectly considers block comments closed even in some cases where this
% rule is infringed.
% For example, in the listing below, the \matlab{} editor would typeset
% "a = 1" in comment style.
%^^A
% \begin{lstsample}{}{}
%    \begin{lstlisting}[
%      language=Matlab-pretty]
%    %{
%      "runaway"
%     block
%     comment %}
%    a = 1
%    \end{lstlisting}
% \end{lstsample}
%
%
% \section{Bug reports and feature suggestions}
%
% The development version of \mlpkg{} is currently hosted on Bitbucket at
% \href{http://bitbucket.org/Jubobs/matlab-prettifier/}
%   {Jubobs/matlab-prettifier}.
% If you find a bug in \mlpkg{} that this manual does not mention,
% if you would like to see a feature implemented in the package,
% or if you can think of ways in which the \mlpkg{} documentation could be
% improved, please add an entry to the Bitbucket repository's issue tracker;
% alternatively, you can send me an email at
% \href{mailto:jubobs.matlab.prettifier@gmail.com}
%   {jubobs.matlab.prettifier@gmail.com}
%
% \makeatletter
% \def\index@prologue{\part{Index}\markboth{Index}{Index}}
% \makeatother
% \StopEventually{^^A
%   \clearpage^^A
%   \PrintChanges^^A
%   \setcounter{IndexColumns}{2}^^A
%   \PrintIndex^^A
% }
%
%
% \part{Implementation}
%
% Be aware that, for ``namespacing'', the \mlpkg{} package uses, not a prefix,
% but the |mlpretty|~suffix (preceded by an |@| character) throughout.
%
%
% \section{Preliminary checks}
%
% \begin{macro}{\lstoptcheck@mlpr}
%   Because the \lstpkg{} options \opt{noaspects}, \opt{0.21}, and
%   \opt{savemem} are incompatible with \pkg{matlab-prettifier}, checking
%   whether the \lstpkg{} package has been loaded with any of those options is
%   a good idea; if so, we should issue an error.
%   This macro checks whether \lstpkg{} was loaded with a given option
%   and, if so, throws an error.
%    \begin{macrocode}
\newcommand\lstoptcheck@mlpr[1]
{%
  \@ifpackagewith{listings}{#1}%
  {
    \PackageError{matlab-prettifier}%
      {incompatible listings' option #1}%
      {%
        Make sure the `listings' package
        doesn't get loaded with option `#1'%
      }
  }
  {}
}
%    \end{macrocode}
% \end{macro}
% Using that macro, we make sure that none of the problematic \lstpkg{}
% options has been specified during an earlier loading of the \lstpkg{}
% package.
%    \begin{macrocode}
\lstoptcheck@mlpr{noaspects}
\lstoptcheck@mlpr{0.21}
\lstoptcheck@mlpr{savemem}
%    \end{macrocode}
%
%
% \section{Package options}
%
% \mlpkg{} currently offers no package option; therefore, if the user
% mistakenly specifies any option for the package, we discard that option
% and issue a warning.
%    \begin{macrocode}
\DeclareOption*%
{%
  \OptionNotUsed
  \PackageWarning{matlab-prettifier}{Unknown `\CurrentOption' option}
}
\ProcessOptions\relax
%    \end{macrocode}
%
%
% \section{Required packages}
% 
% The \mlpkg{} package require three packages without any package option:
% the \pkg{textcomp} package, in order to use \lstpkg{}' \rkeyname{upquote}
% key;
% the \pkg{xcolor} package, in order to color our \matlab{} code;
% and, of course, the \lstpkg{} package.
%    \begin{macrocode}
\RequirePackage{textcomp}[2005/09/27]
\RequirePackage{xcolor}[2007/01/21]
\RequirePackage{listings}[2013/08/26]
%    \end{macrocode}
%
%
% \section{Key-value interface}
%
% We extend \lstpkg{}' key-value interface by defining several additional
% keys, which we will use for defining a new \lstpkg{} language and three
% \lstpkg{} styles, further down.
% All those new keys start by the prefix~|ml|, so that the user can easily
% distinguish them from ``native'' \lstpkg{} keys.
%
% \begin{lstkey}{mlkeywordstyle}
%   In the upcoming language definition, we use several classes of \lstpkg{}
% keywords to handle the different \matlab{} keywords. However, we need one
% style key to ``rule them all''.
%    \begin{macrocode}
\lst@Key{mlkeywordstyle}\relax%
  {\renewcommand\keywordStyle@mlpr{#1}}
%    \end{macrocode}
% \end{lstkey}
%
% \begin{lstkey}{mllastelementstyle}
%   This key determines the style applied to the last-element keyword.
%    \begin{macrocode}
\lst@Key{mllastelementstyle}\relax%
  {\renewcommand\lastElemStyle@mlpr{#1}}
%    \end{macrocode}
% \end{lstkey}
%
% \begin{lstkey}{mloverride}
% \begin{macro}{\ifOverridecontext@mlpr@}
%   This key overrides the current context, so that context-sensitive
%   keywords be typeset in the style associated with the alternative context.
%    \begin{macrocode}
\lst@Key{mloverride}{false}[t]%
  {\lstKV@SetIf{#1}\ifOverridecontext@mlpr@}
%    \end{macrocode}
% \end{macro}
% \end{lstkey}
%
% \begin{lstkey}{mlstringstyle}
% This key determines the style applied to \matlab{} (quoted and unquoted)
% strings.
%    \begin{macrocode}
\lst@Key{mlstringstyle}\relax%
  {\renewcommand\stringStyle@mlpr{#1}}
%    \end{macrocode}
% \end{lstkey}
%
% \begin{lstkey}{mlcommentstyle}
% This key determines the style applied to \matlab{}
% (to-end-of-line and block) comments.
%    \begin{macrocode}
\lst@Key{mlcommentstyle}\relax%
  {\renewcommand\commentStyle@mlpr{#1}}
%    \end{macrocode}
% \end{lstkey}
%
% \begin{lstkey}{mlsectiontitlestyle}
%   This key determines the style applied to \matlab{} section titles.
%    \begin{macrocode}
\lst@Key{mlsectiontitlestyle}\relax
  {\renewcommand\sectionTitleStyle@mlpr{#1}}
%    \end{macrocode}
% \end{lstkey}
%
% \begin{lstkey}{mlshowsectionrules}
% \begin{macro}{\ifShowCellrules@mlpr@}
%   This key determines whether an horizontal rule gets printed above each
%   section title.
%    \begin{macrocode}
\lst@Key{mlshowsectionrules}{false}[t]%
  {\lstKV@SetIf{#1}\ifShowCellrules@mlpr@}
%    \end{macrocode}
% \end{macro}
% \end{lstkey}
%
% \begin{lstkey}{mlsectionrulethickness}
%   This key determines the relative thickness of the horizontal rule that
%   gets printed above each section title.
%    \begin{macrocode}
\lst@Key{mlsectionrulethickness}\relax%
  {\renewcommand\sectionRuleRT@mlpr{#1}}
%    \end{macrocode}
% \end{lstkey}
%
% \begin{lstkey}{mlsectionrulecolor}
%   This key determines the color of the horizontal rule that gets printed
%   above each section title.
%    \begin{macrocode}
\lst@Key{mlsectionrulecolor}\relax%
  {\colorlet{sectionRuleColor@mlpr}{#1}}
%    \end{macrocode}
% \end{lstkey}
%
% \begin{lstkey}{mlsyscomstyle}
%   This key determines the style applied to system commands.
%    \begin{macrocode}
\lst@Key{mlsyscomstyle}\relax%
  {\renewcommand\syscomStyle@mlpr{#1}}
%    \end{macrocode}
% \end{lstkey}
%
% \begin{lstkey}{mlsharedvars}
% \begin{lstkey}{mlmoresharedvars}
% \begin{lstkey}{mldeletesharedvars}
% \begin{lstkey}{mlsharedvarstyle}
%   For convenience, we create a brand new class of \lstpkg{} keywords for
%   allowing the user to define \matlab{} variables with shared scope.
% \begin{macro}{\InstallKeywords@mlpr}
%   This helper macro (which is based on \lstpkg{}' |\lst@InstallKeywords|),
%   will let us defines four keys in one go, all prefixed by |ml|.
%    \begin{macrocode}
\gdef\InstallKeywords@mlpr#1#2#3#4#5%
{%
  \lst@Key{ml#2}\relax
    {\lst@UseFamily{#2}[\@ne]##1\relax\lst@MakeKeywords}%
  \lst@Key{mlmore#2}\relax
    {\lst@UseFamily{#2}[\@ne]##1\relax\lst@MakeMoreKeywords}%
  \lst@Key{mldelete#2}\relax
    {\lst@UseFamily{#2}[\@ne]##1\relax\lst@DeleteKeywords}%
  \ifx\@empty#3\@empty\else
     \lst@Key{#3}{#4}{\@namedef{lst@#3}{##1}}%
  \fi
  \expandafter\lst@InstallFamily@
     \csname\@lst @#2@data\expandafter\endcsname
     \csname\@lst @#5\endcsname {#1}{#2}{#3}
}
%    \end{macrocode}
% \end{macro}
%   We now use that macro to define the four keys in question:
%   \rkeyname{mlsharedvars}, which can be used to define a list of \matlab{}
%   variables with shared scope;
%   \rkeyname{mlmoresharedvars}, which can be used to add elements to the
%   current list of such variables;
%   \rkeyname{mldeletesharedvars}, which can be used to remove elements
%   from that list;
%   and \rkeyname{mlsharedvarstyle}, which determines the style applied to
%   variables with shared scope.
%    \begin{macrocode}
\InstallKeywords@mlpr k{sharedvars}{mlsharedvarstyle}\relax%
  {mlsharedvarstyle}{}ld
%    \end{macrocode}
% \end{lstkey}
% \end{lstkey}
% \end{lstkey}
% \end{lstkey}
%
% \begin{lstkey}{mlunquotedstringdelim}
%   This key allows the user to define custom delimiters^^A
%   ---which do not get printed in the output---for unquoted strings.
%    \begin{macrocode}
\lst@Key{mlunquotedstringdelim}\relax%
  {\lst@DelimKey\relax{[is][\stringStyle@mlpr]{#1}}}
%    \end{macrocode}
% \end{lstkey}
%
% \begin{lstkey}{mlplaceholderstyle}
%   This key determines the style applied to placeholder content;
%   the color of placeholder delimiters is designed to match that of
%   placeholder content.
%     \begin{macrocode}
\lst@Key{mlplaceholderstyle}\relax%
  {\renewcommand\phStyle@mlpr{#1}}
%    \end{macrocode}
% \end{lstkey}
%
%
% \section{Definition of the \mllng{} language}
%
% \paragraph{Language name}
% \begin{macro}{\language@mlpr}
%   To avoid code duplication, we define a macro that expands to the name of
%   our new language, \mllng{}.
%    \begin{macrocode}
\newcommand\language@mlpr{Matlab-pretty}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\languageNormedDefd@mlpr}
%   However, because \lstpkg{} ``normalises'' language names internally,
%   we will also need to define a macro that expands to the normalised name of
%   the new language.
%    \begin{macrocode}
\expandafter\lst@NormedDef\expandafter\languageNormedDefd@mlpr%
  \expandafter{\language@mlpr}
%    \end{macrocode}
% \end{macro}
%
% We can now define our new \lstpkg{} language, using some |\expandafter|
% trickery on |\lstdefinelanguage|.
%    \begin{macrocode}
\expandafter\expandafter\expandafter\lstdefinelanguage\expandafter%
{\language@mlpr}
{%
%    \end{macrocode}
%
% \paragraph{Case sensitivity}
% \matlab{} is a case-sensitive language.
%    \begin{macrocode}
  sensitive=true,
%    \end{macrocode}
%
% \paragraph{Straight single quotes and backticks}
% \lstpkg{}' \rkeyname{upquote} key is set so that single quotes and backticks
% be typeset, not curly, but straight, as in \matlab{}.
%    \begin{macrocode}
  upquote=true,
%    \end{macrocode}
%
% \paragraph{No visible space characters}
% By default, no visible-space characters should be printed.
%    \begin{macrocode}
  showspaces=false,
  showstringspaces=false,
%    \end{macrocode}
%
% \paragraph{Uniform frame color}
% Because of a bug in \lstpkg{},
% frames surrounding listings may not be of a uniform color.
% In most cases, this behaviour is undesirable, but can be avoided by passing
% some color specification to \lstpkg{}' \rkeyname{rulecolor} key.
%    \begin{macrocode}
  rulecolor=\color{black},
%    \end{macrocode}
%
% \paragraph{Adjust the list of characters valid in identifiers}
% By default, \lstpkg{} allows ``\$'' and ``@'' to occur in identifiers,
% but those characters are not valid \matlab{} identifiers.
%    \begin{macrocode}
  alsoother={\$@},
%    \end{macrocode}
%
% \paragraph{Character-table adjustments}
% In order to keep track of the context, we need to modify the character
% table a bit.
%    \begin{macrocode}
  MoreSelectCharTable=\MoreSelectCharTable@mlpr,
%    \end{macrocode}
%
% \paragraph{Basic style}
% The ``basic style'' of our \matlab{} listings is defined below.
%    \begin{macrocode}
  basicstyle=\basicStyle@mlpr,
%    \end{macrocode}
%
%
% \paragraph{Keywords}
%
% The keywords defined below are based on the list returned by the
% \matlabver{} "iskeyword" function and the four class-definition keywords^^A
% ---which are omitted by the "iskeyword" function.
% Because different \matlab{} keywords affect the context in different ways,
% we use several classes of \pkg{listings} keywords to handle them.
% For precaution, we use relatively large class numbers to allow the user to
% define her own keywords, in addition to \matlab{}'s,
% should she wish to do so.
%
% The following keywords open a block that has nothing to do with class
% definition. 
%    \begin{macrocode}
  morekeywords=[257]%
  {% 
    for,
    if,
    otherwise,
    parfor,
    spmd,
    switch,
    try,
    while,
  },
  keywordstyle=[257]\processOpRegKW@mlpr,
%    \end{macrocode}
% Most of the following keywords (nicknamed ``middle'' keywords herein) can
% only occur within a block opened by the keywords listed above^^A
% ---"function" and "return" are exceptions, but, as far as I can tell,
% seem to have the same effects on syntax highlighting as the others---^^A
% and are unrelated to class definition.
%    \begin{macrocode}
  morekeywords=[258]%
  {%
    break,
    case,
    catch,
    continue,
    else,
    elseif,
    function,
    return,
  }, 
  keywordstyle=[258]\processMidKW@mlpr,
%    \end{macrocode}
% The following two keywords are ``standalone'';
% they don't open or close any block.
%    \begin{macrocode}
  morekeywords=[259]%
  {%
    global,
    persistent,
  }, 
  keywordstyle=[259]\processStdaKW@mlpr,
%    \end{macrocode}
% The "classdef" keyword interacts with other keywords in a unique fashion;
% therefore, we dedicate a whole class of \lstpkg{} keywords to it. 
%    \begin{macrocode}
  morekeywords=[260]{classdef},  
  keywordstyle=[260]\processClassdefKW@mlpr,
%    \end{macrocode}
% The \matlab{} "iskeyword" prints a list of some of the \matlab{} keywords,
% but it omits the four keywords that occur within a class-definition block,
% namely \lstinline[mloverride]|events|,
% \lstinline[mloverride]|enumeration|, \lstinline[mloverride]|methods|, and
% \lstinline[mloverride]|properties|.
% We dedicate a class of \lstpkg{} keywords to those four \matlab{} keywords.
%    \begin{macrocode}
  morekeywords=[261]%
  {%
    enumeration,
    events,
    methods,
    properties,
  },
  keywordstyle=[261]\processMidClassdefKW@mlpr,
%    \end{macrocode}
% The |end| keyword has a very peculiar behaviour and deserves its own keyword
% class.
%    \begin{macrocode}
  morekeywords=[262]{end},
  keywordstyle=[262]\processEndKW@mlpr,
%    \end{macrocode}
%
% \paragraph{Strings}
% We simply use \lstpkg{}' built-in mechanism for highlighting \matlab{}
% (quoted) string.
%    \begin{macrocode}
  morestring=[m]',
  stringstyle=\processString@mlpr,
%    \end{macrocode}
%
% \paragraph{Comments \& section titles}
% Delimiters for to-end-of-line and block comments are defined below.
%    \begin{macrocode}
  morecomment=[l]\%,
  morecomment=[n]{\%\{\^^M}{\%\}\^^M},
  commentstyle=\commentStyle@mlpr,
%    \end{macrocode}
% The line-continuation token ("..."), which starts a to-end-of-line comment,
% is treated separately.
%    \begin{macrocode}
  moredelim=**[il][\processDotDotDot@mlpr]{...},
%    \end{macrocode}
% Section titles, as special comments that get highlighted in a style
% different to that of regular comments, must also be handled separately.
%    \begin{macrocode}
  moredelim=[l][\processSectionTitle@mlpr]{\%\%\ },
%    \end{macrocode}
%
% \paragraph{System commands}
% System commands are handled in a straightforward manner by an |l|-type
% delimiter.
%    \begin{macrocode}
  moredelim=[l][\syscomStyle@mlpr]{!},
%    \end{macrocode}
%
% \paragraph{Variables with shared scope}
% Not much to write about this.
%    \begin{macrocode}
  mlsharedvarstyle=\processSharedVar@mlpr,
%    \end{macrocode}
%
% \paragraph{\lstpkg{} aspects}
% We've reached the end of the definition of \mllng{}.
% We only need to specify the three \lstpkg{} aspects required for our
% definition of \mllng{}.
%    \begin{macrocode}
}[
  keywords,
  strings,
  comments,
]
%    \end{macrocode}
%
%
% \section{State variables}
% We define a number of \TeX{} counters and switches that will be used as
% ``state variables'', to keep track of the context.
%
% \paragraph{Counters}
% \begin{macro}{\netBracketCount@mlpr}
% This counter is used to keep a net running count of opening and closing
% brackets (roughly speaking).
% When an opening bracket (be it round, square or curly) is encountered,
% the counter is incremented;
% conversely, when a closing bracket is encountered, the counter is
% decremented.
% I write ``roughly speaking'', because that counter gets reset on some
% occasions (more details follow).
%    \begin{macrocode}
\newcount\netBracketCount@mlpr
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\blkLvl@mlpr}
% The following counter is used to keep track of the block nesting level.
%    \begin{macrocode}
\newcount\blkLvl@mlpr
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\blkLvlAtClassdef@mlpr}
% This counter is used to keep track of the block nesting level at which the
% last "classdef" keyword occured.
%    \begin{macrocode}
\newcount\blkLvlAtClassdef@mlpr
%    \end{macrocode}
% \end{macro}
%
% \paragraph{Switches}
% \begin{macro}{\ifClosingEndKW@mlpr@}
% This switch determines whether the |end| keyword acts as a closing keyword
% or as last-element keyword in the current context.
%    \begin{macrocode}
\newif\ifClosingEndKW@mlpr@             \ClosingEndKW@mlpr@true
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ifInClassdef@mlpr@}
% This macro determines whether we're within a class-definition block or not.
%    \begin{macrocode}
\newif\ifInClassdef@mlpr@                 \InClassdef@mlpr@false
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ifInStr@mlpr@}
% This switch determines whether we're inside a string or not.
%    \begin{macrocode}
\newif\ifInStr@mlpr@                           \InStr@mlpr@false
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ifVisCharOccured@mlpr@}
% This switch is used to keep track of whether visible characters have
% occured on the current line.
%    \begin{macrocode}
\newif\ifVisCharOccured@mlpr@       \VisCharOccured@mlpr@false
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ifWithinSectionTitle@mlpr@}
% This switch determines whether we're inside a section title or not.
%    \begin{macrocode}
\newif\ifWithinSectionTitle@mlpr@ \WithinSectionTitle@mlpr@false
%    \end{macrocode}
% \end{macro}
%
% \paragraph{Helper macros for resetting state variables}
% The following macros are used to reset counters and switches.
% \begin{macro}{\resetEndKW@mlpr}
% This macro restores the |end| keyword as a closing keyword.
%    \begin{macrocode}
\newcommand\resetEndKW@mlpr
{%
  \global\ClosingEndKW@mlpr@true%
  \global\netBracketCount@mlpr=0%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\resetClassdefKW@mlpr}
% This macro reinitialises state variables related to class definition.
%    \begin{macrocode}
\newcommand\resetClassdefKW@mlpr
{%
  \global\InClassdef@mlpr@false%
  \global\blkLvl@mlpr=0%
  \global\blkLvlAtClassdef@mlpr=0%
}
%    \end{macrocode}
% \end{macro}
%
%
% \section{Default font and color settings}
%%
% \paragraph{Default fonts (family, series, shape, size)}
% Default font settings for the different elements of \matlab{} syntax are 
% stored in the following macros.
% \begin{macro}{\basicFontSpecs@mlpr}
% This macro holds the default font specs for the ``basic style'' of our
% listings.
% We use a scaled-down version of the Bera Mono font, because, contrary to
% typewriter \TeX{} fonts, it comes with a bold series.
%    \begin{macrocode}
\newcommand\basicFontSpecs@mlpr
{%
  \def\fvm@Scale{.85}%
  \fontfamily{fvm}\selectfont%
%    \end{macrocode}
% Also, we set the font size of inline code to the size of its surroundings.
%    \begin{macrocode}
  \lst@ifdisplaystyle%
    \normalsize%
  \fi
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\keywordFontSpecs@mlpr}
% This macro holds the default font specs for keywords.
%    \begin{macrocode}
\newcommand\keywordFontSpecs@mlpr{}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\lastElemFontSpecs@mlpr}
% This macro holds the default font specs for the last-element keyword.
%    \begin{macrocode}
\newcommand\lastElemFontSpecs@mlpr{}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\stringFontSpecs@mlpr}
% This macro holds the default font specs for strings.
%    \begin{macrocode}
\newcommand\stringFontSpecs@mlpr{}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\commentFontSpecs@mlpr}
% This macro holds the default font specs for comments.
%    \begin{macrocode}
\newcommand\commentFontSpecs@mlpr{}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\sectionTitleFontSpecs@mlpr}
% This macro holds the default font specs for section titles.
%    \begin{macrocode}
\newcommand\sectionTitleFontSpecs@mlpr{\commentFontSpecs@mlpr\bfseries}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\sectionRuleRT@mlpr}
% This macro holds the default value for the relative thickness of the
% horizontal rule shown above each section title in the \matlab{} editor.
%    \begin{macrocode}
\newcommand\sectionRuleRT@mlpr{.05}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\syscomFontSpecs@mlpr}
% This macro holds the default font specs for system commands.
%    \begin{macrocode}
\newcommand\syscomFontSpecs@mlpr{}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\sharedvarFontSpecs@mlpr}
% This macro holds the default font specs for variables with shared scope.
%    \begin{macrocode}
\newcommand\sharedvarFontSpecs@mlpr{}
%    \end{macrocode}
% \end{macro}
% Although \mlpkg{} currently does not offer a nice interface for customizing
% code-snippet placeholder delimiters, this feature might be implemented in a
% future release, if there is demand for it.
% For this reason, we use macros to store the default opening and closing
% delimiters and their default font specs.
% \begin{macro}{\phOpDelim@mlpr}
% This macro holds the default opening delimiter for code-snippet
% placeholders.
%    \begin{macrocode}
\newcommand\phOpDelim@mlpr{\textlangle}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\phClDelim@mlpr}
% This macro holds the default closing delimiter for code-snippet
% placeholders.
%    \begin{macrocode}
\newcommand\phClDelim@mlpr{\textrangle}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\phDelimFontSpecs@mlpr}
% This macro holds the default font specs for placeholder delimiters.
%    \begin{macrocode}
\newcommand\phDelimFontSpecs@mlpr{\rmfamily\upshape}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\phContentFontSpecs@mlpr}
% This macro holds the default font specs for placeholder content.
%    \begin{macrocode}
\newcommand\phContentFontSpecs@mlpr{\rmfamily\itshape}
%    \end{macrocode}
% \end{macro}
%
% \paragraph{Matlab syntax highlighting colors}
% Default colors for the different elements of \matlab{} syntax are defined 
% below.
% The naming scheme used for those colors is consistent with that used for
% macros holding the values of font specs.
%    \begin{macrocode}
\colorlet{textColor@mlpr}{black}
\colorlet{lastElemColor@mlpr}{textColor@mlpr}
\definecolor{keywordColor@mlpr}     {RGB}{000,000,255}
\definecolor{stringColor@mlpr}      {RGB}{160,032,240}
\definecolor{commentColor@mlpr}     {RGB}{034,139,034}
\colorlet{sectionTitleColor@mlpr}{commentColor@mlpr}
\colorlet{sectionRuleColor@mlpr}{black!15}
\definecolor{syscomColor@mlpr}      {RGB}{178,140,000}
\definecolor{sharedvarColor@mlpr}   {RGB}{000,163,163}
\definecolor{phColor@mlpr}          {RGB}{209,000,086}
%    \end{macrocode}
% The default color for line numbers in the three predefined styles is defined
% below.
%    \begin{macrocode}
\colorlet{numbersColor@matlabpretty}{gray}
%    \end{macrocode}
% The color defined below are not currently used by \mlpkg{}, but they may
% come in handy in a future release.
%    \begin{macrocode}
\colorlet{bgColor@mlpr}{white}
\definecolor{untermStringColor@mlpr}{RGB}{178,000,000}
\definecolor{syntaxErrorColor@mlpr}{RGB} {255,000,000}
%    \end{macrocode}
%
%
% \section{Helper macros for style settings}
%
% Those helper macros are used to hold the current style settings for
% keywords, comments, strings, etc.
% \begin{macro}{\basicStyle@mlpr}
% This macro holds the basic style applied to \matlab{} listings.
%    \begin{macrocode}
\newcommand\basicStyle@mlpr
{%
  \basicFontSpecs@mlpr%
  \color{textColor@mlpr}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\lastElemStyle@mlpr}
% This macro holds the style applied to the last-element keyword.
%    \begin{macrocode}
\newcommand\lastElemStyle@mlpr
{%
  \lastElemFontSpecs@mlpr%
  \color{lastElemColor@mlpr}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\keywordStyle@mlpr}
% This macro holds the style applied to \matlab{} keywords.
%    \begin{macrocode}
\newcommand\keywordStyle@mlpr
{%
  \keywordFontSpecs@mlpr%
  \color{keywordColor@mlpr}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\stringStyle@mlpr}
% This macro holds the style applied to \matlab{} strings.
%    \begin{macrocode}
\newcommand\stringStyle@mlpr
{%
  \global\InStr@mlpr@true%
  \stringFontSpecs@mlpr%
  \color{stringColor@mlpr}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\commentStyle@mlpr}
% This macro holds the style applied to \matlab{} comments.
%    \begin{macrocode}
\newcommand\commentStyle@mlpr
{%
  \commentFontSpecs@mlpr%
  \color{commentColor@mlpr}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\sectionTitleStyle@mlpr}
% This macro holds the style applied to \matlab{} section titles.
%    \begin{macrocode}
\newcommand\sectionTitleStyle@mlpr
{%
  \sectionTitleFontSpecs@mlpr%
  \color{sectionTitleColor@mlpr}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\syscomStyle@mlpr}
% This macro holds the style applied to \matlab{} system commands.
%    \begin{macrocode}
\newcommand\syscomStyle@mlpr
{%
  \syscomFontSpecs@mlpr%
  \color{syscomColor@mlpr}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\sharedvarStyle@mlpr}
% This macro holds the style applied to \matlab{} variables with shared scope.
%    \begin{macrocode}
\newcommand\sharedvarStyle@mlpr
{%
  \sharedvarFontSpecs@mlpr%
  \color{sharedvarColor@mlpr}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\phStyle@mlpr}
% This macro holds the style applied to code-snippet placeholders.
%    \begin{macrocode}
\newcommand\phStyle@mlpr
{%
  \phContentFontSpecs@mlpr%
  \color{phColor@mlpr}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \section{Processing of opening and closing brackets}
%
% An opening and or a closing brackets occuring in a \matlab{} listing affects
% the context;
% for instance, an |end| keyword is always interpreted as a closing keyword if
% it is immediately preceded by a closing bracket, no matter what comes
% before that.
% To keep track of the context, we must update our state variables every time
% a bracket is encountered.
% \begin{macro}{\MoreSelectCharTable@mlpr}
% This macro, which is passed to \lstpkg{}' \rkeyname{MoreSelectCharTable} key
% in the definition of \mllng{}, allows us to dictate what happens when an
% opening of a closing bracket is encountered.
%    \begin{macrocode}
\newcommand\MoreSelectCharTable@mlpr
{%
%    \end{macrocode}
% \begin{macro}{\roundBktOp@mlpr}
% In this macro is stored the definition of ``|(|'' from the default character
% table.
%    \begin{macrocode}
  \processOpenBracket@mlpr{`(}{\roundBktOp@mlpr}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\squareBktOp@mlpr}
% In this macro is stored the definition of ``|[|'' from the default character
% table.
%    \begin{macrocode}
  \processOpenBracket@mlpr{`[}{\squareBktOp@mlpr}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\curlyBktOp@mlpr}
% In this macro is stored the definition of ``|{|'' from the default character
% table.
%    \begin{macrocode}
  \processOpenBracket@mlpr{`\{}{\curlyBktOp@mlpr}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\roundBktCl@mlpr}
% In this macro is stored the definition of ``|)|'' from the default character
% table.
%    \begin{macrocode}
  \processCloseBracket@mlpr{`)}{\roundBktCl@mlpr}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\squareBktCl@mlpr}
% In this macro is stored the definition of ``|]|'' from the default character
% table.
%    \begin{macrocode}
  \processCloseBracket@mlpr{`]}{\squareBktCl@mlpr}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\curlyBktCl@mlpr}
% In this macro is stored the definition of ``|}|'' from the default character
% table.
%    \begin{macrocode}
  \processCloseBracket@mlpr{`\}}{\curlyBktCl@mlpr}%
%    \end{macrocode}
% \end{macro}
%    \begin{macrocode}
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\processOpenBracket@mlpr}
% This macro is used to ``hook into'' opening bracket characters and update
% state variables every time such a character is encountered in \lstpkg{}'
% ``processing mode''.
%    \begin{macrocode}
\newcommand\processOpenBracket@mlpr[2]
{%
  \lst@DefSaveDef{#1}#2%
  {%
    #2%
    \ifnum\lst@mode=\lst@Pmode\relax%
      \global\ClosingEndKW@mlpr@false%
      \global\advance\netBracketCount@mlpr by \@ne%
    \fi
  }%  
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\processCloseBracket@mlpr}
% This macro is used to ``hook into'' closing bracket characters and update
% state variables every time such a character is encountered in \lstpkg{}'
% ``processing mode''.
%    \begin{macrocode}
\newcommand\processCloseBracket@mlpr[2]
{%
  \lst@DefSaveDef{#1}#2%
  {%
    #2%
    \ifnum\lst@mode=\lst@Pmode\relax%
      \ifClosingEndKW@mlpr@%
        \netBracketCount@mlpr=0%
      \else
        \global\advance\netBracketCount@mlpr by \m@ne%
        \ifnum\netBracketCount@mlpr>0%
        \else
          \global\ClosingEndKW@mlpr@true%
        \fi
      \fi
    \fi
  }%  
}
%    \end{macrocode}
% \end{macro}
%
%
% \section{Processing of syntax elements}
% 
% \paragraph{Processing of keywords}
% The following macros are used for updating state variables every time a
% keyword is encountered in processed.
% The overarching algorithm is not documented here;
% in a future release, perhaps.
% \begin{macro}{\processOpRegKW@mlpr}
% This macro updates state variables every time an opening keyword is
% processed.
%    \begin{macrocode}
\newcommand\processOpRegKW@mlpr
{%
  \resetEndKW@mlpr%
  \global\advance\blkLvl@mlpr\@ne%
  \keywordStyle@mlpr%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\processMidKW@mlpr}
% This macro updates state variables every time a ``middle'' keyword is
% processed.
%    \begin{macrocode}
\newcommand\processMidKW@mlpr
{%
  \resetEndKW@mlpr%
  \keywordStyle@mlpr%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\processStdaKW@mlpr}
% As far as I can tell, ``standalone'' keywords and ``middle'' keywords
% affect the context in the same way;
% therefore, we simply reuse |\processMidKW@mlpr| here.
%    \begin{macrocode}
\newcommand\processStdaKW@mlpr\processMidKW@mlpr
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\processClassdefKW@mlpr}
% This macro updates state variables every time the "classdef" keyword is
% processed.
%    \begin{macrocode}
\newcommand\processClassdefKW@mlpr
{%
  \resetEndKW@mlpr%
  \global\InClassdef@mlpr@true%
  \global\blkLvlAtClassdef@mlpr=\blkLvl@mlpr%
  \global\advance\blkLvl@mlpr\@ne%
  \keywordStyle@mlpr%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\processMidClassdefKW@mlpr}
% This macro updates state variables every time one of the four keywords
% that occur within a class-definition block is processed.
%    \begin{macrocode}
\newcommand\processMidClassdefKW@mlpr
{%
  \ifOverridecontext@mlpr@%
    \keywordStyle@mlpr%
  \else
    \ifInClassdef@mlpr@%
      \resetEndKW@mlpr%
      \global\advance\blkLvl@mlpr\@ne%
      \keywordStyle@mlpr%
    \fi
  \fi
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\processEndKW@mlpr}
% This macro updates state variables every time the |end| keyword is
% processed.
%    \begin{macrocode}
\newcommand\processEndKW@mlpr
{%
  \ifOverridecontext@mlpr@%
    \lastElemStyle@mlpr%
  \else
    \ifClosingEndKW@mlpr@%
      \ifnum\blkLvl@mlpr>0%
        \global\advance\blkLvl@mlpr\m@ne%
      \fi
      \ifnum\blkLvl@mlpr=\blkLvlAtClassdef@mlpr%
        \global\InClassdef@mlpr@false%
      \fi
      \keywordStyle@mlpr%
    \else
      \lastElemStyle@mlpr%
    \fi
  \fi
}
%    \end{macrocode}
% \end{macro}
%
% \paragraph{Processing of strings}
% \begin{macro}{\processString@mlpr}
% Not much to write about this macro\ldots
%    \begin{macrocode}
\newcommand\processString@mlpr{\stringStyle@mlpr}
%    \end{macrocode}
% \end{macro}
%
% \paragraph{Processing of line-continuation tokens}
% \begin{macro}{\processDotDotDot@mlpr}
% This macro typesets the line-continuation token in the style of our
% \matlab{} keywords,
% tells \lstpkg{} that the current mode ends at the end of the current line,
% and applies our comment style to the rest of the current line.
%    \begin{macrocode}
\newcommand\processDotDotDot@mlpr
{%
  \lst@CalcLostSpaceAndOutput%
  {\keywordStyle@mlpr...}%
  \lst@Lmodetrue%
  \commentStyle@mlpr%
}
%    \end{macrocode}
% \end{macro}
%
% \paragraph{Processing of section titles}
% First, we need to define a few length macros in order to draw the horizontal
% rule that \matlab{} shows (by default) above each section title.
% \begin{macro}{\emHeight@mlpr}
% We will use this length to store the height of the ``M'' character in the
% current font.
%    \begin{macrocode}
\newlength\emHeight@mlpr
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\jayDepth@mlpr}
% We will use this length to store the depth of letter ``j'' in the current
% font.
%    \begin{macrocode}
\newlength\jayDepth@mlpr
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\sectionRuleOffset@mlpr}
% We will use this length to store the result of our calculations for the
% vertical offset required.
%    \begin{macrocode}
\newlength\sectionRuleOffset@mlpr
%    \end{macrocode}
% \end{macro}
% Let's proceed\ldots
% \begin{macro}{\processSectionTitle@mlpr}
% This macro is invoked when a |%%| delimiter is encountered.
%    \begin{macrocode}
\newcommand\processSectionTitle@mlpr
{%
  \ifWithinSectionTitle@mlpr@%
    \sectionTitleStyle@mlpr%
  \else
%    \end{macrocode}
% If visible characters have already been encountered before the |%%| on the
% current line, this line is simply typeset as a to-end-of-line comment.
%    \begin{macrocode}
    \ifVisCharOccured@mlpr@%
      \commentStyle@mlpr%
%    \end{macrocode}
% Otherwise, a section title starts here;
% we update the relevant state variables and, if the
% \rkeyname{mlshowsectionrules} key has been set, we draw a horizontal rule.
%    \begin{macrocode}
    \else % a section title is starting here
      \global\WithinSectionTitle@mlpr@true%
      \resetEndKW@mlpr%
      \ifShowCellrules@mlpr@%
        \drawSectionRule@mlpr%
      \fi
      \sectionTitleStyle@mlpr%
    \fi
  \fi
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\drawSectionRule@mlpr}
% This helper macro is used for drawing a horizontal rule just above the
% current line. 
%    \begin{macrocode}
\newcommand\drawSectionRule@mlpr
{%
%    \end{macrocode}
% We measure the height of the ``M'' character and the depth of the ``j''
% character, which we then use to calculate the required vertical offset.
%    \begin{macrocode}
  \setlength\emHeight@mlpr{\fontcharht\font`M}%
  \setlength\jayDepth@mlpr{\fontchardp\font`j}%
  \setlength\sectionRuleOffset@mlpr%
  {%
    \dimexpr.5\emHeight@mlpr%
           +.5\baselineskip%
           -.5\jayDepth@mlpr\relax%
  }%
%    \end{macrocode}
% We now draw a rule as required (color and dimensions).
%    \begin{macrocode}
  \bgroup%
  \color{sectionRuleColor@mlpr}%
    \makebox[0em][l]%
    {%
      \raisebox{\sectionRuleOffset@mlpr}[0pt][0pt]%
        {\rule{\lst@linewidth}{\sectionRuleRT@mlpr\baselineskip}}%
    }%
  \egroup%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\processSharedVar@mlpr}
% Not much to write about this macro\ldots
%    \begin{macrocode}
\newcommand\processSharedVar@mlpr{\sharedvarStyle@mlpr}
%    \end{macrocode}
% \end{macro}
%
% \section{Hooking into \lstpkg{}' hooks}
%
% We hook into a few of \lstpkg{}'s hooks to apply some necessary patches.
%
% \paragraph{\hookname{InitVarsEOL}}
% (See the
% \href{http://www.ctan.org/pkg/listings}{\lstpkg{} documentation} 
% for more details on this hook.)
% \begin{macro}{\addedToInitVarsEOL@mlpr}
% We add this macro (initially empty) to \lstpkg{}'
% \hookname{InitVarsEOL} hook.
%    \begin{macrocode}
\newcommand\addedToInitVarsEOL@mlpr{}
\lst@AddToHook{InitVarsEOL}{\addedToInitVarsEOL@mlpr}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@ddedToInitVarsEOL@mlpr}
% The |\addedToInitVarsEOL@mlpr| macro is let to this one under certain
% conditions (more details follow).
%    \begin{macrocode}
\newcommand\@ddedToInitVarsEOL@mlpr
{%
%    \end{macrocode}
% \lstpkg{}' built-in mechanism for handling \matlab{} string does not cover
% the illegal case in which an opening string delimiter is not followed by
% any matching (closing) string delimiter on the same line.
% More specifically, \lstpkg{} incorrectly highlights such a broken string
% literal as a bona-fide \matlab{} string.
% We improve the situation somewhat, by only highlighting as a string the line
% containing the unmatched opening delimiter, not the lines that follow it:
%    \begin{macrocode}
  \ifInStr@mlpr@%
    \global\InStr@mlpr@false%
    \lst@LeaveMode%
  \fi
%    \end{macrocode}
% Clearly, at the very beginning of a line, we're not (not yet, anyway)
% within a section title, and no visible character has yet occured on that
% line.
%    \begin{macrocode}
  \global\WithinSectionTitle@mlpr@false%
  \global\VisCharOccured@mlpr@false%
}
%    \end{macrocode}
% \end{macro}
%
% \paragraph{\hookname{EndGroup}}
% (See the
% \href{http://www.ctan.org/pkg/listings}{\lstpkg{} documentation} 
% for more details on this hook.)
% \begin{macro}{\addedToEndGroup@mlpr}
% We add this macro (initially empty) to \lstpkg{}'
% \hookname{EndGroup} hook.
%    \begin{macrocode}
\newcommand\addedToEndGroup@mlpr{}
\lst@AddToHook{EndGroup}{\addedToEndGroup@mlpr}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@ddedToEndGroup@mlpr}
% The |\addedToEndGroup@mlpr| macro is let to this one under certain
% conditions (more details follow).
% If we were in a string before when \hookname{EndGroup} hook was called,
% we're now exiting it;
% therefore, the relevant switch must be reset.
%    \begin{macrocode}
\newcommand\@ddedToEndGroup@mlpr{\global\InStr@mlpr@false}
%    \end{macrocode}
% \end{macro}
%
% \paragraph{\hookname{PostOutput}}
% (See the
% \href{http://www.ctan.org/pkg/listings}{\lstpkg{} documentation} 
% for more details on this hook.)
% \begin{macro}{\addedToPostOutput@mlpr}
% We add this macro (initially empty) to \lstpkg{}'
% \hookname{PostOutput} hook.
%    \begin{macrocode}
\newcommand\addedToPostOutput@mlpr{}
\lst@AddToHook{PostOutput}{\addedToPostOutput@mlpr}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@ddedToPostOutput@mlpr}
% The |\addedToPostOutput@mlpr| macro is let to this one under certain
% conditions (more details follow).
% If the last processed character was not white space
% (this check is necessary if \lstpkg{}' \rkeyname{keepspaces} key is set),
% we set the relevant switch.
%    \begin{macrocode}
\newcommand\@ddedToPostOutput@mlpr
{%
  \lst@ifwhitespace%
  \else
    \global\VisCharOccured@mlpr@true%
  \fi
}
%    \end{macrocode}
% \end{macro}
%
% \paragraph{\hookname{PreInit}}
% (See the
% \href{http://www.ctan.org/pkg/listings}{\lstpkg{} documentation} 
% for more details on this hook.)
% Because the |\lst@AddToHook| affects hooks globally
% (i.e.\ for all listings),
% we must apply our patches only when required, i.e.\ 
% in listings that use \mllng{}, and not in others.
% The \hookname{PreInit}, which is called at the very beginning of each
% listing, is where we do that.
% \begin{macro}{\addedToPreInitHook@mlpr}
% In this macro, which we add to \lstpkg{}' \hookname{PreInit} hook, we check
% whether |\lst@language| and |\languageNormedDefd@mlpr| expand (once) to the
% same replacement text and only apply our patches under that condition.
%    \begin{macrocode}
\newcommand\addedToPreInitHook@mlpr
{%
  \ifx\lst@language\languageNormedDefd@mlpr%
    \renewcommand\addedToInitVarsEOL@mlpr\@ddedToInitVarsEOL@mlpr%
    \renewcommand\addedToEndGroup@mlpr\@ddedToEndGroup@mlpr%
    \renewcommand\addedToPostOutput@mlpr\@ddedToPostOutput@mlpr%
  \fi
}
\lst@AddToHook{PreInit}{\addedToPreInitHook@mlpr}
%    \end{macrocode}
% \end{macro}
%
% \paragraph{\hookname{DeInit}}
% (See the
% \href{http://www.ctan.org/pkg/listings}{\lstpkg{} documentation} 
% for more details on this hook.)
% In the \hookname{DeInit} hook, which is called at the very end of each
% listing, we carry out some housekeeping tasks if the current listing uses
% \mllng{}.
% \begin{macro}{\addedToDeInitHook@mlpr}
% In this macro, which we add to \lstpkg{}' \hookname{DeInit} hook, we check
% whether |\lst@language| and |\languageNormedDefd@mlpr| expand (once) to the
% same replacement text and, under that condition, we reset all state
% variables.
%    \begin{macrocode}
\newcommand\addedToDeInitHook@mlpr
{%
  \ifx\lst@language\languageNormedDefd@mlpr%
    \resetEndKW@mlpr%
    \resetClassdefKW@mlpr%
    \InStr@mlpr@false%
    \VisCharOccured@mlpr@false%
    \WithinSectionTitle@mlpr@false%
  \fi
}
\lst@AddToHook{DeInit}{\addedToDeInitHook@mlpr}
%    \end{macrocode}
% \end{macro}
%
%
% \section{Code-snippet placeholders}
%
% \begin{macro}{\snippetPlaceholder}
% This user macro can be used to typeset placeholders in code snippets.
%    \begin{macrocode}
\newcommand\snippetPlaceholder[1]
{%
  \bgroup%
    \phStyle@mlpr%
    \bgroup%
      \phDelimFontSpecs@mlpr%
      \phOpDelim@mlpr%
    \egroup%
    #1\itcorr@mlpr%
    \bgroup%
      \phDelimFontSpecs@mlpr%
      \phClDelim@mlpr%
    \egroup%
  \egroup%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\itcorr@mlpr}
% This macro is used for applying italic correction in case the current font
% shape is either italic or slanted.
%    \begin{macrocode}
\newcommand\itcorr@mlpr
{%
%    \end{macrocode}
% We define a (long) macro that expands (once) to the current font shape,
% for comparison purposes.
%    \begin{macrocode}
  \expandafter\newcommand\expandafter\long@f@shape@mlpr\expandafter{\f@shape}%
%    \end{macrocode}
% If the current font shape is either italic or slanted, we apply italic
% correction.
%    \begin{macrocode}
  \ifx\long@f@shape@mlpr\itdefault%
    \/%
  \else
    \ifx\long@f@shape@mlpr\sldefault%
      \/%
    \fi
  \fi
}
%    \end{macrocode}
% \end{macro}
%
%
% \section{\texorpdfstring{\mlpkg{}}{matlab-prettifier} styles}
%
% Finally, for users who do not want to bother themselves with tweaking the
% appearance of their \matlab{} listings, we define three \lstpkg{} styles
% for \matlab{} listings.
% \paragraph{Standard style}
% Standard style of the \matlab{} editor.
%    \begin{macrocode}
\lstdefinestyle{Matlab-stdstyle}
{
  language    = \languageNormedDefd@mlpr,
  frame       = single,
  rulecolor   = \color{black!67},
  numbers     = left,
  numberstyle = \color{black!33},
  breaklines  = true,
}
%    \end{macrocode}
%
% \paragraph{Black \& white style}
% Black \& white, printer-friendly style.
%    \begin{macrocode}
\lstdefinestyle{Matlab-bwstyle}
{
  language            = \languageNormedDefd@mlpr,
  mlkeywordstyle      = \color[gray]{0}  \bfseries          ,
  mlcommentstyle      = \color[gray]{.75}           \itshape,
  mlstringstyle       = \color[gray]{.5}                    ,
  mlsyscomstyle       = \color[gray]{.25}                   ,
  mlsectiontitlestyle = \color[gray]{.75}\bfseries  \itshape,
  mlsharedvarstyle    = \color[gray]{0}                     ,
  mlplaceholderstyle  = \color[gray]{0}  \rmfamily  \itshape,
  frame               = single,
  rulecolor           = \color{black!67},
  numbers             = left,
  numberstyle         = \color{black!33},
  breaklines          = true,
}
%    \end{macrocode}
%
% \paragraph{Pygments-like style}
% Style that closely mimicks that of Pygments's `MatlabLexer'.
%    \begin{macrocode}
\lstdefinestyle{Matlab-pygstyle}
{
  language            = \languageNormedDefd@mlpr,
  mllastelementstyle  = \color[RGB]{127,000,000}                   ,
  mlkeywordstyle      = \color[RGB]{000,127,000}\bfseries          ,
  mlcommentstyle      = \color[RGB]{063,127,127}           \itshape,
  mlstringstyle       = \color[RGB]{186,034,034}                   ,
  mlsyscomstyle       = \color[RGB]{000,127,000}                   ,
  mlsectiontitlestyle = \color[RGB]{063,127,127}           \itshape,
  mlsharedvarstyle    = \color[RGB]{034,034,186}                   ,
  mlplaceholderstyle  = \color[RGB]{127,063,127}\rmfamily  \itshape,
  frame               = single,
  rulecolor           = \color{black!67},
  numbers             = left,
  numberstyle         = \color{black!33},
  breaklines          = true, 
}
%    \end{macrocode}
%
% \Finale
\endinput
