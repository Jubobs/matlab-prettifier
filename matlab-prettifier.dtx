% \iffalse meta-comment
%
% Copyright (C) 2014 by Julien Cretel
%                       <jubobs.matlab.prettifier at gmail.com>
%
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3
% of this license or (at your option) any later version.
% The latest version of this license is in
%
%     http://www.latex-project.org/lppl.txt
%
% and version 1.3 or later is part of all distributions of LaTeX
% version 2005/12/01 or later.
%
% \fi
%
% \iffalse
%<package>\NeedsTeXFormat{LaTeX2e}[2011/06/27]
%<package>\ProvidesPackage{matlab-prettifier}
%<package>  [2014/04/15 v0.1 A package for prettyprinting Matlab source code]
%
%<*driver>
\documentclass{ltxdoc}

\usepackage[T1]{fontenc}
\usepackage{lmodern}
\usepackage{xcolor}
\usepackage{lstdoc}
\usepackage{matlab-prettifier}
\usepackage{hyperref}
\usepackage{cleveref}

\lstset
{
  upquote = true,
  mlunquotedstringdelim = {/*}{*/},
}
\lstMakeShortInline[language=Matlab-pretty]"
\let\ph\snippetPlaceholder
\newcommand*{\pkg}[1]{\textsf{#1}}
\newcommand*{\opt}[1]{\texttt{#1}}
\newcommand*{\lststy}[1]{\texttt{#1}}
\newcommand\matlab{\textsc{Matlab}}
\newcommand\matlabver{\matlab~(R2013a)}
\newcommand\mathworks{MathWorks}
\newcommand*\trademark[1]{#1\textsuperscript{\textregistered}}
\newcommand\mlpkg{\pkg{matlab-prettifier}}
\newcommand\lstpkg{\pkg{listings}}
\newcommand\beamercls{\pkg{beamer}}
\newcommand\mllng{\texttt{Matlab-pretty}}

\EnableCrossrefs
\CodelineIndex
\RecordChanges

\begin{document}
  \DocInput{matlab-prettifier.dtx}
\end{document}
%</driver>
% \fi
%
% \CheckSum{584}
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
% \changes{v0.1}{2014/02/21}{Initial release.}
%
% \GetFileInfo{matlab-prettifier.sty}
%
%  ^^A see http://www.latex-project.org/cgi-bin/ltxbugs2html?pr=latex%2F3540
%  \begingroup
%    \def\x{\#,\$,\%,\^,\_,\~,\&,\{,\},\/}%^^A
%    \makeatletter
%    \@onelevel@sanitize\x
%  \expandafter\endgroup\expandafter\DoNotIndex\expandafter{\x}
%
% \begingroup
%    \makeatletter
%    \lccode`9=32\relax
%    \lowercase{%^^A
%      \edef\x{\noexpand\DoNotIndex{\@backslashchar9}}%^^A
%    }%^^A
%  \expandafter\endgroup\x
%
% \DoNotIndex{\@ifpackagewith,\@ne}
% \DoNotIndex{\advance}
% \DoNotIndex{\baselinskip,\bfseries,\bgroup}
% \DoNotIndex{\ClosingEndKW@mlpretty@false,\ClosingEndKW@mlpretty@true,^^A
%   \color,\colorlet,\CurrentOption}
% \DoNotIndex{\DeclareOption,\definecolor,\dimexpr}
% \DoNotIndex{\edef,\egroup,\else,\expandafter}
% \DoNotIndex{\f@shape,\fi,\font,\fontchardp,\fontcharht}
% \DoNotIndex{\global}
% \DoNotIndex{\ifnum,\ifx,\InClassdef@mlpretty@false,^^A
%   \InClassdef@mlpretty@true,\InLineCom@mlpretty@false,^^A
%   \InLineCom@mlpretty@true,\InStr@mlpretty@false,\InStr@mlpretty@true,^^A
%   \itdefault,\itshape}
% \DoNotIndex{\long,\lst@AddToHook,\lst@CalcLostSpaceAndOutput,^^A
%   \lst@DefSaveDef,\lst@DelimKey,\lst@ifdisplaystyle,\lst@InstallKeywords,^^A
%   \lst@Key,\lst@language,\lst@LeaveMode,\lst@linewidth,\lst@mode,^^A
%   \lst@NormedDef,\lst@Pmode,\lstdefinelanguage,\lstdefinestyle,^^A
%   \lstKV@SetIf}
% \DoNotIndex{\m@ne,\makebox,\newcommand,\newcount,\newif,\newlength,^^A
%   normalfont,\normalsize}
% \DoNotIndex{\OptionNotUsed}
% \DoNotIndex{\PackageError,\PackageWarning,\ProcessOptions}
% \DoNotIndex{\raisebox,\relax,\renewcommand,\RequirePackage,\rule}
% \DoNotIndex{\setlength,\sldefault,\textlangle,\textrangle,\ttfamily}
% \DoNotIndex{\TooLateForSectionTitle@mlpretty@false,^^A
%   \TooLateForSectionTitle@mlpretty@true}
% \DoNotIndex{\upshape}
% \DoNotIndex{\WithinSectionTitle@mlpretty@false,^^A
%   \WithinSectionTitle@mlpretty@true}
%
% \title^^A
% {^^A
%   The \mlpkg{} package^^A
%   \thanks^^A
%   {^^A
%     This document corresponds to \mlpkg~\fileversion,
%     dated~\filedate.^^A
%   }^^A
%  }
% \author{Julien Cretel\\ \texttt{jubobs.matlab.prettifier at gmail.com}}
% \date{\filedate}
% \thispagestyle{empty}
% \maketitle
%
% \begin{abstract}
%   The \mlpkg{} package allows you to effortlessly prettyprint
%   Matlab source code in documents typeset with \LaTeX{} \& friends. Built
%   on top of the \lstpkg{} package, \mlpkg{} defines a language called
%   \mllng{}, which can be invoked by \lstpkg{} macros and
%   environments and can be used in conjunction with (most) parameters
%   provided by the \lstpkg{} package. Fine-tuning of the output is possible
%   via a key-value interface extending that of \lstpkg{}. The \mlpkg{}
%   package also conveniently provides three predefined styles, for fast
%   deployment.
% \end{abstract}
%
% \tableofcontents\newpage
%
%
% \section{Introduction}
%
%
% \subsection{Why this package?}
%
% \trademark{\matlab} is a high-level language and interactive environment for
% numerical computation, visualization, and programming.^^A
%   \footnote{Source: \url{http://www.mathworks.co.uk/products/matlab/}}
% Despite being proprietary and occasionally frustrating, \matlab{} remains a
% great tool for prototyping matrix-oriented, number-crunching programs.
% As such, it enjoys widespread popularity, especially in academia,
% where, in particular, it is often used for teaching numerical methods.
%
% Users of both \matlab{} and \LaTeX{} (and friends) often want to typeset
% \matlab{} listings in \LaTeX{} documents, usually with some syntax
% highlighting, for improved code readability;
% the relatively large number of relevant questions posted on
% \href{http://tex.stackexchange.com/search?q=matlab+code+is%3Aquestion}^^A
% {tex.stackexchange.com} attests to that need.
%
% Recent versions of \matlab{} provide a built-in function, called "publish",
%  that can generate \LaTeX{} code for typesetting \matlab{} listings, but
% that function uses a |verbatim| environment, which doesn't allow for any
% fancy formatting.
% Several \LaTeX{} packages^^A
% ---vanilla \lstpkg{}, \pkg{mcode}, and \pkg{minted}, among others---^^A
% allow for automatic syntax highlighting of \matlab{} listings in \LaTeX{}
% documents.
% However, none of those packages do a great job at replicating the very
% specific syntax-highlighting style performed on the fly by the \matlab{}
% editor.^^A
%   \footnote{see ... for a comparison.}
%  
% The lack of tools for faithfully mimicking the style of the \matlab{}
% editor is unfortunate, especially from an educational standpoint, for the
% following reason.
% Most newcomers to \matlab{} read and write code in the \matlab{} editor
% and are, therefore, continually exposed to its highlighting style.
% Visual cues^^A
% ---such as those provided by syntax highlighting---^^A
% play an important role for recognising patterns.
% Therefore, students of a programming language are more likely to quickly
% and effectively learn and recognise its syntax if they see it highlighted
% in a consistent manner, whether it be in a text editor or in some course
% material (handout, assignment paper, etc.).
%
% The \mlpkg{} package is intended to fill that gap.
% Built on top of the feature-rich \lstpkg{} package, \mlpkg{} allows you to
%  beautifully and effortlessly typeset \matlab{} listings, as it configures
% \lstpkg{} ``behind the scenes'' to replicate, as closely as possible, the
% syntax-highlighting style of the \matlab{} editor.
% Furthermore, \mlpkg{} comes with a few additional features that should make
% your life easier. Read on!
%
%
% \subsection{Automatic syntax highlighting}
% 
% The \mlpkg{} package defines a \pkg{listings} language called \mllng{},
% which can be invoked in the user-level macros and environments provided by
% the \lstpkg{} package. \mllng{} automatically highlights the following.
% 
% \paragraph{Context-insensitive keywords}
%
% \paragraph{Context-sensitive keywords}
% 
% \paragraph{Quoted strings}
%
% \paragraph{To-end-of-line and block comments}
% 
% \paragraph{Line-continuation token (and associated to-end-of-line comment)}
%
% \paragraph{Code-section titles}
%
%
% \subsection{Other features}
%
% Additional features include
%
% \begin{itemize}
%   \item a key-value interface extending that of the \lstpkg{} package,
%   \item automatic scaling of inline code according to its surroundings,
%   \item manual highlighting of variables with shared scope,
%   \item a macro for easily typesetting placeholders in code snippets,
%   \item three predefined styles.
% \end{itemize}
%
%
% \subsection{Comparison with other packages}
%
% TODO; use a matrix with features of each; speed benchmark
% 
%
% \section{Installation}
%
%
% \subsection{Package dependencies}
%
% \mlpkg{} requires relatively up-to-date versions of packages \pkg{textcomp},
% \pkg{xcolor}, and \lstpkg{}, all three of which ship with popular \TeX{}
% distributions. It loads those three packages without any options.
%
%
% \subsection{Installing \texorpdfstring{\mlpkg{}}{matlab-prettifier}}
%
% TODO
% To install \mlpkg{} manually, run
%^^A
% \begin{verbatim}
%   latex matlab-prettifier.ins\end{verbatim}
%^^A
% and copy \mlpkg{}.sty to a path where \LaTeX{} can find it.
% To generate the documentation, run
%^^A
% \begin{verbatim}
%   pdflatex matlab-prettifier.dtx
%   makeindex -s gglo.ist -o matlab-prettifier.gls matlab-prettifier.glo
%   makeindex -s gind.ist -o matlab-prettifier.ind matlab-prettifier.idx
%   pdflatex matlab-prettifier.dtx
%   pdflatex matlab-prettifier.dtx\end{verbatim}
%^^A
%
%
% \section{User's guide}
%
% As stated above, the \mlpkg{} package is built on top of the \lstpkg{}
% package.
% If you already are a seasoned \lstpkg{} user, you should feel right at home.
% If you're not, be aware that this user's guide makes use of some \lstpkg{}
% functionalities (such as key-value options) without describing their usage.
% For more details on those functionalities, you should consult the \lstpkg{}
% documentation.
%
%
% \subsection{Loading \texorpdfstring{\mlpkg{}}{matlab-prettifier}}
%
% Simply write
%^^A
% \begin{verbatim}
%   \usepackage{matlab-prettifier}\end{verbatim}
%^^A
% somewhere in your preamble. You may want to load the \lstpkg{} and
% \pkg{xcolor} packages with some options; in that case, make sure those
% options are passed to those two packages \emph{before} loading the \mlpkg{}
% package.
%
% The \mlpkg{} package currently offers no package options.
%
%
% \subsection{Displayed code}
%
% To typeset a \matlab{} listing embedded in your |tex| file, simply enclose
% it in an |lstlisting| environment, and specify |language=|\mllng{} in the
% environment's optional argument.
%^^A
% \begin{verbatim}
%   \begin{lstlisting}[language=Matlab-pretty]
%     ...
%   \end{lstlisting}\end{verbatim}
%
%
% \subsection{Standalone listings}
%
% In practice, though, keeping your \matlab{} listings in external files^^A
% ---rather than embedding them in a |tex|~file---^^A
% is preferable, for maintainability reasons.
% To typeset a \matlab{} listing residing in an m-file, simply invoke the
% |\lstinputlisting| macro; specify |language=|\mllng{} in the macro's
% optional argument, and pass the path to the m-file in question to the
% mandatory argument.
%^^A
% \begin{verbatim}
%   \lstinputlisting[language=Matlab-pretty]{sample.m}\end{verbatim}
%^^A
%
%
% \subsection{Inline listings}
% \label{inline}
%
% You may want to typeset fragments of \matlab{} code within the main text of
% your document. For instance, you may want to typeset the |break| keyword in
% a sentence, in order to explain it usage.
% The |\lstinline| macro can be used for typesetting such.
%^^A
% \begin{verbatim}
%   \lstinline[language=Matlab-pretty]!break!\end{verbatim}
%^^A
% Well, that's quite a mouthful for such a simple \matlab{} keyword!
% Writing |\lstinline| for each instance of inline Matlab code in your
% document can rapidly become tedious.
% Fortunately, \lstpkg{} allows its users to define a character as a shorthand
% for inline code via the |\lstMakeShortInline| macro.
% The following line defines the~|"| character as a shorthand for \matlab{}
% code.
%^^A
% \begin{verbatim}
%   \lstMakeShortInline[language=Matlab-pretty]"\end{verbatim}
%^^A
% After such a definition, "break" can be typeset by simply writing |"break"|.
% 
% You should choose a character that does not otherwise occur in your
% |tex| file, especially in the inline \matlab{} code itself,
% or you run the risk of confusing \TeX{}.
% I find that the double quote character (|"|) offers a good compromise.
% If necessary, you can undefine a character as a shorthand for inline code,
% via the |\lstDeleteShortInline| macro.
% For more details, see subsection~4.17 in the \lstpkg{} manual.
%
%
% \subsection{Placeholders}
%
% The \mlpkg{} package defines a macro, called |\snippetPlaceholder|,
% for typesetting code-snippet placeholders.
% Such placeholders are particularly useful for educational purposes,
% e.g.\ to describe elements of \matlab{} syntax.
% Here is an example: \ph{initial-value}.
% In order to typeset that placeholder, you could use
%^^A
% \begin{verbatim}
%   \placeholder{initial-value}\end{verbatim}
%^^A
%
% I purposefully chose a rather long name for this user macro,
% in order to minimise the risk of conflict with other macros.
% However, for convenience, you can of course define a custom macro with a
% shorter macro for typesetting placeholders, e.g.~|\ph|:
%^^A
% \begin{verbatim}
%   \let\ph\snippetPlaceholder\end{verbatim}
%^^A
%
% To use |\snippetPlaceholder| inside listings, you must invoke it within an
% \emph{escape to \LaTeX{}}; see subsection~4.14 of the \lstpkg{} manual.
% If you choose to define a single character for escaping to \LaTeX{} (via
% the |escapechar|~key), I recommend you define
% either the double quote character~(|"|)
% or the backtick character~(\texttt{\`{}})
% as escape character,
% because the latter are not allowed in \matlab{} statements and expressions^^A
% ---although they may occur in \matlab{} string literals.
% Note that using |"| both as shorthand for inline code (see \cref{inline})
% and as an escape-to-\LaTeX{} character inside listings is perfectly allowed.
% The following example illustrates how placeholders may be used to describe
% the syntax of the \matlab{} while loop.
%^^A
% \begin{lstsample}{}{}
%    \begin{lstlisting}[
%       language   = Matlab-pretty,
%       escapechar = `,
%    ]
%    while `\ph{condition}`
%      if `\ph{something-bad-happens}`
%        break
%      else
%        % do something useful
%      end
%    end
%    \end{lstlisting}
% \end{lstsample}
%^^A
% TODO styles
%
%
% \section{Key-value interface}
%
% The \lstpkg{} package provides a large number of options accessible via a
% nifty key-value interface, which is described in the excellent \lstpkg{}
% documentation.
% The \mlpkg{} package extends the \lstpkg{} key-value interface interface by
% defining several additional keys that allow you to customise the style of
% your \matlab{} listings, should you wish to do so.
% All the keys provided by \mlpkg{} are prefixed by |ml|, to distinguish them
% from ``native'' \lstpkg{} keys. 
% 
%
% \subsection{Read this first!}
%
% The great majority of keys provided by \lstpkg{} can be used in conjunction
% with keys provided by \mlpkg{} without any detrimental side effects,
% but there are a few exceptions that you should keep in mind.
% 
% Some \mlpkg{} keys rely on \lstpkg{} keys ``under the hood'',
% and using those \mlpkg{} and \lstpkg{} keys in conjunction is
% \emph{strongly discouraged},
% because doing so has the potential to wreak havok on the syntax highlighting
% of \matlab{} listings.
% It would be like \emph{crossing the streams}: it would be \emph{bad}!
%
% For instance, if you want to change the way \matlab{} keywords are typeset,
% you should use the dedicated \mlpkg{} key called \rkeyname{mlkeywordstyle}
% and eschew the \lstpkg{} key called |keywordstyle|.
% More generally, if \lstpkg{} provides a key called \meta{something} and
% \mlpkg{} provides a key called |ml|\meta{something},
% customisation of your \matlab{} listings should be done with the latter, not
% the former.
%
%
% \subsection{Options provided by \mlpkg{}}
%
% For each of the \mlpkg{} key described below, the default value is indicated
% on the right-hand side.
%
% \begin{syntax}
%
%   \item[0.1,\color{blue}]
%     \rkeyname{mlkeywordstyle}|=|\meta{style}
%
%     This key determines the style for \matlab{} keywords.
%     The last token can be a one-parameter command,
%     such as |\textbf| or |\underbar|.
%
%   \item[0.1,\color{black}]
%     \rkeyname{mllastelementstyle}|=|\meta{style}
%
%     The |end| keyword has different meanings depending on the context in
%     which it occurs:
%     it may be used to close a code block (e.g.\ a while loop),
%     or it may stand for the last element of an array.
%     In the first case, it's highlighted in the same style as the other
%     \matlab{} keywords, like so: "end".
%     In the other case, it's highlighted like ``normal text'', like so:
%     \lstinline[language=Matlab-pretty,mloverride]|end|.
%     This key determines the style of this keyword in cases where it means
%     ``last element''.
%
%   \item[0.1,false]
%     \rkeyname{mloverride}|=|\meta{\alternative{true,false}}
%     \syntaxor\rkeyname{mloverride}
%
%     By default, in inline code, \mlpkg{} highlights the |end| keyword as
%     as the closing keyword (\emph{not} as the ``last element'')
%     and highlights the four class-definition identifiers as \matlab{}
%     functions (\emph{not} as keywords):
%     "end", "events", "enumeration", "methods", and "properties".
%     This key allows you to overrides the current context, so that those
%     five context-sensitive keywords be typeset in the style associated with
%     the alternative context:
%     \lstinline[language=Matlab-pretty,mloverride]|end|,
%     \lstinline[language=Matlab-pretty,mloverride]|events|, 
%     \lstinline[language=Matlab-pretty,mloverride]|enumeration|, 
%     \lstinline[language=Matlab-pretty,mloverride]|methods|,
%     \lstinline[language=Matlab-pretty,mloverride]|properties|.
%
%   \item[0.1,{\color[RGB]{160,32,240}}]
%     \rkeyname{mlstringstyle}|=|\meta{style}
%
%     This key determines the style for \matlab{} quoted and unquoted strings.
%     The last token can be a one-parameter command,
%     such as |\textbf| or |\underbar|.
%
%   \item[0.1,{\color[RGB]{34,139,34}}]
%     \rkeyname{mlcommentstyle}|=|\meta{style}
%
%     This key determines the style for \matlab{} to-end-of-line and block
%     comments.
%     The last token can be a one-parameter command,
%     such as |\textbf| or |\underbar|.
%
%   \item[0.1,{\bfseries\color[RGB]{34,139,34}}]
%     \rkeyname{mlsectiontitlestyle}|=|\meta{style}
%   
%     This key determines the style for \matlab{} code-section titles.
%     The last token can be a one-parameter command,
%     such as |\textbf| or |\underbar|.
%     
%   \item[0.1,false]
%     \rkeyname{mlshowsectionrules}|=|\meta{\alternative{true,false}}
%     \syntaxor\rkeyname{mlshowsectionrules}
%
%     This key determines whether an horizontal rule gets printed above each
%     \matlab{} code-section title.
%
%   \item[0.1,.05]
%     \rkeyname{mlsectionrulethickness}|=|\meta{number}
%     
%     This key determines the thickness of the horizontal rule above each
%     \matlab{} code-section title.
%     The resulting thickness corresponds to the product of the value passed
%     to this key and the value of |\baselineskip|.
%
%   \item[0.1,black!15]
%     \rkeyname{mlsectionrulecolor}|=|\meta{color}
%
%     This key determines the color of the horizontal rule above each
%     \matlab{} code-section title.
%
%   \item[0.1,{\color[RGB]{178,140,0}}]
%     \rkeyname{mlsyscomstyle}|=|\meta{style}
%
%     This key determines the style for \matlab{} system commands.
%     The last token can be a one-parameter command,
%     such as |\textbf| or |\underbar|.
%
%   \item[0.1]
%     \rkeyname{mlsharedvars}|=|\meta{list of variables}
%   \item[0.1]
%     \rkeyname{mlmoresharedvars}|=|\meta{list of variables}
%   \item[0.1]
%     \rkeyname{mldeletesharedvars}|=|\meta{list of variables}
%
%     Those three keys allow you to define, add, or remove (respectively)
%     \matlab{} variables with shared scope.
%
%   \item[0.1,{\color[RGB]{0,163,163}}]
%     \rkeyname{mlsharedvarstyle}|=|\meta{style}
%
%     This key determines the style for \matlab{} variables with shared scope.
%     The last token can be a one-parameter command,
%     such as |\textbf| or |\underbar|.
%
%   \item[0.1]
%     \rkeyname{mlunquotedstringdelim}|={|^^A
%       \meta{opening delimiter}|}{|\meta{closing delimiter}|}|
%
%     This key allows you to define delimiters
%     (possibly composed of multiple characters)
%     for highlighting unquoted strings;
%     the delimiter themselves do not get printed in the output.
%     Be aware that the special characters |{}#%\| must be escaped with a
%     backslash (see item~5 in subsection~4.1 of the \lstpkg{} documentation).
%     Note that this key is only a tentative solution;
%     automatic highlighting of unquoted strings is a planned feature for the
%     next realease of \mlpkg{}, which should make this key obsolete.
%
% \item[0.1,{\normalfont\itshape\color[RGB]{209,0,86}}]
%     \rkeyname{mlplaceholderstyle}|=|\meta{style}
%
%     This key determines the style for placeholders in code snippets.
%     The last token can be a one-parameter command,
%     such as |\textbf| or |\underbar|.
%       
%
% \end{syntax}
%
%
% \section{Tips and tricks}
%
% Here is a list of recommendations^^A
% ---some more opinionated than others---^^A
% that, if followed, should make your experience with \mlpkg{} more pleasant.
%
% \paragraph{Define macros for recurring placeholders.}
% For good maintainability, you should define macros for oft-used placeholders,
% e.g.
%^^A
% \begin{verbatim}
%   \newcommand\phcond{\snippetPlaceholder{condition}}\end{verbatim}
%^^A
%
% \paragraph{Don't copy \& paste!}
% Do not encourage your readers to copy listings from the PDF and then paste
% them in their \matlab{} editor.
% Unfortunately, it simply is \emph{not} a reliable way of distributing code,
% for at least two reasons:
%
% \begin{itemize}
%   \item the results of copying content from a PDF for
%     subsequent pasting vary widely from one PDF viewer to another;
%   \item line breaks introduced by \lstpkg{} for typesetting a \matlab{}
%     listing may translate to invalid \matlab{} syntax.
% \end{itemize}
%
% \paragraph{In \beamercls{}, use the \opt{fragile} option.}
% If you want to typeset listings in a \beamercls{} frame, remember that you
% need to use the |fragile| option for that frame.
%
% \paragraph{Prefer Latin Modern to Computer Modern.}
% If you are satisfied with Computer Modern fonts
% (the default \TeX{} fonts), 
% do yourself a favour and load the \pkg{lmodern} package,
% which loads the very similar but much better Latin Modern fonts.
% I also recommend you load \pkg{fontenc} with the \opt{T1}, if possible.
%
% \paragraph{Use a font that comes with bold typewriter version.}
% If you seem unable to use bold typewriter font in your listings,
% the reason probably is that the font you're using does not come with bold
% typewriter version; \TeX{} fonts (such as Computer Modern) are a notable
% example. You may want to use a monospace font that does provide a bold
% typewriter version, such as Bera Mono or Courier.
%
% \paragraph{Printing visible-space characters}
% By default, no visible characters are printed anywhere in \matlab{} code.
% However, you can always override that by setting |showspaces|
% and |showstringspaces| to |true| \emph{after} setting the \mllng{}
% language or one of the styles defines by \mlpkg{}.
%
% \paragraph{Stick with the \mllng{} language.}
% Defining a \lstpkg{} language based on \mllng{} is discouraged,
% for the following reason:
% \mlpkg{} performs some necessary housekeeping tasks at the beginning and
% end of each listing, but only under the condition that the language name used
% by the listing be \mllng{};
% therefore, \matlab{} listings are unlikely to get correctly highlighted if
% the language name differs from \mllng{}
% (see \cref{hooks-mlpretty} for more details).
%
% \paragraph{Inline code in footnotes}
% Using inline code in footnotes may generate an error,
% because verbatim content is not normally allowed in footnotes.
% One workaround is to load the \pkg{bigfoot} package.
%
% \paragraph{Vertically centered tilde}
% Unfortunately, the tilde character ("~") does not get typeset vertically
% centered in all fonts, as it does in the \matlab{} editor.
% Because a font-independent workaround seems out of reach, I refer you to
% \url{http://tex.stackexchange.com/q/312/21891}
% where you will find a list of ad-hoc solutions.
%
% \paragraph{Avoid literate replacements like the plague!}
% The \pkg{mcode}, for instance, provides preset literate replacements
% (see subsection~5.4 in the \lstpkg{} manual),
% e.g.\ for printing~\(\leq\) in place of each instance of~"<=".
% I deliberately chose not to define any such literate replacements in the
% \mlpkg{} package, because I think that,
% rather than improving code readability,
% they have a potential to confuse your readers.
% In particular, a newcomer to the programming language may not immediately
% realise that those symbols are not part of the language's syntax;
% she may ascribe literal meaning to them and attempt to reproduce them in her
% editor or IDE.
% How counterproductive!
% Of course, if you insist, you can still define your own literate replacements
% (via the |literate| key provided by the \lstpkg{} package).
%
%
% \section{To-do list}
%
% \paragraph{Automatic highlighting of unquoted strings}
% \label{todo-unquoted}
% In the current version of \mlpkg{}, unquoted strings can only be highlighted
% as strings by delimiting them with custom delimiters
% (defined via the \rkeyname{mlunquotedstringdelim} key).
% However, I have plans to implement an automatic approach in the next release.
% Note that this feature will make the \rkeyname{mlunquotedstringdelim} key
% obsolete.
%
% \paragraph{Option to only print the header of a \matlab{} function file}
% A partial solution is available at
% \url{http://tex.stackexchange.com/q/164280/21891}
% but is currently not compatible with \mlpkg{};
% I have plans to implement this feature in a future release of \mlpkg{}.
%
% \section{Known issues and missing features}
%
% Although \mlpkg{} does a reasonably good job at replicating the syntax
% highlighting performed by the \matlab{} editor, some problems remain.
% Here is a list of known, currently unresolved problems.
% 
% \paragraph{No automatic highlighting of variables with shared scope}
% Unfortunately, automatic highlighting of variables with shared scope
% would require multiple passes, which the \lstpkg{} package cannot do.
% However, I believe that the number of variables in your \matlab{} code
% should be small enough^^A
% ---otherwise, your \matlab{} code is probably not sound!---^^A
% that you can afford to highlight those variables manually, if you insist on
% highlighting them at all.
% 
% \paragraph{No highlighting of unterminated strings}
% Because \lstpkg{} cannot look very far ahead, I haven't found an easy way of
% checking whether an opening string delimiter is missing a matching (closing)
% string delimiter on the same line.
%
% \paragraph{Incorrect highlighting of certain instances of illegal syntax}
% For example, the \matlab{} editor would highlight the |end| keyword in the
% listing below, not as closing keyword ("end"), but as ``last element''
% (\lstinline[language=Matlab-pretty,mloverride]|end|).
%^^A
% \begin{lstsample}{}{}
%    \begin{lstlisting}[
%      language=Matlab-pretty]
%    if=end
%    \end{lstlisting}
% \end{lstsample}
% 
% \paragraph{Incorrect highlighting of ``runaway'' block comments} 
% \matlab{} requires opening and closing delimiters of block comments to each
% be on a line of their own, without any non-white character, but \mlpkg{}
% incorrectly considers block comments closed even in cases where this rule is
% infringed. For example, in the listing below, the \matlab{} editor would
% typeset "a = 1" in comment style.
%^^A
% \begin{lstsample}{}{}
%    \begin{lstlisting}[
%      language=Matlab-pretty]
%    %{
%      "runaway"
%     block
%     comment %}
%    a = 1
%    \end{lstlisting}
% \end{lstsample}
%
% \paragraph{No highlighting of invalid characters}
% Characters occuring in places where they are invalid do not get highlighted
% in red, as they would in the \matlab{} editor.
%
%
% \section{Bug reports and feature suggestions}
%
% The development version of \mlpkg{} is currently hosted on Bitbucket at
% \href{http://bitbucket.org/Jubobs/matlab-prettifier/}
%   {Jubobs/matlab-prettifier}.
% If you find a bug in \mlpkg{}, if you would like to see a feature
% implemented in the package, or if you can think of ways the \mlpkg{}
% documentation could be improved, please add an entry to the Bitbucket
% repository's issue tracker; alternatively, you can send me an email at
% \href{mailto:jubobs.matlab.prettifier@gmail.com}
%   {jubobs.matlab.prettifier at gmail.com}
%
% \StopEventually{\clearpage\PrintChanges\setcounter{IndexColumns}{2}\PrintIndex}
%
%
% \section{Implementation}
%
% Be aware that, for ``namespacing'', the \mlpkg{} package uses, not a prefix,
% but the |mlpretty|~suffix (preceded by an |@| character) throughout.
%
%
% \subsection{Preliminary checks}
%
% \begin{macro}{\lstoptcheck@mlpretty}
%   Because the \lstpkg{} options \opt{noaspects}, \opt{0.21}, and
%   \opt{savemem} are incompatible with \pkg{matlab-prettifier}, checking
%   whether the \lstpkg{} package has been loaded with any of those options is
%   a good idea; if so, we should issue an error.
%   This macro checks whether \lstpkg{} was loaded with a given option
%   and, if so, throws an error.
%    \begin{macrocode}
\newcommand\lstoptcheck@mlpretty[1]
{%
  \@ifpackagewith{listings}{#1}%
  {
    \PackageError{matlab-prettifier}%
      {incompatible listings' option #1}%
      {%
        Make sure the `listings' package
        doesn't get loaded with option `#1'%
      }
  }
  {}
}
%    \end{macrocode}
% \end{macro}
% Using that macro, we make sure that none of the problematic \lstpkg{}
% options has been specified during an earlier loading of the \lstpkg{}
% package.
%    \begin{macrocode}
\lstoptcheck@mlpretty{noaspects}
\lstoptcheck@mlpretty{0.21}
\lstoptcheck@mlpretty{savemem}
%    \end{macrocode}
%
%
% \subsection{Package options}
%
% \mlpkg{} currently offers no package option; therefore, if the user
% mistakenly specifies any option for the package, we discard that option
% and issue a warning.
%    \begin{macrocode}
\DeclareOption*%
{%
  \OptionNotUsed
  \PackageWarning{matlab-prettifier}{Unknown `\CurrentOption' option}
}
\ProcessOptions\relax
%    \end{macrocode}
%
%
% \subsection{Required packages}
% 
% The \mlpkg{} package require three packages without any package option:
% the \pkg{textcomp} package, in order to use the \lstpkg{}' |upquote|~key;
% the \pkg{xcolor} package, in order to color our \matlab{} code;
% and, of course, the \lstpkg{} package.
%    \begin{macrocode}
\RequirePackage{textcomp}[2005/09/27]
\RequirePackage{xcolor}[2007/01/21]
\RequirePackage{listings}[2013/08/26]
%    \end{macrocode}
%
%
% \subsection{Key-value interface}
%
% TODO: \mlpkg{} does a lot behind the scenes; using the listings key wouldn't do. several classes of keyword for convenience, but the user really wants to affect the style of all those keyword in one go.
% We extend \lstpkg{}' key-value interface by defining several additional
% keys, which we will use for defining a new \lstpkg{} language and three
% \lstpkg{} styles, further down. Most of those new keys start by the
% prefix~|ml|, so that the user easily distinguish them from ``native''
% \lstpkg{} keys.
%
% \begin{lstkey}{mlkeywordstyle}
%   In the upcoming language definition, we use several classes of \lstpkg{}
% keywords to handle the different \matlab{} keywords. However, we need one
% style key to ``rule them all''.
%    \begin{macrocode}
\lst@Key{mlkeywordstyle}\relax%
  {\renewcommand\keywordStyle@mlpretty{#1}}
%    \end{macrocode}
% \end{lstkey}
%
% \begin{lstkey}{mllastelementstyle}
%   This key determines the style of the |end| keyword in cases where it means
%   ``last element''.
%    \begin{macrocode}
\lst@Key{mllastelementstyle}\relax%
  {\renewcommand\lastElemStyle@mlpretty{#1}}
%    \end{macrocode}
% \end{lstkey}
%
% \begin{lstkey}{mloverride}
%   This key overrides the current context, so that those context-sensitive
%   keywords be typeset in the style associated with the alternative context.
%    \begin{macrocode}
\lst@Key{mloverride}{false}[t]%
  {\lstKV@SetIf{#1}\ifOverridecontext@mlpretty@}
%    \end{macrocode}
% \end{lstkey}
%
% \begin{lstkey}{mlstringstyle}
% This key determines the style of \matlab{} (quoted and unquoted) strings.
%    \begin{macrocode}
\lst@Key{mlstringstyle}\relax%
  {\renewcommand\stringStyle@mlpretty{#1}}
%    \end{macrocode}
% \end{lstkey}
%
% \begin{lstkey}{mlcommentstyle}
% This key determines the style of \matlab{} (to-end-of-line and block)
% comments.
%    \begin{macrocode}
\lst@Key{mlcommentstyle}\relax%
  {\renewcommand\commentStyle@mlpretty{#1}}
%    \end{macrocode}
% \end{lstkey}
%
% \begin{lstkey}{mlsectiontitlestyle}
%   This key determines the style of \matlab{} code-section titles.
%    \begin{macrocode}
\lst@Key{mlsectiontitlestyle}\relax
  {\renewcommand\sectionTitleStyle@mlpretty{#1}}
%    \end{macrocode}
% \end{lstkey}
%
% \begin{lstkey}{mlshowsectionrules}
%   This key determines whether an horizontal rule gets printed above each
%   code-section title.
%    \begin{macrocode}
\lst@Key{mlshowsectionrules}{false}[t]%
  {\lstKV@SetIf{#1}\ifShowCellrules@mlpretty@}
%    \end{macrocode}
% \end{lstkey}
%
% \begin{lstkey}{mlsectionrulethickness}
%   This key determines the relative thickness of code-section rules.
%    \begin{macrocode}
\lst@Key{mlsectionrulethickness}\relax%
  {\renewcommand\sectionRuleThicknessRatio@mlpretty{#1}}
%    \end{macrocode}
% \end{lstkey}
%
% \begin{lstkey}{mlsectionrulecolor}
%   This key determines the color of code-section rules.
%    \begin{macrocode}
\lst@Key{mlsectionrulecolor}\relax%
  {\colorlet{sectionRuleColor@mlpretty}{#1}}
%    \end{macrocode}
% \end{lstkey}
%
% \begin{lstkey}{mlsyscomstyle}
%   This key determines the style of system commands.
%    \begin{macrocode}
\lst@Key{mlsyscomstyle}\relax%
  {\renewcommand\syscomStyle@mlpretty{#1}}
%    \end{macrocode}
% \end{lstkey}
%
% \begin{lstkey}{mlsharedvars}
% \begin{lstkey}{moremlsharedvars}
% \begin{lstkey}{deletemlsharedvars}
%   For convenience, we create a brand new class of \lstpkg{} ``keywords'' for
%   allowing the user to define \matlab{} ``variables with shared scope''.
%   The following invocation of \lstpkg{}' internal macro
%   |\lst@InstallKeywords| defines three keys:
%   \rkeyname{mlsharedvars}, which can be used to define a list of \matlab{}
%   variables with shared scope;
%   \rkeyname{moremlsharedvars}, which can be used to add elements to the
%   current list of such variables;
%   and \rkeyname{deletemlsharedvars}, which can be used to remove elements
%   from that list.
%    \begin{macrocode}
\lst@InstallKeywords k{mlsharedvars}{mlsharedvarStyle@mlpretty}\relax%
  {mlsharedvarStyle@mlpretty}{}ld
%    \end{macrocode}
% \end{lstkey}
% \end{lstkey}
% \end{lstkey}
% 
% \begin{lstkey}{mlsharedvarstyle}
%   This key determines the style of \matlab{} variables with shared scope.
%    \begin{macrocode}
\lst@Key{mlsharedvarstyle}\relax%
  {\renewcommand\sharedvarStyle@mlpretty{#1}}
%    \end{macrocode}
% \end{lstkey}
%
% \begin{lstkey}{mlunquotedstringdelim}
%   This key allows the user to define custom delimiters
%   (which do not get printed in the output) for unquoted strings.
%    \begin{macrocode}
\lst@Key{mlunquotedstringdelim}\relax%
  {\lst@DelimKey\relax{[is][\stringStyle@mlpretty]{#1}}}
%    \end{macrocode}
% \end{lstkey}
%
% \begin{lstkey}{mlplaceholderstyle}
%   This key determines the style of placeholder content;
%   the color (only) of placeholder delimiters matches that of placeholder
%   content.
%     \begin{macrocode}
\lst@Key{mlplaceholderstyle}\relax%
  {\renewcommand\placeholderStyle@mlpretty{#1}}
%    \end{macrocode}
% \end{lstkey}
%
%
% \subsection{Definition of the \mllng{} language}
%
% \paragraph{Language name}
% \begin{macro}{\language@mlpretty}
%   To avoid code duplication, we define a macro that expands to the name of
%   our new language, \mllng{}.
%    \begin{macrocode}
\newcommand\language@mlpretty{Matlab-pretty}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\languageNormedDefd@mlpretty}
%   However, because \pkg{listings} ``normalises'' language names internally,
%   we will also need to define a macro that expands to the normalised name of
%   the new language.
%    \begin{macrocode}
\expandafter\lst@NormedDef\expandafter\languageNormedDefd@mlpretty%
  \expandafter{\language@mlpretty}
%    \end{macrocode}
% \end{macro}
%
% We can now define our new \pkg{listings} language, using some |\expandafter|
% trickery on |\lstdefinelanguage|.
%    \begin{macrocode}
\expandafter\expandafter\expandafter\lstdefinelanguage\expandafter%
{\language@mlpretty}
{%
%    \end{macrocode}
%
% \paragraph{Case sensitivity}
% \matlab{} is a case-sensitive language.
%    \begin{macrocode}
  sensitive = true,
%    \end{macrocode}
%
% \paragraph{Straight single quotes and backticks}
% The |upquote| key is set so that single quotes and backticks be, not curly,
% but straight, as in \matlab{}.
%    \begin{macrocode}
  upquote = true,
%    \end{macrocode}
%
% \paragraph{No visible space characters}
% By default, no visible-space characters should be printed.
%    \begin{macrocode}
  showspaces       = false,
  showstringspaces = false,
%    \end{macrocode}
%
% \paragraph{Uniform frame color}
% Because of a bug in \lstpkg{},
% frames around listings may not be of a uniform color.
% In most cases, this behaviour is undesirable, but can be avoided by passing
% some color specification to the |rulecolor| key.
%    \begin{macrocode}
  rulecolor = \color{black},
%    \end{macrocode}
%
% \paragraph{Adjust the list of characters valid in identifiers}
%    \begin{macrocode}
  alsoother={\$@}, % chars not valid in identifiers
%    \end{macrocode}
%
% \paragraph{Character-table adjustments}
% In order to keep track of the context, we need to modify the character
% table a bit.
%    \begin{macrocode}
  MoreSelectCharTable = \SelectCharTable@mlpretty,
%    \end{macrocode}
%
% \paragraph{Basic style}
% The ``basic style'' of our \matlab{} listings is defined below.
%    \begin{macrocode}
  basicstyle = \basicStyle@mlpretty,
%    \end{macrocode}
%
% TODO Occurence of different \matlab{} keywords change the syntax
% highlighting performed by \matlab{} editor in different ways.
% we define several classes of \pkg{listings} keywords
% The user may want to use the keywords key
% For precaution, we use relatively large class numbers.
%
% \paragraph{Keywords}
%
% The keywords defined below are based on the list returned by the
% \matlabver{} "iskeyword" function and the four class-definition keywords,
% which the "iskeyword" function omits.
%
% The following keywords open a block that has nothing to do with class
% definition. 
%    \begin{macrocode}
  morekeywords = [257]%
  {% 
    for,
    if,
    otherwise,
    parfor,
    spmd,
    switch,
    try,
    while,
  },
  keywordstyle = [257]\processOpRegKW@mlpretty,
%    \end{macrocode}
% Most of the following keywords can only occur within a block opened by the
% keywords listed above---"function" and "return" are exceptions, but, as far
% as I can tell, seem to have the same effects on syntax highlighting as the
% others---and are unrelated to class definition.
%    \begin{macrocode}
  morekeywords = [258]%
  {%
    break,
    case,
    catch,
    continue,
    else,
    elseif,
    function,
    return,
  }, 
  keywordstyle=[258]\processMidKW@mlpretty,
%    \end{macrocode}
% The following two keywords are ``standalone''; they don't open or close any
% block.
%    \begin{macrocode}
  morekeywords=[259]%
  {%
    global,
    persistent,
  }, 
  keywordstyle=[259]\processStdaKW@mlpretty,
%    \end{macrocode}
% The "classdef" keyword interacts with other keywords in a unique fashion;
% therefore, we dedicate a whole class of \lstpkg{} keywords to it. 
%    \begin{macrocode}
  morekeywords=[260]{classdef},  
  keywordstyle=[260]\processClassdefKW@mlpretty,
%    \end{macrocode}
% The \matlab{} "iskeyword" prints a list of some of the \matlab{} keywords,
% but it omits the four keywords that can only be used within a "classdef"
% block, namely "events", "enumeration", "methods", and "properties". We
% dedicate a class of pkg{listings} keywords those four \matlab{} keywords.
% Those identifiers only get highlighted as keywords if they occur after a classdef keyword and before an end keyword matching that classdef, if any.
%    \begin{macrocode}
  morekeywords=[261]% `middle' keywords related to classdef
  {%
    enumeration,
    events,
    methods,
    properties,
  },
  keywordstyle=[261]\processMidClassdefKW@mlpretty,
%    \end{macrocode}
%    \begin{macrocode}
  % 
  morekeywords=[262]{end},
  keywordstyle=[262]\processEndKW@mlpretty,
%    \end{macrocode}
%
% \paragraph{Strings}
%    \begin{macrocode}
  morestring=[m]',
  stringstyle=\processString@mlpretty,
%    \end{macrocode}
%
% \paragraph{Comments \& section titles}
%    \begin{macrocode}
  morecomment=[l]\%,                                       % to-end-of-line
  morecomment=[n]{\%\{\^^M}{\%\}\^^M},                     % block
  moredelim=**[il][\processDotDotDot@mlpretty]{...},       % line continuation
  moredelim=**[l][\processSectionTitle@mlpretty]{\%\%},    % code section
  moredelim=**[l][\processSectionTitle@mlpretty]{\%\%\ },  % code section
  commentstyle=\commentStyle@mlpretty,
%    \end{macrocode}
%
% \paragraph{System commands}
%    \begin{macrocode}
  moredelim=[l][\syscomStyle@mlpretty]{!},
%    \end{macrocode}
%
% \paragraph{Variables with shared scope}
%    \begin{macrocode}
  mlsharedvarStyle@mlpretty = \processSharedVar@mlpretty,
%    \end{macrocode}
%
% \paragraph{\lstpkg{} aspects}
%    \begin{macrocode}
}[
  keywords,
  strings,
  comments,
]



% --- State variables ---
% Counters and switches used as ``state variables''
% (used to keep track of context)
% although all our operations on counters will be global,
% the package currently use TeX counters rather than LaTeX ones.
\newcount\netBracketCount@mlpretty  % net running count of brackets
                                    % ([{ count for +1, )]} count for -1 
\newcount\blkLvl@mlpretty             % block nesting level
\newcount\blkLvlAtClassdef@mlpretty     % block nesting level at last classdef

\newif\ifClosingEndKW@mlpretty@            \ClosingEndKW@mlpretty@true
\newif\ifInClassdef@mlpretty@                \InClassdef@mlpretty@false
\newif\ifInStr@mlpretty@                          \InStr@mlpretty@false
\newif\ifInLineCom@mlpretty@                  \InLineCom@mlpretty@false
\newif\ifTooLateForSectionTitle@mlpretty@%
                                 \TooLateForSectionTitle@mlpretty@false
\newif\ifWithinSectionTitle@mlpretty@\WithinSectionTitle@mlpretty@false


% --- Macros for resetting counters and switches ---
\newcommand\resetBracketCount@mlpretty
  {\global\netBracketCount@mlpretty=0}

\newcommand\resetEndKW@mlpretty
{%
  \global\ClosingEndKW@mlpretty@true%
  \resetBracketCount@mlpretty%
}

\newcommand\resetClassdefKW@mlpretty
{%
  \global\InClassdef@mlpretty@false%
  \global\blkLvl@mlpretty=0%
  \global\blkLvlAtClassdef@mlpretty=0%
}


% --- internal style macros ---

% Font family, series, shape, and size (color is defined separately)
\newcommand\basicFontSpecs@mlpretty
{%
  \ttfamily%
  \lst@ifdisplaystyle%
    \normalsize%
  \fi
}
\newcommand\keywordFontSpecs@mlpretty{}
\newcommand\lastElemFontSpecs@mlpretty{}
\newcommand\stringFontSpecs@mlpretty{}
\newcommand\commentFontSpecs@mlpretty{}
\newcommand\sectionTitleFontSpecs@mlpretty
  {\commentFontSpecs@mlpretty\bfseries}
\newcommand\syscomFontSpecs@mlpretty{}
\newcommand\sharedvarFontSpecs@mlpretty{}
\newcommand\placeholderOpDelim@mlpretty{\textlangle}
\newcommand\placeholderClDelim@mlpretty{\textrangle}
\newcommand\placeholderDelimFontSpecs@mlpretty{\normalfont\upshape}
\newcommand\placeholderContentFontSpecs@mlpretty{\normalfont\itshape}

% Matlab syntax highlighting colors
\colorlet{textColor@mlpretty}{black}
\colorlet{lastElemColor@mlpretty}{textColor@mlpretty}
\definecolor{keywordColor@mlpretty}     {RGB}{000,000,255}
\definecolor{stringColor@mlpretty}      {RGB}{160,032,240}
\definecolor{commentColor@mlpretty}     {RGB}{034,139,034}
\definecolor{sectionTitleColor@mlpretty}{RGB}{034,139,034}
\colorlet{sectionRuleColor@mlpretty}{black!15}
\definecolor{syscomColor@mlpretty}      {RGB}{178,140,000}
\definecolor{sharedvarColor@mlpretty}   {RGB}{000,163,163}
\definecolor{placeholderColor@mlpretty} {RGB}{209,000,86}

% More Matlab colors (currently not used by matlab-prettifier)
\colorlet{bgColor@mlpretty}{white}
\definecolor{untermStringColor@mlpretty}{RGB}{178,000,000}
\definecolor{syntaxErrorColor@mlpretty} {RGB}{255,000,000}

% Additional custom colors
\colorlet{numbersColor@matlabpretty}{gray}

\newcommand\basicStyle@mlpretty
{%
  \basicFontSpecs@mlpretty%
  \color{textColor@mlpretty}%
}

\newcommand\lastElemStyle@mlpretty
{%
  \lastElemFontSpecs@mlpretty%
  \color{lastElemColor@mlpretty}%
}

\newcommand\keywordStyle@mlpretty
{%
  \keywordFontSpecs@mlpretty%
  \color{keywordColor@mlpretty}%
}

\newcommand\stringStyle@mlpretty
{%
  \global\InStr@mlpretty@true%
  \stringFontSpecs@mlpretty%
  \color{stringColor@mlpretty}%
}

\newcommand\commentStyle@mlpretty
{%
  \commentFontSpecs@mlpretty%
  \color{commentColor@mlpretty}%
}

\newcommand\sectionTitleStyle@mlpretty
{%
  \sectionTitleFontSpecs@mlpretty%
  \color{sectionTitleColor@mlpretty}%
}

\newcommand\syscomStyle@mlpretty
{%
  \syscomFontSpecs@mlpretty%
  \color{syscomColor@mlpretty}%
}

\newcommand\sharedvarStyle@mlpretty
{%
  \sharedvarFontSpecs@mlpretty%
  \color{sharedvarColor@mlpretty}%
}

\newcommand\placeholderStyle@mlpretty
{%
  \placeholderContentFontSpecs@mlpretty%
  \color{placeholderColor@mlpretty}%
}



% Macro for SelectCharTable key
\newcommand\SelectCharTable@mlpretty
{%
  \processOpenBracket@mlpretty{40}{\roundBktOp@mlpretty}%
  \processOpenBracket@mlpretty{91}{\squareBktOp@mlpretty}%
  \processOpenBracket@mlpretty{123}{\curlyBktOp@mlpretty}%
  \processCloseBracket@mlpretty{41}{\roundBktCl@mlpretty}%
  \processCloseBracket@mlpretty{93}{\squareBktCl@mlpretty}%
  \processCloseBracket@mlpretty{125}{\curlyBktCl@mlpretty}%
}


% --- macros for processing opening and closing brackets ---
\newcommand\processOpenBracket@mlpretty[2]
{%
  \lst@DefSaveDef{#1}#2%
  {%
    #2%
    \ifnum\lst@mode=\lst@Pmode\relax% if we're not inside a string or comment
      \global\ClosingEndKW@mlpretty@false%
      \global\advance\netBracketCount@mlpretty by \@ne%
    \fi
  }%  
}

\newcommand\processCloseBracket@mlpretty[2]
{%
  \lst@DefSaveDef{#1}#2%
  {%
    #2%
    \ifnum\lst@mode=\lst@Pmode\relax% if we're not inside a string or comment
      \ifClosingEndKW@mlpretty@%    % If end is already a blue keyword... 
        \resetBracketCount@mlpretty % ... we can safely reset the count.
      \else
        \global\advance\netBracketCount@mlpretty by \m@ne%
        \ifnum\netBracketCount@mlpretty>0%
        \else
          \global\ClosingEndKW@mlpretty@true%
        \fi
      \fi
    \fi
  }%  
}

% --- macros for processing keywords ---
\newcommand\processOpRegKW@mlpretty
{%
  \ifWithinSectionTitle@mlpretty@%
  \else
    \resetEndKW@mlpretty%
    \global\advance\blkLvl@mlpretty\@ne%
    \keywordStyle@mlpretty%
  \fi
}

\newcommand\processMidKW@mlpretty
{%
  \ifWithinSectionTitle@mlpretty@%
  \else
    \resetEndKW@mlpretty%
    \keywordStyle@mlpretty%
  \fi
}

% No difference between standalone keywords and middle keywords
\newcommand\processStdaKW@mlpretty\processMidKW@mlpretty

\newcommand\processClassdefKW@mlpretty
{%
  \ifWithinSectionTitle@mlpretty@%
    \keywordStyle@mlpretty%
  \else
    \resetEndKW@mlpretty%
    \global\InClassdef@mlpretty@true%
    \global\blkLvlAtClassdef@mlpretty=\blkLvl@mlpretty%
    \global\advance\blkLvl@mlpretty\@ne%
    \keywordStyle@mlpretty%
  \fi
}

\newcommand\processMidClassdefKW@mlpretty
{%
  %only for typesetting those as keywords in inline code
  \ifOverridecontext@mlpretty@% 
  \else
    \ifWithinSectionTitle@mlpretty@%
    \else
      \ifInClassdef@mlpretty@%
        \resetEndKW@mlpretty%
        \global\advance\blkLvl@mlpretty\@ne%
        \keywordStyle@mlpretty%
      \fi
    \fi
  \fi
}

\newcommand\processEndKW@mlpretty
{%
  % only for typesetting those as ``last element'' in inline code
  \ifOverridecontext@mlpretty@% 
    \lastElemStyle@mlpretty%
  \else
    \ifWithinSectionTitle@mlpretty@%
    \else
      \ifClosingEndKW@mlpretty@%
        \ifInLineCom@mlpretty@%
        \else
          \ifnum\blkLvl@mlpretty>0%
            \global\advance\blkLvl@mlpretty\m@ne%
          \fi
          \ifnum\blkLvl@mlpretty=\blkLvlAtClassdef@mlpretty%
            \global\InClassdef@mlpretty@false%
          \fi
          \keywordStyle@mlpretty%
        \fi
      \else
        \lastElemStyle@mlpretty%
      \fi
    \fi
  \fi
}


% --- strings ---
\newcommand\processString@mlpretty
{%
  \ifWithinSectionTitle@mlpretty@%
  \else
    \stringStyle@mlpretty%  
  \fi
}

% --- macro for handling line continuation ---
\newcommand\processDotDotDot@mlpretty
{%
  \lst@CalcLostSpaceAndOutput%
  \ifWithinSectionTitle@mlpretty@%
    ...%
  \else
    \ifInLineCom@mlpretty@%
      ...%
    \else
      \global\InLineCom@mlpretty@true%
      {\keywordStyle@mlpretty...}%
    \fi
    \commentStyle@mlpretty%
  \fi
}

% --- macro for processing section title ---
\newlength\emHeight@mlpretty
\newlength\jayDepth@mlpretty
\newlength\sectionRuleOffset@mlpretty
\newlength\sectionRuleThickness@mlpretty
\newcommand\sectionRuleThicknessRatio@mlpretty{.05}

\newcommand\processSectionTitle@mlpretty
{%
  \ifWithinSectionTitle@mlpretty@% to avoid drawing the rule multiple times
  \else
    \global\WithinSectionTitle@mlpretty@true%
    \resetEndKW@mlpretty%
    \commentStyle@mlpretty%
    \ifTooLateForSectionTitle@mlpretty@%
    \else
      \bgroup%
        % calculate the vertical offset for the rule
        \setlength\emHeight@mlpretty{\fontcharht\font`M}%
        \setlength\jayDepth@mlpretty{\fontchardp\font`j}%
        \setlength\sectionRuleOffset@mlpretty%
        {%
          \dimexpr.5\emHeight@mlpretty%
                 +.5\baselineskip%
                 -.5\jayDepth@mlpretty\relax%
        }%
        \setlength\sectionRuleThickness@mlpretty%
        {%
          \sectionRuleThicknessRatio@mlpretty\baselineskip%
        }%
        \color{sectionRuleColor@mlpretty}%
        \ifShowCellrules@mlpretty@%
          \makebox[0em][l]%
          {%
            \raisebox{\sectionRuleOffset@mlpretty}[0pt][0pt]%
              {\rule{\lst@linewidth}{\sectionRuleThickness@mlpretty}}%
          }%
        \fi
      \egroup%
      \sectionTitleStyle@mlpretty%
    \fi
  \fi
}

\newcommand\processSharedVar@mlpretty
{%
  \ifWithinSectionTitle@mlpretty@%
  \else
      \sharedvarStyle@mlpretty%
  \fi
}
%    \end{macrocode}

%
% \subsection{Hooking into listings}
% \label{hooks-mlpretty}

%    \begin{macrocode}

% --- InitVarsEOL hook ---
\newcommand\addedToInitVarsEOL@mlpretty{} % polymorphic macro for InitVarsEOL
\newcommand\@ddedToInitVarsEOL@mlpretty
{%
  % at the start of a line, we're not inside a one-line comment
  \global\InLineCom@mlpretty@false%
  % This avoids continuation of unterminated string literals on next line.
  \ifInStr@mlpretty@%
    \global\InStr@mlpretty@false%
    \lst@LeaveMode%
  \fi
  % we're not in a section title...
  \global\WithinSectionTitle@mlpretty@false%
  % ...but a section title is allowed to start here
  \global\TooLateForSectionTitle@mlpretty@false%
}
\lst@AddToHook{InitVarsEOL}{\addedToInitVarsEOL@mlpretty}

% --- EndGroup hook ---
\newcommand\addedToEndGroup@mlpretty{} % polymorphic macro for EndGroup
\newcommand\@ddedToEndGroup@mlpretty
{%
  % if we were inside a string, we're now getting out of it
  \ifInStr@mlpretty@%
    \global\InStr@mlpretty@false%
  \fi
}
\lst@AddToHook{EndGroup}{\addedToEndGroup@mlpretty}

% --- PostOutput hook ---
\newcommand\addedToPostOutput@mlpretty{} % polymorphic macro for PostOuput
\newcommand\@ddedToPostOutput@mlpretty
{%
  % At the first PostOutput, it's too late for a section title to start.
  \global\TooLateForSectionTitle@mlpretty@true%
}
\lst@AddToHook{PostOutput}{\addedToPostOutput@mlpretty}

% --- PreInit Hook ---
% Now we apply all those patches at the PreInit hook,
% under the condition that \lst@language and \languageNormedDefd@mlpretty
% expand (once) to the same replacement text.
\newcommand\addedToPreInitHook
{%
  \ifx\lst@language\languageNormedDefd@mlpretty%
    \renewcommand\addedToInitVarsEOL@mlpretty\@ddedToInitVarsEOL@mlpretty%
    \renewcommand\addedToEndGroup@mlpretty\@ddedToEndGroup@mlpretty%
    \renewcommand\addedToPostOutput@mlpretty\@ddedToPostOutput@mlpretty%
  \fi
}
\lst@AddToHook{PreInit}{\addedToPreInitHook}

% --- DeInit hook ---
% We reset counters apply at the DeInit hook,
% under the condition that \lst@language and \languageNormedDefd@mlpretty
% expand (once) to the same replacement text.
\newcommand\addedToDeInitHook
{%
  \ifx\lst@language\languageNormedDefd@mlpretty%
    \resetEndKW@mlpretty%
    \resetClassdefKW@mlpretty%
  \fi
}
\lst@AddToHook{DeInit}{\addedToDeInitHook}
%    \end{macrocode}
%
%
% \subsection{Placeholders in code snippets}
%
% \begin{macro}{\itcorr@mlpretty}
% This macro is used for inserting italic correction in case the font shape is
% italic or slanted.
%    \begin{macrocode}
\newcommand\itcorr@mlpretty
{%
  % After checking that \long@f@shape@mlpretty is definable, we
  % define it as a long macro that expands to the current font shape.
  \newcommand\long@f@shape@mlpretty{}%
  \long\edef\long@f@shape@mlpretty{\f@shape}%
  \ifx\long@f@shape@mlpretty\itdefault%
    \/%
  \else
    \ifx\long@f@shape@mlpretty\sldefault%
      \/%
    \fi
  \fi
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\snippetPlaceholder}
% This user macro can be used to typeset placeholders in code snippets.
%    \begin{macrocode}
\newcommand\snippetPlaceholder[1]
{%
  \bgroup%
    \placeholderStyle@mlpretty%
    \bgroup%
      \placeholderDelimFontSpecs@mlpretty%
      \placeholderOpDelim@mlpretty%
    \egroup%
    #1\itcorr@mlpretty%
    \bgroup%
      \placeholderDelimFontSpecs@mlpretty%
      \placeholderClDelim@mlpretty%
    \egroup%
  \egroup%
}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Predefined \texorpdfstring{\mlpkg{}}{matlab-prettifier} styles}
%
% \paragraph{Standard style}
% \begin{macro}{Matlab-stdstyle}
%    \begin{macrocode}
\lstdefinestyle{Matlab-stdstyle}
{
  language   = \languageNormedDefd@mlpretty,
  frame      = single,
  numbers    = left,
  breaklines = true,
}
%    \end{macrocode}
% \end{macro}
%
% \paragraph{Black \& white style}
% \begin{macro}{Matlab-bwstyle}
%    \begin{macrocode}
\lstdefinestyle{Matlab-bwstyle}
{
  language            = \languageNormedDefd@mlpretty,
  mlkeywordstyle      = \color[gray]{0}  \bfseries          ,
  mlcommentstyle      = \color[gray]{.75}           \itshape,
  mlstringstyle       = \color[gray]{.5}                    ,
  mlsyscomstyle       = \color[gray]{.25}                   ,
  mlsectiontitlestyle = \color[gray]{.75}\bfseries  \itshape,
  mlsharedvarstyle    = \color[gray]{0}                     ,
  mlplaceholderstyle  = \color[gray]{0}  \normalfont\itshape,
  frame               = single,
  numbers             = left,
  breaklines          = true,
}
%    \end{macrocode}
% \end{macro}
%
% \paragraph{Pygments-like style}
% The \pkg{minted}, \pkg{verbments}, and \pkg{pythontex} packages all use
% \href{http://pygments.org}{Pygments} lexers for syntax highlighting of
% listings. This last \mlpkg{} style closely mimics that of the Pygments
% lexer for \matlab{} called `MatlabLexer'.
%
% \begin{macro}{Matlab-pygstyle}
%    \begin{macrocode}
\lstdefinestyle{Matlab-pygstyle}
{
  language            = \languageNormedDefd@mlpretty,
  mllastelementstyle  = \color[RGB]{127,000,000}                   ,
  mlkeywordstyle      = \color[RGB]{000,127,000}\bfseries          ,
  mlcommentstyle      = \color[RGB]{063,127,127}           \itshape,
  mlstringstyle       = \color[RGB]{186,034,034}                   ,
  mlsyscomstyle       = \color[RGB]{000,127,000}                   ,
  mlsectiontitlestyle = \color[RGB]{063,127,127}           \itshape,
  mlsharedvarstyle    = \color[RGB]{034,034,186}                   ,
  mlplaceholderstyle  = \color[RGB]{127,063,127}\normalfont\itshape,
  frame               = single,
  numbers             = left,
  breaklines          = true,
}
%    \end{macrocode}
% \end{macro}
%
% \Finale
\endinput
