% \iffalse meta-comment
%
% Copyright (C) 2014 by Julien Cretel
%                       <jubobs.matlab.prettifier at gmail.com>
%
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3
% of this license or (at your option) any later version.
% The latest version of this license is in
%
%     http://www.latex-project.org/lppl.txt
%
% and version 1.3 or later is part of all distributions of LaTeX
% version 2005/12/01 or later.
%
% \fi
%
% \iffalse
%<package>\NeedsTeXFormat{LaTeX2e}[2011/06/27]
%<package>\ProvidesPackage{matlab-prettifier}
%<package>  [2014/02/21 v0.1 A package for prettyprinting Matlab source code]
%
%<*driver>
\documentclass{ltxdoc}

\usepackage[T1]{fontenc}
\usepackage{lmodern}
\usepackage{filecontents}
\usepackage{lstdoc}
\usepackage{matlab-prettifier}
\usepackage{hyperref}
\usepackage{cleveref}

\begin{filecontents*}{placeholder.m}
while `\ph{condition}`
  if `\ph{something-bad-happens}`
    break
  else
    % do something useful
  end
end
\end{filecontents*}

\lstMakeShortInline[language=Matlab-pretty,mloverride]"
\let\ph\snippetPlaceholder
\newcommand*{\pkg}[1]{\textsf{#1}}
\newcommand*{\opt}[1]{\texttt{#1}}
\newcommand*{\lststy}[1]{\texttt{#1}}
\newcommand\matlab{\textsc{Matlab}}
\newcommand\matlabver{\matlab~(R2013a)}
\newcommand\mathworks{MathWorks}
\newcommand*\trademark[1]{#1\textsuperscript{\textregistered}}
\newcommand\mlpkg{\pkg{matlab-prettifier}}
\newcommand\lstpkg{\pkg{listings}}
\newcommand\mllng{\texttt{Matlab-pretty}}

\EnableCrossrefs
\CodelineIndex
\RecordChanges

\begin{document}
  \DocInput{matlab-prettifier.dtx}
\end{document}
%</driver>
% \fi
%
% \CheckSum{583}
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
% \changes{v0.1}{2014/02/21}{Initial release.}
%
% \GetFileInfo{matlab-prettifier.sty}
%
% \DoNotIndex{\fi}
%
% \title^^A
% {^^A
%   The \textsf{matlab-prettifier} package^^A
%   \thanks^^A
%   {^^A
%     This document corresponds to \textsf{matlab-prettifier}~\fileversion,
%     dated~\filedate.^^A
%   }^^A
%  }
% \author{Julien Cretel\\ \texttt{jubobs.matlab.prettifier at gmail.com}}
% \date{\filedate}
% \thispagestyle{empty}
% \maketitle
%
% \begin{abstract}
%   The \mlpkg{} package allows you to effortlessly prettyprint
%   Matlab source code in documents typeset with \LaTeX{} \& friends. Built
%   on top of the \lstpkg{} package, \mlpkg{} defines a language called
%   \mllng{}, which can be invoked by \lstpkg{} macros and
%   environments and can be used in conjunction with (most) parameters
%   provided by the \lstpkg{} package. Fine-tuning of the output is possible
%   via a key-value interface extending that of \lstpkg{}. The \mlpkg{}
%   package also conveniently provides three predefined styles, for fast
%   deployment.
% \end{abstract}
%
% \tableofcontents\newpage
%
% \section{Introduction}
%
% \subsection{Why this package?}
%
% \trademark{\matlab} is a high-level language and interactive environment for
% numerical computation, visualization, and programming.^^A
%   \footnote{Source: \url{http://www.mathworks.co.uk/products/matlab/}}
% Despite being proprietary and occasionally frustrating, \matlab{} remains a
% great tool for prototyping matrix-oriented, number-crunching programs.
% As such, it enjoys widespread popularity, especially in academia,
% where, in particular, it is often used for teaching numerical methods.
%
% Users of both \matlab{} and \LaTeX{} (and friends) often want to typeset
% \matlab{} listings in \LaTeX{} documents, usually with some syntax
% highlighting, for improved code readability;
% the relatively large number of relevant questions posted on
% \href{http://tex.stackexchange.com/search?q=matlab+code+is%3Aquestion}^^A
% {tex.stackexchange.com} attests to that need.
%
% Recent version of \matlab{} provide a built-in function, called "publish",
%  that can generate \LaTeX{} code for typesetting \matlab{} listings, but
% that function uses a |verbatim| environment, which doesn't allow for any
% fancy formatting.
% Several \LaTeX{} packages^^A
% ---vanilla \lstpkg{}, \pkg{mcode}, and \pkg{minted}, among others---^^A
% allow for automatic syntax highlighting of \matlab{} listings in \LaTeX{}
% documents.
% However, none of those packages do a great job at replicating the very
% specific syntax-highlighting style performed on the fly by the \matlab{}
% editor.^^A
%   \footnote{see ... for a comparison.}
%  
% The lack of tools for faithfully mimicking the style of the \matlab{}
% editor is unfortunate, especially from an educational standpoint, for the
% following reason.
% Most newcomers to \matlab{} read and write code in the \matlab{} editor
% and are therefore continually exposed to the its highlighting style.
% According to the theory of associative learning, visual cues^^A
% ---such as those provided by syntax highlighting---^^A
% play an important role for recognising patterns.
% Therefore, students of a programming language are more likely to quickly
% and effectively learn and recognise its syntax if they see it highlighted
% in a consistent manner, whether it be in a text editor or in some course
% material (handout, assignment paper, etc.).
%
% The \mlpkg{} package is intended to fill that gap.
% Built on top of the feature-rich \lstpkg{} package, \mlpkg{} allows you to
%  beautifully and effortlessly typeset \matlab{} listings, as it configures
% \lstpkg{} ``behind the scenes'' to replicate, as closely as possible, the
% syntax-highlighting style of the \matlab{} editor.
% Furthermore, \mlpkg{} comes with a few additional features that should make
% your life easier. Read on!
%
% \subsection{Features}
% 
% The \mlpkg{} package defines a \pkg{listings} language called \mllng{},
% which can be invoked in the user-level macros and environments provided by
% the \lstpkg{} package. \mllng{} automatically highlights
% ^^A
% \begin{itemize}
%   \item context-insensitive keywords ("for", "while", "break", etc.),
%   \item context-sensitive keywords ("end", "properties", "events", etc.),
%   \item (quoted) strings,
%   \item one-line and block comments,
%   \item line-continuation token (i.e.~"...") and associated one-line comment,
%   \item code-section titles.
% \end{itemize}
% ^^A
% Additional features include
% ^^A
% \begin{itemize}
%   \item a key-value interface extending that of the \lstpkg{} package,
%   \item automatic scaling of inline code according to its surroundings,
%   \item manual highlighting of variables with shared scope,
%   \item a macro for easily typesetting placeholders in code snippets,
%   \item three predefined styles.
% \end{itemize}
% ^^A
%
% \subsection{Comparison with other packages}
%
% TODO; use a matrix with features of each; speed benchmark
% 
% \section{Installation}
%
% \subsection{Package dependencies}
%
% \mlpkg{} requires relatively up-to-date versions of packages \pkg{textcomp},
% \pkg{xcolor}, and \lstpkg{}, all three of which ship with popular \TeX{}
% distributions. It loads those three packages without any options.
%
% \subsection{Installing \texorpdfstring{\mlpkg{}}{matlab-prettifier}}
%
% TODO
% To install \mlpkg{} manually, run
% ^^A
% \begin{verbatim}
%   latex matlab-prettifier.ins\end{verbatim}
% ^^A
% and copy \mlpkg{}.sty to a path where \LaTeX{} can find it.
% To generate the documentation, run
% ^^A
% \begin{verbatim}
%   pdflatex matlab-prettifier.dtx
%   makeindex -s gglo.ist -o matlab-prettifier.gls matlab-prettifier.glo
%   makeindex -s gind.ist -o matlab-prettifier.ind matlab-prettifier.idx
%   pdflatex matlab-prettifier.dtx
%   pdflatex matlab-prettifier.dtx\end{verbatim}
% ^^A
%
% \section{User's guide}
%
% As stated above, the \mlpkg{} package is built on top of the \lstpkg{}
% package.
% If you already are a seasoned \lstpkg{} user, you should feel right at home.
% If you're not, be aware that this user's guide makes use of some \lstpkg{}
% functionalities (such as key-value options) without describing their usage.
% For more details on those functionalities, you should consult the \lstpkg{}
% documentation.
%
% \subsection{Loading \texorpdfstring{\mlpkg{}}{matlab-prettifier}}
%
% Simply write
% ^^A
% \begin{verbatim}
%   \usepackage{matlab-prettifier}\end{verbatim}
% ^^A
% somewhere in your preamble. You may want to load the \lstpkg{} and
% \pkg{xcolor} packages with some options; in that case, make sure those
% options are passed to those two packages \emph{before} loading the \mlpkg{}
% package.
%
% The \mlpkg{} package currently offers no package options.
%
% \subsection{Displayed code}
%
% To typeset a \matlab{} listing embedded in your |tex| file, simply enclose
% it in an |lstlisting| environment, and specify |language=|\mllng{} in the
% environment's optional argument.
% ^^A
% \begin{verbatim}
%   \begin{lstlisting}[language=Matlab-pretty]
%     ...
%   \end{lstlisting}\end{verbatim}
% ^^A
%
% \subsection{Standalone listings}
%
% In practice, though, you probably want, for maintainability reasons,
% to keep, whenever possible, your \matlab{} listings in external files^^A
% ---rather than embedding them in your |tex|~file.
% To typeset a \matlab{} listing residing in an m-file, simply invoke the
% |\lstinputlisting| macro; specify |language=|\mllng{} in the macro's
% optional argument, and pass the file's path to the mandatory argument.
% ^^A
% \begin{verbatim}
%   \lstinputlisting[language=Matlab-pretty]{sample.m}\end{verbatim}
% ^^A
%
% \subsection{Inline listings}
%
% However, writing |\lstinline[language=Matlab-pretty]| for each instance of inline Matlab code in your document can rapidly become tedious. You could of course define a shorthand macro for that, but listings provides a way of defining … shorthand for ...
% recommended shortinlinechar: |"| doesn’t occur in LaTeX code any way
% you can use the same character for escapechar and for makeshortinline.
%
% \subsection{Placeholders}
%
% The \mlpkg{} package defines a macro, called |\snippetPlaceholder|, for
% typesetting code-snippet placeholders. For instance, to typeset
% \ph{initial-value}, you would write
% ^^A
% \begin{verbatim}
%   \snippetPlaceholder{initial-value}\end{verbatim}
% ^^A
% This macro proves particularly useful for educational purposes, e.g.\ for
% describing the syntax of control-flow constructs, such as the \matlab{}
% "while"~loop (see \cref{plhold}).
% ^^A
%	\lstinputlisting[style      = Matlab-stdstyle,escapechar = `,caption    = {Placeholders},label      = plhold]{placeholder.m}
% ^^A
% To use |\snippetPlaceholder| inside listings, you must invoke it within an
% \emph{escape to \LaTeX{}}; see section~4.14 of the \lstpkg{} manual.
% If you choose to define a single character for escaping to \LaTeX{} (by
% using the |escapechar|~key), I recommend you define either the double
% quote~(|"|) or the left quote~(|`|) as escape character, because the latter
% are not allowed in \matlab{} statements and expressions^^A
% ---although they may occur in \matlab{} string literals.
% To be safe, though, you may prefer to use the more general
% |escapeinside|~key.
%
% \subsection{More advanced tweaks}
%
% \begin{itemize}
%   \item uses listings keys in the background; 
%   \item if you mix listings key and matlab-prettifier, unpredictable behaviour; like crossing the streams
%   \item use the ml version, if any exists
%   \item The number of nonlocal var you use must be small… otherwise, there’s probably a problem with your code :)
% \end{itemize}
%
% \subsection{Tips and tricks}
%
% Opinionated.
% Arguably, ``|\snippetPlaceholder|'' is a mouthful, but nothing prevents you from defining a shorthand for it. For instance:
% ^^A
% \begin{verbatim}
%   \newcommand\ph\snippetPlaceholder\end{verbatim}
% ^^A
% Of course, you can also define macros for oft-used placeholders, e.g.
% \ph{condition}.
% ^^A
% \begin{verbatim}
%   \newcommand\phcond{\snippetPlaceholder{condition}}\end{verbatim}
% ^^A
% \begin{itemize}
%  \item strongly discouraged (when code wraps in LaTeX, linebreaks are copied as well, and break syntax), too difficult, behaviour varies from one viewer to another
%  \item in beamer: use fragile
%  \item if you use a computer modern, load lmodern and [T1]fontenc (recommended)
%  \item[Extended characters] are not allowed in listings. use listingsutf8
%  \item[Language based on \mllng{}] Defining a language based on \mllng{} is possible but is likely to
%     break everything, because \mlpkg{} needs to initialize some things at
%     the beginning of each listing, and this only happens if the name of the
%     language used be \mllng{}.
%     See \cref{hooks-mlpretty} for more details. you define a new language based on Matlab-pretty, won’t get correct syntax highlighting, because the matlab-prettifier package applies patches at the beginning of listings depending on whether the current language is that defined by the package
%  \item inline won't work in footnote, because verbatim content is not normally allowed in footnotes. One way to is allow for this is to load the bigfoot package. inline in footnotes is discouraged because might occur after a listing pagebreak and might be confusing
%   \item depending on the font you're using, you may have problems with the tilde character (too high); \href{http://tex.stackexchange.com/questions/312/correctly-typesetting-a-tilde}{workaround}
%   \item 
%   \item bold typewriter
%   \item Automatic linewrapping: possible via breaklines, but discouraged because might mislead students of the Matlab language; can also produce invalid matlab syntax (for instance, there can be no linebreak between if and the logical condition)
%   \item preset literate replacements: the lack of preset literate replacements (e.g.\ for typesetting~\(\leq\) in place of~"<=") is a conscious decision.   mcode provides predefined literate replacements, but matlab-prettifier doesn’t. you can still use the literate key, but I discourage it. matlab simply doesn’t typeset it that way; source code, not pseudocode; no point in making it easy to read if you’re going to red it as is in Matlab; source of confusion to the newcomer, looking to reproduce that symbol in Matlab
%   \item Copy \& paste
% \end{itemize}
%
% \section{To-do list}
%
% \begin{itemize}
%   \item More closely mimick the style applied to digits by Pygments' MatlabLexer.
%   \item unquoted strings
% \end{itemize}
% not perfect,
% reverse engineer \matlab{} lexer for correct highlighting of unquoted strings
%
% \section{Known issues and missing features}
%
% Although \mlpkg{} does a reasonably good job at replicating the syntax highlighting performed by the \matlab{} editor, some problems remain. Here is a list of known, currently unresolved problems. TODO show where it fails
% 
% \begin{description}
%   \item[non-local variables] Nonlocal variables (global, persistent, or variables that are used in at least two functions that share scope) (\href{http://blogs.mathworks.com/community/2011/04/25/highlighting-global-and-persistent-variables/}{ref}) Automatic highlighting would require multiple passes, which the listings package cannot do.
%   \item[Unterminated strings] I haven't found a way that doesn't break the way quoted strings are handled.
%   \item[Block comments]
%   \item Illegal syntax not highlighted properly in all cases "if=end"
%   \item Invalid characters (red)
% \end{description}%
%
% \section{Bug reports and feature suggestions}
%
% \StopEventually{\clearpage\PrintChanges\PrintIndex}
%
% \section{Implementation}
%
% \subsection{Preliminary checks}
%
% Because the \lstpkg{} options \opt{noaspects}, \opt{0.21}, and \opt{savemem}
% are incompatible with \pkg{matlab-prettifier}, checking whether the
% \lstpkg{} package has been loaded with any of those options is a good idea;
% if so, we should issue an error.
% \begin{macro}{\lstoptcheck@mlpretty}
%   This macro checks whether \lstpkg{} was loaded with a given option
%   and, if so, throws an error.
%    \begin{macrocode}
\newcommand\lstoptcheck@mlpretty[1]
{%
  \@ifpackagewith{listings}{#1}%
  {
    \PackageError{matlab-prettifier}%
      {incompatible listings' option #1}%
      {%
        Make sure the `listings' package
        doesn't get loaded with option `#1'%
      }
  }
  {}
}
%    \end{macrocode}
% \end{macro}
% Using that macro, we make sure that none of the problematic \lstpkg{}
% options has been specified during an earlier loading of the \lstpkg{}
% package.
%    \begin{macrocode}
\lstoptcheck@mlpretty{noaspects}
\lstoptcheck@mlpretty{0.21}
\lstoptcheck@mlpretty{savemem}
%    \end{macrocode}
%
% \subsection{Package options}
%
% \mlpkg{} currently offers no package option; therefore, if the user
% mistakenly specifies any option for the package, we discard that option
% and issue a warning.
%    \begin{macrocode}
\DeclareOption*%
{%
  \OptionNotUsed
  \PackageWarning{matlab-prettifier}{Unknown `\CurrentOption' option}
}
\ProcessOptions\relax
%    \end{macrocode}
%
% \subsection{Required packages}
% 
% We require three packages without any package option.
% We need \pkg{textcomp} in order to use the \lstpkg{}' |upquote|~key;
% we need the \pkg{xcolor} package in order to color our \matlab{} code;
% and, of course, we need the \lstpkg{} package.
%    \begin{macrocode}
\RequirePackage{textcomp}[2005/09/27]
\RequirePackage{xcolor}[2007/01/21]
\RequirePackage{listings}[2013/08/26]
%    \end{macrocode}
%
% \subsection{Key-value interface}
%
% TODO: \mlpkg{} does a lot behind the scenes; using the listings key wouldn't do. several classes of keyword for conveninence, but the user really wants to affect the style of all those keyword in one go.
% We extend \lstpkg{}' key-value interface by defining several additional
% keys, which we will use for defining a new \lstpkg{} language and three
% \lstpkg{} styles, further down. Most of those new keys start by the
% prefix~|ml|, so that the user easily distinguish them from \emph{bona fide}
% \lstpkg{} keys.
%
% \begin{macro}{mlkeywordstyle}
%   In the upcoming language definition, we use several classes of \lstpkg{}
% keywords to handle the different \matlab{} keywords. However, we need one
% style key to ``rule them all''.
%    \begin{macrocode}
\lst@Key{mlkeywordstyle}\relax%
  {\renewcommand\keywordStyle@mlpretty{#1}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{mllastelementstyle}
% The "end" keyword has different meanings depending on the context in which
% it occurs: it may be used to close a code block (e.g.\ a "while" loop), or
% it may stand for the last element of an array. In the first case, it's
% highlighted in the same style as the other \matlab{} keywords, like so:
% "end". In the other case, it's highlighted like ``normal text'', like so:
% \lstinline[language=Matlab-pretty,mloverride]|end|. The
% |mllastelementstyle| key controls the look of the keyword when it
% means ``last element''.
%    \begin{macrocode}
\lst@Key{mllastelementstyle}\relax%
  {\renewcommand\lastElemStyle@mlpretty{#1}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{mloverride}
% By default, in inline code, \mlpkg{} typesets the "end" keyword as closing
% keyword (\emph{not} as ``last element''), and typesets the four
% class-definition identifiers, "events", "enumeration", "methods", and
% "properties", as \matlab{} functions (\emph{not} as keywords). However,
% the user may want to print 
% \lstinline[language=Matlab-pretty,mloverride]|end|,
% \lstinline[language=Matlab-pretty,mloverride]|events|, 
% \lstinline[language=Matlab-pretty,mloverride]|enumeration|, 
% \lstinline[language=Matlab-pretty,mloverride]|methods|, and
% \lstinline[language=Matlab-pretty,mloverride]|properties|.
% Overriding the default behaviour is made possible by the
% |mloverride| key.
%    \begin{macrocode}
\lst@Key{mloverride}{false}[t]%
  {\lstKV@SetIf{#1}\ifOverridecontext@mlpretty@}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{mlstringstyle}
% This key controls the style of \matlab{} strings. TODO
%    \begin{macrocode}
\lst@Key{mlstringstyle}\relax%
  {\renewcommand\stringStyle@mlpretty{#1}}
%    \end{macrocode}
% \end{macro}
%    \begin{macrocode}
\lst@Key{mlcommentstyle}\relax%
  {\renewcommand\commentStyle@mlpretty{#1}}
\lst@Key{mlsectionrulethickness}\relax%
  {\renewcommand\sectionRuleThicknessRatio@mlpretty{#1}}
\lst@Key{mlsectionrulecolor}\relax%
  {\colorlet{sectionRuleColor@mlpretty}{#1}}
\lst@Key{mlshowsectionrules}{false}[t]%
  {\lstKV@SetIf{#1}\ifShowCellrules@mlpretty@}
\lst@Key{mlsectiontitlestyle}\relax
  {\renewcommand\sectionTitleStyle@mlpretty{#1}}

\lst@Key{mlsyscomstyle}\relax%
  {\renewcommand\syscomStyle@mlpretty{#1}}
%    \end{macrocode}
%  \begin{macro}{mlsharedvars}
%  \begin{macro}{moremlsharedvars}
%  \begin{macro}{deletemlsharedvars}
% For convenience, we create a brand new class of \lstpkg{} ``keywords'' for
% allowing the user to define \matlab{} variables with shared scope. The
% following invocation of \lstpkg{}' internal macro |\lst@InstallKeywords|
% defines, not only a |mlsharedvars| key, but also a
% |moremlsharedvars| key and a |deletemlsharedvars| key.
%    \begin{macrocode}
\lst@InstallKeywords k{mlsharedvars}{mlsharedvarStyle@mlpretty}\relax%
  {mlsharedvarStyle@mlpretty}{}ld
%    \end{macrocode}
%  \end{macro}
%  \end{macro}
%  \end{macro}
% 
% The style of those variables with shared scope is controlled via the
% |mlsharedvarstyle| key.
%    \begin{macrocode}
\lst@Key{mlsharedvarstyle}\relax%
  {\renewcommand\sharedvarStyle@mlpretty{#1}}
%    \end{macrocode}
%    \begin{macrocode}
\lst@Key{mlunquotedstringdelim}\relax%
  {\lst@DelimKey\relax{[is][\stringStyle@mlpretty]{#1}}}
\lst@Key{mlplaceholderstyle}\relax%
 {\renewcommand\placeholderStyle@mlpretty{#1}}
%    \end{macrocode}
%
% \subsection{Language definition}
%
% \subsubsection{Language name}
%
% To avoid code duplication, we define a macro that expands to the name of
% our new language, \mllng{}.
% \begin{macro}{\language@mlpretty}
%    \begin{macrocode}
\newcommand\language@mlpretty{Matlab-pretty}
%    \end{macrocode}
% \end{macro}
% However, because \pkg{listings} ``normalises'' the name of its languages
% internally, we also need to define a macro that expands to the normalised
% name of our language.
% \begin{macro}{\languageNormedDefd@mlpretty}
%    \begin{macrocode}
\expandafter\lst@NormedDef\expandafter\languageNormedDefd@mlpretty%
  \expandafter{\language@mlpretty}
%    \end{macrocode}
% \end{macro}
%
% We can now define our new \pkg{listings} language, using some |\expandafter|
% trickery on |\lstdefinelanguage|.
%    \begin{macrocode}
\expandafter\expandafter\expandafter\lstdefinelanguage\expandafter%
{\language@mlpretty}
{%
%    \end{macrocode}
%
% \matlab{} is a case-sensitive language.
%    \begin{macrocode}
  sensitive = true,
%    \end{macrocode}
%
% The |upquote| key is set so that right single quotes be straight,
% as in \matlab{}.
%    \begin{macrocode}
  upquote = true,
%    \end{macrocode}
%
% By default, we don't want any visible-space characters anywhere in the code;
% however, the user can always override that by setting |showspaces|
% and |showstringspaces| to |true| \emph{after} loading the \mllng{}
% language or one of the styles defines by \mlpkg{}.
%    \begin{macrocode}
  showspaces       = false,
  showstringspaces = false,
%    \end{macrocode}
%
% Frames around listings may not be of a uniform colour. In most cases, this
% behaviour is undesirable, but can be avoided by passing some colour
% specification to the |rulecolor| key.
%    \begin{macrocode}
  rulecolor = \color{black},
%    \end{macrocode}
%
% In order to keep track of the context, we need to modify the character
% table a bit; we defer the definition of |\SelectCharTable@mlpretty| to
% after the language definition.
%    \begin{macrocode}
  MoreSelectCharTable = \SelectCharTable@mlpretty,
%    \end{macrocode}
%
% The ``basic style'' of our \matlab{} listings is defined below.
% We defer the definition of |\basicStyle@mlpretty| to after the language
% definition.
%    \begin{macrocode}
  basicstyle = \basicStyle@mlpretty,
%    \end{macrocode}
%
% TODO Occurence of different \matlab{} keywords change the syntax
% highlighting performed by \matlab{} editor in different ways.
% we define several classes of \pkg{listings} keywords
% The user may want to use the keywords key
% For precaution, we use relatively large class numbers.
%
% \subsubsection{Keywords}
%
% The keywords defined below are based on the list returned by the
% \matlabver{} "iskeyword" function and the four class-definition keywords,
% which the "iskeyword" function omits.
%
% The following keywords open a block that has nothing to do with class
% definition. We defer the definition of |\processOpRegKW@mlpretty| to
% after the language definition.
%    \begin{macrocode}
  morekeywords = [257]%
  {% 
    for,
    if,
    otherwise,
    parfor,
    spmd,
    switch,
    try,
    while,
  },
  keywordstyle = [257]\processOpRegKW@mlpretty,
%    \end{macrocode}
% Most of the following keywords can only occur within a block opened by the
% keywords listed above---"function" and "return" are exceptions, but, as far
% as I can tell, seem to have the same effects on syntax highlighting as the
% others---and are unrelated to class definition. We defer the definition of
% |\processMidKW@mlpretty| to after the language definition.
%    \begin{macrocode}
  morekeywords = [258]%
  {%
    break,
    case,
    catch,
    continue,
    else,
    elseif,
    function,
    return,
  }, 
  keywordstyle=[258]\processMidKW@mlpretty,
%    \end{macrocode}
% The following two keywords are ``standalone''; they don't open or close any
% block. We defer the definition of |\processStdaKW@mlpretty| to after the
% language definition.
%    \begin{macrocode}
  morekeywords=[259]%
  {%
    global,
    persistent,
  }, 
  keywordstyle=[259]\processStdaKW@mlpretty,
%    \end{macrocode}
% The "classdef" keyword interacts with other keywords in a unique fashion;
% therefore, we dedicate a whole class of \lstpkg{} keywords to it. We defer
% the definition of |\processClassdefKW@mlpretty| to after the language
% definition.
%    \begin{macrocode}
  morekeywords=[260]{classdef},  
  keywordstyle=[260]\processClassdefKW@mlpretty,
%    \end{macrocode}
% The \matlab{} "iskeyword" prints a list of some of the \matlab{} keywords,
% but it omits the four keywords that can only be used within a "classdef"
% block, namely "events", "enumeration", "methods", and "properties". We
% dedicate a class of pkg{listings} keywords those four \matlab{} keywords.
% Those identifiers only get highlighted as keywords if they occur after a classdef keyword and before an end keyword matching that classdef, if any.
%    \begin{macrocode}
  morekeywords=[261]% `middle' keywords related to classdef
  {%
    enumeration,
    events,
    methods,
    properties,
  },
  keywordstyle=[261]\processMidClassdefKW@mlpretty,
%    \end{macrocode}
%    \begin{macrocode}
  % 
  morekeywords=[262]{end},
  keywordstyle=[262]\processEndKW@mlpretty,
%    \end{macrocode}
%
% \subsubsection{Strings}
%
%    \begin{macrocode}
  morestring=[m]',
  stringstyle=\processString@mlpretty,
%    \end{macrocode}
%
% \subsubsection{Comments \& section titles}
%
%    \begin{macrocode}
  morecomment=[l]\%,                                       % to-end-of-line
  morecomment=[n]{\%\{\^^M}{\%\}\^^M},                     % block
  moredelim=**[il][\processDotDotDot@mlpretty]{...},       % line continuation
  moredelim=**[l][\processSectionTitle@mlpretty]{\%\%},    % code section
  moredelim=**[l][\processSectionTitle@mlpretty]{\%\%\ },  % code section
  commentstyle=\commentStyle@mlpretty,
%    \end{macrocode}
%
% \subsubsection{System commands}
%
%    \begin{macrocode}
  moredelim=[l][\syscomStyle@mlpretty]{!},
%    \end{macrocode}
%
% \subsubsection{Variables with shared scope}
%
%    \begin{macrocode}
  mlsharedvarStyle@mlpretty = \processSharedVar@mlpretty,
%    \end{macrocode}
%
% \subsubsection{\lstpkg{} aspects}
%
%    \begin{macrocode}
}[
  keywords,
  strings,
  comments,
]



% --- State variables ---
% Counters and switches used as ``state variables''
% (used to keep track of context)
% although all our operations on counters will be global,
% the package currently use TeX counters rather than LaTeX ones.
\newcount\netBracketCount@mlpretty  % net running count of brackets
                                    % ([{ count for +1, )]} count for -1 
\newcount\blkLvl@mlpretty             % block nesting level
\newcount\blkLvlAtClassdef@mlpretty     % block nesting level at last classdef

\newif\ifClosingEndKW@mlpretty@            \ClosingEndKW@mlpretty@true
\newif\ifInClassdef@mlpretty@                \InClassdef@mlpretty@false
\newif\ifInStr@mlpretty@                          \InStr@mlpretty@false
\newif\ifInLineCom@mlpretty@                  \InLineCom@mlpretty@false
\newif\ifTooLateForSectionTitle@mlpretty@%
                                 \TooLateForSectionTitle@mlpretty@false
\newif\ifWithinSectionTitle@mlpretty@\WithinSectionTitle@mlpretty@false


% --- Macros for resetting counters and switches ---
\newcommand\resetBracketCount@mlpretty
  {\global\netBracketCount@mlpretty=0}

\newcommand\resetEndKW@mlpretty
{%
  \global\ClosingEndKW@mlpretty@true%
  \resetBracketCount@mlpretty%
}

\newcommand\resetClassdefKW@mlpretty
{%
  \global\InClassdef@mlpretty@false%
  \global\blkLvl@mlpretty=0%
  \global\blkLvlAtClassdef@mlpretty=0%
}


% --- internal style macros ---

% Font family, series, shape, and size (color is defined separately)
\newcommand\basicFontSpecs@mlpretty
{%
  \ttfamily%
  \lst@ifdisplaystyle%
    \normalsize%
  \fi
}
\newcommand\keywordFontSpecs@mlpretty{}
\newcommand\lastElemFontSpecs@mlpretty{}
\newcommand\stringFontSpecs@mlpretty{}
\newcommand\commentFontSpecs@mlpretty{}
\newcommand\sectionTitleFontSpecs@mlpretty
  {\commentFontSpecs@mlpretty\bfseries}
\newcommand\syscomFontSpecs@mlpretty{}
\newcommand\sharedvarFontSpecs@mlpretty{}
\newcommand\placeholderOpDelim@mlpretty{\textlangle}
\newcommand\placeholderClDelim@mlpretty{\textrangle}
\newcommand\placeholderDelimFontSpecs@mlpretty{\normalfont\upshape}
\newcommand\placeholderContentFontSpecs@mlpretty{\normalfont\itshape}

% Matlab syntax highlighting colors
\colorlet{textColor@mlpretty}{black}                      % text
\colorlet{lastElemColor@mlpretty}{textColor@mlpretty}     % end
\definecolor{keywordColor@mlpretty}{RGB}{000,000,255}     % keywords
\definecolor{stringColor@mlpretty}{RGB}{160,032,240}      % strings
\definecolor{commentColor@mlpretty}{RGB}{034,139,034}     % comments
\definecolor{sectionTitleColor@mlpretty}{RGB}{034,139,034}% section titles
\colorlet{sectionRuleColor@mlpretty}{black!15}            % code-section rule
\definecolor{syscomColor@mlpretty}{RGB}{178,140,000}      % system commands
\definecolor{sharedvarColor@mlpretty}{RGB}{000,163,163}   % shared scope
\definecolor{placeholderColor@mlpretty}{RGB}{209,0,86}

% More Matlab colors (currently not used by matlab-prettifier)
\colorlet{bgColor@mlpretty}{white}                        % background color
\definecolor{untermStringColor@mlpretty}{RGB}{178,000,000}% unterm. strings
\definecolor{syntaxErrorColor@mlpretty}{RGB}{255,000,000} % Syntax errors

% Additional custom colors
\colorlet{numbersColor@matlabpretty}{gray}

\newcommand\basicStyle@mlpretty
{%
  \basicFontSpecs@mlpretty%
  \color{textColor@mlpretty}%
}

\newcommand\lastElemStyle@mlpretty
{%
  \lastElemFontSpecs@mlpretty%
  \color{lastElemColor@mlpretty}%
}

\newcommand\keywordStyle@mlpretty
{%
  \keywordFontSpecs@mlpretty%
  \color{keywordColor@mlpretty}%
}

\newcommand\stringStyle@mlpretty
{%
  \global\InStr@mlpretty@true%
  \stringFontSpecs@mlpretty%
  \color{stringColor@mlpretty}%
}

\newcommand\commentStyle@mlpretty
{%
  \commentFontSpecs@mlpretty%
  \color{commentColor@mlpretty}%
}

\newcommand\sectionTitleStyle@mlpretty
{%
  \sectionTitleFontSpecs@mlpretty%
  \color{sectionTitleColor@mlpretty}%
}

\newcommand\syscomStyle@mlpretty
{%
  \syscomFontSpecs@mlpretty%
  \color{syscomColor@mlpretty}%
}

\newcommand\sharedvarStyle@mlpretty
{%
  \sharedvarFontSpecs@mlpretty%
  \color{sharedvarColor@mlpretty}%
}

\newcommand\placeholderStyle@mlpretty
{%
  \placeholderContentFontSpecs@mlpretty%
  \color{placeholderColor@mlpretty}%
}



% Macro for SelectCharTable key
\newcommand\SelectCharTable@mlpretty
{%
  \processOpenBracket@mlpretty{40}{\roundBktOp@mlpretty}%
  \processOpenBracket@mlpretty{91}{\squareBktOp@mlpretty}%
  \processOpenBracket@mlpretty{123}{\curlyBktOp@mlpretty}%
  \processCloseBracket@mlpretty{41}{\roundBktCl@mlpretty}%
  \processCloseBracket@mlpretty{93}{\squareBktCl@mlpretty}%
  \processCloseBracket@mlpretty{125}{\curlyBktCl@mlpretty}%
}


% --- macros for processing opening and closing brackets ---
\newcommand\processOpenBracket@mlpretty[2]
{%
  \lst@DefSaveDef{#1}#2%
  {%
    #2%
    \ifnum\lst@mode=\lst@Pmode\relax% if we're not inside a string or comment
      \global\ClosingEndKW@mlpretty@false%
      \global\advance\netBracketCount@mlpretty by \@ne%
    \fi
  }%  
}

\newcommand\processCloseBracket@mlpretty[2]
{%
  \lst@DefSaveDef{#1}#2%
  {%
    #2%
    \ifnum\lst@mode=\lst@Pmode\relax% if we're not inside a string or comment
      \ifClosingEndKW@mlpretty@%    % If end is already a blue keyword... 
        \resetBracketCount@mlpretty % ... we can safely reset the count.
      \else
        \global\advance\netBracketCount@mlpretty by \m@ne%
        \ifnum\netBracketCount@mlpretty>0%
        \else
          \global\ClosingEndKW@mlpretty@true%
        \fi
      \fi
    \fi
  }%  
}

% --- macros for processing keywords ---
\newcommand\processOpRegKW@mlpretty
{%
  \ifWithinSectionTitle@mlpretty@%
  \else
    \resetEndKW@mlpretty%
    \global\advance\blkLvl@mlpretty\@ne%
    \keywordStyle@mlpretty%
  \fi
}

\newcommand\processMidKW@mlpretty
{%
  \ifWithinSectionTitle@mlpretty@%
  \else
    \resetEndKW@mlpretty%
    \keywordStyle@mlpretty%
  \fi
}

% No difference between standalone keywords and middle keywords
\newcommand\processStdaKW@mlpretty\processMidKW@mlpretty

\newcommand\processClassdefKW@mlpretty
{%
  \ifWithinSectionTitle@mlpretty@%
    \keywordStyle@mlpretty%
  \else
    \resetEndKW@mlpretty%
    \global\InClassdef@mlpretty@true%
    \global\blkLvlAtClassdef@mlpretty=\blkLvl@mlpretty%
    \global\advance\blkLvl@mlpretty\@ne%
    \keywordStyle@mlpretty%
  \fi
}

\newcommand\processMidClassdefKW@mlpretty
{%
  %only for typesetting those as keywords in inline code
  \ifOverridecontext@mlpretty@% 
  \else
    \ifWithinSectionTitle@mlpretty@%
    \else
      \ifInClassdef@mlpretty@%
        \resetEndKW@mlpretty%
        \global\advance\blkLvl@mlpretty\@ne%
        \keywordStyle@mlpretty%
      \fi
    \fi
  \fi
}

\newcommand\processEndKW@mlpretty
{%
  % only for typesetting those as ``last element'' in inline code
  \ifOverridecontext@mlpretty@% 
    \lastElemStyle@mlpretty%
  \else
    \ifWithinSectionTitle@mlpretty@%
    \else
      \ifClosingEndKW@mlpretty@%
        \ifInLineCom@mlpretty@%
        \else
          \ifnum\blkLvl@mlpretty>0%
            \global\advance\blkLvl@mlpretty\m@ne%
          \fi
          \ifnum\blkLvl@mlpretty=\blkLvlAtClassdef@mlpretty%
            \global\InClassdef@mlpretty@false%
          \fi
          \keywordStyle@mlpretty%
        \fi
      \else
        \lastElemStyle@mlpretty%
      \fi
    \fi
  \fi
}


% --- strings ---
\newcommand\processString@mlpretty
{%
  \ifWithinSectionTitle@mlpretty@%
  \else
    \stringStyle@mlpretty%  
  \fi
}

% --- macro for handling line continuation ---
\newcommand\processDotDotDot@mlpretty
{%
  \lst@CalcLostSpaceAndOutput%
  \ifWithinSectionTitle@mlpretty@%
    ...%
  \else
    \ifInLineCom@mlpretty@%
      ...%
    \else
      \global\InLineCom@mlpretty@true%
      {\keywordStyle@mlpretty...}%
    \fi
    \commentStyle@mlpretty%
  \fi
}

% --- macro for processing section title ---
\newlength\emHeight@mlpretty
\newlength\jayDepth@mlpretty
\newlength\sectionRuleOffset@mlpretty
\newlength\sectionRuleThickness@mlpretty
\newcommand\sectionRuleThicknessRatio@mlpretty{.05}

\newcommand\processSectionTitle@mlpretty
{%
  \ifWithinSectionTitle@mlpretty@% to avoid drawing the rule multiple times
  \else
    \global\WithinSectionTitle@mlpretty@true%
    \resetEndKW@mlpretty%
    \commentStyle@mlpretty%
    \ifTooLateForSectionTitle@mlpretty@%
    \else
      \bgroup%
        % calculate the vertical offset for the rule
        \setlength\emHeight@mlpretty{\fontcharht\font`M}%
        \setlength\jayDepth@mlpretty{\fontchardp\font`j}%
        \setlength\sectionRuleOffset@mlpretty%
        {%
          \dimexpr.5\emHeight@mlpretty%
                 +.5\baselineskip%
                 -.5\jayDepth@mlpretty\relax%
        }%
        \setlength\sectionRuleThickness@mlpretty%
        {%
          \sectionRuleThicknessRatio@mlpretty\baselineskip%
        }%
        \color{sectionRuleColor@mlpretty}%
        \ifShowCellrules@mlpretty@%
          \makebox[0em][l]%
          {%
            \raisebox{\sectionRuleOffset@mlpretty}[0pt][0pt]%
              {\rule{\lst@linewidth}{\sectionRuleThickness@mlpretty}}%
          }%
        \fi
      \egroup%
      \sectionTitleStyle@mlpretty%
    \fi
  \fi
}

\newcommand\processSharedVar@mlpretty
{%
  \ifWithinSectionTitle@mlpretty@%
  \else
      \sharedvarStyle@mlpretty%
  \fi
}
%    \end{macrocode}

% \subsection{Hooking into listings}
% \label{hooks-mlpretty}

%    \begin{macrocode}

% --- InitVarsEOL hook ---
\newcommand\addedToInitVarsEOL@mlpretty{} % polymorphic macro for InitVarsEOL
\newcommand\@ddedToInitVarsEOL@mlpretty
{%
  % at the start of a line, we're not inside a one-line comment
  \global\InLineCom@mlpretty@false%
  % This avoids continuation of unterminated string literals on next line.
  \ifInStr@mlpretty@%
    \global\InStr@mlpretty@false%
    \lst@LeaveMode%
  \fi
  % we're not in a section title...
  \global\WithinSectionTitle@mlpretty@false%
  % ...but a section title is allowed to start here
  \global\TooLateForSectionTitle@mlpretty@false%
}
\lst@AddToHook{InitVarsEOL}{\addedToInitVarsEOL@mlpretty}

% --- EndGroup hook ---
\newcommand\addedToEndGroup@mlpretty{} % polymorphic macro for EndGroup
\newcommand\@ddedToEndGroup@mlpretty
{%
  % if we were inside a string, we're now getting out of it
  \ifInStr@mlpretty@%
    \global\InStr@mlpretty@false%
  \fi
}
\lst@AddToHook{EndGroup}{\addedToEndGroup@mlpretty}

% --- PostOutput hook ---
\newcommand\addedToPostOutput@mlpretty{} % polymorphic macro for PostOuput
\newcommand\@ddedToPostOutput@mlpretty
{%
  % At the first PostOutput, it's too late for a section title to start.
  \global\TooLateForSectionTitle@mlpretty@true%
}
\lst@AddToHook{PostOutput}{\addedToPostOutput@mlpretty}

% --- PreInit Hook ---
% Now we apply all those patches at the PreInit hook,
% under the condition that \lst@language and \languageNormedDefd@mlpretty
% expand (once) to the same replacement text.
\newcommand\addedToPreInitHook
{%
  \ifx\lst@language\languageNormedDefd@mlpretty%
    \renewcommand\addedToInitVarsEOL@mlpretty\@ddedToInitVarsEOL@mlpretty%
    \renewcommand\addedToEndGroup@mlpretty\@ddedToEndGroup@mlpretty%
    \renewcommand\addedToPostOutput@mlpretty\@ddedToPostOutput@mlpretty%
  \fi
}
\lst@AddToHook{PreInit}{\addedToPreInitHook}

% --- DeInit hook ---
% We reset counters apply at the DeInit hook,
% under the condition that \lst@language and \languageNormedDefd@mlpretty
% expand (once) to the same replacement text.
\newcommand\addedToDeInitHook
{%
  \ifx\lst@language\languageNormedDefd@mlpretty%
    \resetEndKW@mlpretty%
    \resetClassdefKW@mlpretty%
  \fi
}
\lst@AddToHook{DeInit}{\addedToDeInitHook}
%    \end{macrocode}
%
% \subsection{Placeholders in code snippets}
%
% \begin{macro}{\itcorr@mlpretty}
% This macro is used for inserting italic correction in case the font shape is
% italic or slanted.
%    \begin{macrocode}
\newcommand\itcorr@mlpretty
{%
  % After checking that \long@f@shape@mlpretty is definable, we
  % define it as a long macro that expands to the current font shape.
  \newcommand\long@f@shape@mlpretty{}%
  \long\edef\long@f@shape@mlpretty{\f@shape}%
  \ifx\long@f@shape@mlpretty\itdefault%
    \/%
  \else
    \ifx\long@f@shape@mlpretty\sldefault%
      \/%
    \fi
  \fi
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\snippetPlaceholder}
% This user macro can be used to typeset placeholders in code snippets.
%    \begin{macrocode}
\newcommand\snippetPlaceholder[1]
{%
  \bgroup%
    \placeholderStyle@mlpretty%
    \bgroup%
      \placeholderDelimFontSpecs@mlpretty%
      \placeholderOpDelim@mlpretty%
    \egroup%
    #1\itcorr@mlpretty%
    \bgroup%
      \placeholderDelimFontSpecs@mlpretty%
      \placeholderClDelim@mlpretty%
    \egroup%
  \egroup%
}
%    \end{macrocode}
% \end{macro}
%
% \subsection{Predefined \texorpdfstring{\mlpkg{}}{matlab-prettifier} styles}
%
% \subsubsection{Standard style}
%
% \begin{macro}{Matlab-stdstyle}
%    \begin{macrocode}
\lstdefinestyle{Matlab-stdstyle}
{
  language   = \languageNormedDefd@mlpretty,
  frame      = single,
  numbers    = left,
  breaklines = true,
}
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Black \& white style}
%
% \begin{macro}{Matlab-bwstyle}
%    \begin{macrocode}
\lstdefinestyle{Matlab-bwstyle}
{
  language            = \languageNormedDefd@mlpretty,
  mlkeywordstyle      = \color[gray]{0}  \bfseries          ,
  mlcommentstyle      = \color[gray]{.75}           \itshape,
  mlstringstyle       = \color[gray]{.5}                    ,
  mlsyscomstyle       = \color[gray]{.25}                   ,
  mlsectiontitlestyle = \color[gray]{.75}\bfseries  \itshape,
  mlsharedvarstyle    = \color[gray]{0}                     ,
  mlplaceholderstyle  = \color[gray]{0}  \normalfont\itshape,
  frame               = single,
  numbers             = left,
  breaklines          = true,
}
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Pygments-like style}
%
% The \pkg{minted}, \pkg{verbments}, and \pkg{pythontex} packages all use
% \href{http://pygments.org}{Pygments} lexers for syntax highlighting of
% listings. This last \mlpkg{} style closely mimics that of the Pygments
% lexer for \matlab{} called `MatlabLexer'.
%
% \begin{macro}{Matlab-pygstyle}
%    \begin{macrocode}
\lstdefinestyle{Matlab-pygstyle}
{
  language            = \languageNormedDefd@mlpretty,
  mllastelementstyle  = \color[RGB]{127,000,000}                   ,
  mlkeywordstyle      = \color[RGB]{000,127,000}\bfseries          ,
  mlcommentstyle      = \color[RGB]{063,127,127}           \itshape,
  mlstringstyle       = \color[RGB]{186,034,034}                   ,
  mlsyscomstyle       = \color[RGB]{000,127,000}                   ,
  mlsectiontitlestyle = \color[RGB]{063,127,127}           \itshape,
  mlsharedvarstyle    = \color[RGB]{034,034,186}                   ,
  mlplaceholderstyle  = \color[RGB]{127,063,127}\normalfont\itshape,
  frame               = single,
  numbers             = left,
  breaklines          = true,
}
%    \end{macrocode}
% \end{macro}
%
% \Finale
\endinput