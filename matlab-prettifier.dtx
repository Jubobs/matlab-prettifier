% \iffalse meta-comment
%
% Copyright (C) 2014 by Julien Cretel
%                       <jubobs.matlab.prettifier at gmail.com>
%
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3
% of this license or (at your option) any later version.
% The latest version of this license is in
%
%     http://www.latex-project.org/lppl.txt
%
% and version 1.3 or later is part of all distributions of LaTeX
% version 2005/12/01 or later.
%
% \fi
%
% \iffalse
%<package>\NeedsTeXFormat{LaTeX2e}[2011/06/27]
%<package>\ProvidesPackage{matlab-prettifier}
%<package>  [2014/02/21 v0.1 A package for prettyprinting Matlab source code]
%
%<*driver>
\documentclass{ltxdoc}

\usepackage[T1]{fontenc}
\usepackage{lmodern}
\usepackage{filecontents}
\usepackage{matlab-prettifier}
\usepackage{hyperref}

\lstMakeShortInline[language=Matlab-pretty]"
\newcommand*{\pkg}[1]{\textsf{#1}}
\newcommand*{\keyname}[1]{\texttt{#1}}
\newcommand*{\opt}[1]{\texttt{#1}}
\newcommand*{\lststy}[1]{\texttt{#1}}
\newcommand\matlab{\textsc{Matlab}}
\newcommand\mlpkg{\pkg{matlab-prettifier}}
\newcommand\lstpkg{\pkg{listings}}
\newcommand\mllng{\texttt{Matlab-pretty}}

\EnableCrossrefs
\CodelineIndex
\RecordChanges

\begin{document}
  \DocInput{matlab-prettifier.dtx}
\end{document}
%</driver>
% \fi
%
% \CheckSum{581}
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
% \changes{v0.1}{2014/02/21}{Initial release.}
%
% \GetFileInfo{matlab-prettifier.sty}
%
% \DoNotIndex{\fi}
%
% \title^^A
% {^^A
%   The \textsf{matlab-prettifier} package^^A
%   \thanks^^A
%   {^^A
%     This document corresponds to \textsf{matlab-prettifier}~\fileversion,
%     dated~\filedate.^^A
%   }^^A
%  }
% \author{Julien Cretel\\ \texttt{jubobs.matlab.prettifier at gmail.com}}
% \date{\filedate}
% \thispagestyle{empty}
% \maketitle
%
% \begin{abstract}
%   The \mlpkg{} package allows you to effortlessly prettyprint
%   Matlab source code in documents typeset with \LaTeX{} \& friends. Built
%   on top of the \lstpkg{} package, it defines a language called
%   \mllng{}, which can be invoked by \lstpkg{} macros and
%   environments and can be used in conjunction with (most) parameters
%   provided by the \lstpkg{} package. Fine-tuning of the output is possible
%   via a number of special-purpose keys extending those defined by \lstpkg{}.
%   The \mlpkg{} package also conveniently provides three
%   predefined styles, for fast deployment.
% \end{abstract}
%
% \section{Introduction}
%
% \section{Installation}
%
% \subsection{Required packages}
%
% \subsection{Installing \texorpdfstring{\pkg{matlab-prettifier}}{matlab-prettifier}}
%
% \section{Basic usage}
%
% \section{More advanced tweaks}
%
% \section{Known issues}
%
% \StopEventually{\clearpage\PrintChanges\PrintIndex}
%
% \section{Implementation}
%
% \subsection{Preliminary checks}
%
% Because the \lstpkg{} options \opt{noaspects}, \opt{0.21}, and \opt{savemem}
% are incompatible with \pkg{matlab-prettifier}, checking whether the
% \lstpkg{} package has been loaded with any of those options is a good idea;
% if so, we should issue an error.
% \begin{macro}{\lstoptcheck@mlpretty}
%   This macro checks whether \lstpkg{} was loaded with a given option
%   and, if so, throws an error.
%    \begin{macrocode}
\newcommand\lstoptcheck@mlpretty[1]
{%
  \@ifpackagewith{listings}{#1}%
  {
    \PackageError{matlab-prettifier}%
      {incompatible listings' option #1}%
      {%
        Make sure the `listings' package
        doesn't get loaded with option `#1'%
      }
  }
  {}
}
%    \end{macrocode}
% \end{macro}
% Using that macro, we make sure that none of the problematic \lstpkg{}
% options has been specified during an earlier loading of the \lstpkg{}
% package.
%    \begin{macrocode}
\lstoptcheck@mlpretty{noaspects}
\lstoptcheck@mlpretty{0.21}
\lstoptcheck@mlpretty{savemem}
%    \end{macrocode}
%
% \subsection{Package options}
%
% \mlpkg{} currently offers no package option; therefore, if the user
% mistakenly specifies any option for the package, we discard that option
% and issue a warning.
%    \begin{macrocode}
\DeclareOption*%
{%
  \OptionNotUsed
  \PackageWarning{matlab-prettifier}{Unknown `\CurrentOption' option}
}
\ProcessOptions\relax
%    \end{macrocode}
%
% \subsection{Required packages}
% 
% We require three packages without any package option.
% We need \pkg{textcomp} in order to use the \lstpkg{}' \keyname{upquote}
% key;
%    \begin{macrocode}
\RequirePackage{textcomp}[2005/09/27]
%    \end{macrocode}
% we need the \pkg{xcolor} package in order to color our \matlab{} code;
%    \begin{macrocode}
\RequirePackage{xcolor}[2007/01/21]
%    \end{macrocode}
% and, of course, we need the ``big daddy'': the \lstpkg{} package.
%    \begin{macrocode}
\RequirePackage{listings}[2013/08/26]
%    \end{macrocode}
%
% \subsection{Key-value interface}
%
% We extend \lstpkg{}' key-value interface by defining several additional
% keys, which we will use in the definitions of a new \lstpkg{} language
% and three \lstpkg{} styles, further down. Most of those new keys start by
% the prefix |ml|, so that the user easily distinguish them from
% \emph{bona fide} \lstpkg{} keys.
%
% \begin{macro}{mlkeywordstyle}
%   In the upcoming language definition, we use several classes of \lstpkg{}
% keywords to handle the different \matlab{} keywords. However, we need one
% style key to ``rule them all''.
%    \begin{macrocode}
\lst@Key{mlkeywordstyle}\relax{\renewcommand\keywordStyle@mlpretty{#1}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{mllastelementstyle}
% The "end" keyword has different meanings depending on the context in which
% it occurs: it may be used to close a code block (e.g.\ a "while" loop), or
% it may stand for the last element of an array. In the first case, it's
% highlighted in the same style as the other \matlab{} keywords, like so:
% "end". In the other case, it's highlighted like ``normal text'', like so:
% \lstinline[language=Matlab-pretty,mloverride]|end|. The
% \keyname{mllastelementstyle} key controls the look of the keyword when it
% means ``last element''.
%    \begin{macrocode}
\lst@Key{mllastelementstyle}\relax%
  {\renewcommand\lastElemStyle@mlpretty{#1}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{mloverride}
% By default, in inline code, \mlpkg{} typesets the "end" keyword as closing
% keyword (\emph{not} as ``last element''), and typesets the four
% class-definition identifiers, "events", "enumeration", "methods", and
% "properties", as \matlab{} functions (\emph{not} as to keywords). However,
% the user may want to print 
% \lstinline[language=Matlab-pretty,mloverride]|end|,
% \lstinline[language=Matlab-pretty,mloverride]|events|, 
% \lstinline[language=Matlab-pretty,mloverride]|enumeration|, 
% \lstinline[language=Matlab-pretty,mloverride]|methods|, and
% \lstinline[language=Matlab-pretty,mloverride]|properties|.
% Overriding the default behaviour is made possible by the
% \keyname{mloverride} key.
%    \begin{macrocode}
\lst@Key{mloverride}{false}[t]%
  {\lstKV@SetIf{#1}\ifOverridecontext@mlpretty@}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{mlstringstyle}
% This key controls the style of \matlab{} strings. TODO
%    \begin{macrocode}
\lst@Key{mlstringstyle}\relax{\renewcommand\stringStyle@mlpretty{#1}}
%    \end{macrocode}
% \end{macro}
%    \begin{macrocode}
\lst@Key{mlcommentstyle}\relax{\renewcommand\commentStyle@mlpretty{#1}}
\lst@Key{mlsectionrulethickness}\relax%
  {\renewcommand\sectionRuleThicknessRatio@mlpretty{#1}}
\lst@Key{mlsectionrulecolor}\relax%
  {\colorlet{sectionRuleColor@mlpretty}{#1}}
\lst@Key{mlshowsectionrules}{false}[t]%
  {\lstKV@SetIf{#1}\ifShowCellrules@mlpretty@}
\lst@Key{mlsectiontitlestyle}\relax
  {\renewcommand\sectionTitleStyle@mlpretty{#1}}

\lst@Key{mlsyscomstyle}\relax{\renewcommand\syscomStyle@mlpretty{#1}}
%    \end{macrocode}
%  \begin{macro}{mlsharedvars}
%  \begin{macro}{moremlsharedvars}
%  \begin{macro}{deletemlsharedvars}
% For convenience, we create a brand new class of \lstpkg{} ``keywords'' for
% allowing the user to define \matlab{} variables with shared scope. The
% following invocation of \lstpkg{}' internal macro |\lst@InstallKeywords|
% defines, not only a \keyname{mlsharedvars} key, but also a
% \keyname{moremlsharedvars} key and a \keyname{deletemlsharedvars} key.
%    \begin{macrocode}
\lst@InstallKeywords k{mlsharedvars}{mlsharedvarStyle@mlpretty}\relax%
  {mlsharedvarStyle@mlpretty}{}ld
%    \end{macrocode}
%  \end{macro}
%  \end{macro}
%  \end{macro}
% 
% The style of those variables with shared scope is controlled via the
% \keyname{mlsharedvarstyle} key.
%    \begin{macrocode}
\lst@Key{mlsharedvarstyle}\relax{\renewcommand\sharedvarStyle@mlpretty{#1}}
%    \end{macrocode}
%    \begin{macrocode}
\lst@Key{mlunquotedstringdelim}\relax%
  {\lst@DelimKey\relax{[is][\stringStyle@mlpretty]{#1}}}
\lst@Key{mlplaceholderstyle}\relax%
 {\renewcommand\placeholderStyle@mlpretty{#1}}
%    \end{macrocode}
%
% \subsection{Language definition}
%
% To avoid code duplication, we define a macro that expands to the name of
% our new language, \mllng{}.
% \begin{macro}{\language@mlpretty}
%    \begin{macrocode}
\newcommand\language@mlpretty{Matlab-pretty}
%    \end{macrocode}
% \end{macro}
% However, because \pkg{listings} ``normalises'' the name of its languages
% internally, we also need to define a macro that expands to the normalised
% name of our language.
% \begin{macro}{\languageNormedDefd@mlpretty}
%    \begin{macrocode}
\expandafter\lst@NormedDef\expandafter\languageNormedDefd@mlpretty%
  \expandafter{\language@mlpretty}
%    \end{macrocode}
% \end{macro}
%
% We can now define our new \pkg{listings} language, using some |\expandafter|
% trickery on |\lstdefinelanguage|.
%    \begin{macrocode}
\expandafter\expandafter\expandafter\lstdefinelanguage\expandafter%
{\language@mlpretty}
{%
%    \end{macrocode}
%
% \matlab{}, of course, is a case-sensitive language.
%    \begin{macrocode}
  sensitive = true,
%    \end{macrocode}
%
% The \keyname{upquote} key is set so that right single quotes be straight,
% as in \matlab{}; no offense to gay right single quotes.
%    \begin{macrocode}
  upquote = true,
%    \end{macrocode}
%
% By default, we don't want any visible-space characters anywhere in the code;
% however, the user can always override that by setting \keyname{showspaces}
% and \keyname{showstringspaces} to |true| \emph{after} loading the \mllng{}
% language or one of the styles defines by \mlpkg{}.
%    \begin{macrocode}
  showspaces       = false,
  showstringspaces = false,
%    \end{macrocode}
%
% Frames around listings may not be of a uniform colour. In most cases, this
% behaviour is undesirable, but can be avoided by passing some colour
% specification to the \keyname{rulecolor} key.
%    \begin{macrocode}
  rulecolor = \color{black},
%    \end{macrocode}
%
% In order to keep track of the context, we need to modify the character
% table a bit; we defer the definition of |\SelectCharTable@mlpretty| to
% after the language definition.
%    \begin{macrocode}
  MoreSelectCharTable = \SelectCharTable@mlpretty,
%    \end{macrocode}
%
% The ``basic style'' of our \matlab{} listings is defined below.
% We defer the definition of |\basicStyle@mlpretty| to after the language
% definition.
%    \begin{macrocode}
  basicstyle = \basicStyle@mlpretty,
%    \end{macrocode}
%
% TODO Occurence of different \matlab{} keywords change the syntax
% highlighting performed by \matlab{} editor in different ways.
% we define several classes of \pkg{listings} keywords
% The user may want to use the keywords key
% For precaution, we use relatively large class numbers.
%
% The following keywords open a block that has nothing to do with class
% definition. We defer the definition of |\processOpRegKW@mlpretty| to
% after the language definition.
%    \begin{macrocode}
  morekeywords = [257]%
  {% 
    for,
    if,
    otherwise,
    parfor,
    spmd,
    switch,
    try,
    while,
  },
  keywordstyle = [257]\processOpRegKW@mlpretty,
%    \end{macrocode}
% Most of the following keywords can only occur within a block opened by the
% keywords listed above---"function" and "return" are exceptions, but, as far
% as I can tell, seem to have the same effects on syntax highlighting as the
% others---and are unrelated to class definition. We defer the definition of
% |\processMidKW@mlpretty| to after the language definition.
%    \begin{macrocode}
  morekeywords = [258]%
  {%
    break,
    case,
    catch,
    continue,
    else,
    elseif,
    function,
    return,
  }, 
  keywordstyle=[258]\processMidKW@mlpretty,
%    \end{macrocode}
% The following two keywords are ``standalone''; they don't open or close any
% block. We defer the definition of |\processStdaKW@mlpretty| to after the
% language definition.
%    \begin{macrocode}
  morekeywords=[259]%
  {%
    global,
    persistent,
  }, 
  keywordstyle=[259]\processStdaKW@mlpretty,
%    \end{macrocode}
% The "classdef" keyword interacts with other keywords in a unique fashion;
% therefore, we use a dedicated class of \lstpkg{} keywords to handle it. We
% defer the definition of |\processClassdefKW@mlpretty| to after the
% language definition.
%    \begin{macrocode}
  morekeywords=[260]{classdef},  
  keywordstyle=[260]\processClassdefKW@mlpretty,
%    \end{macrocode}
% The \matlab{} "iskeyword" prints a list of some of the \matlab{} keywords,
% but it omits the four keywords that can only be used within a "classdef"
% block, namely "events", "enumeration", "methods", and "properties". We
% dedicate a class of pkg{listings} keywords those four \matlab{} keywords.
%    \begin{macrocode}
  morekeywords=[261]% `middle' keywords related to classdef
  {%
    enumeration,
    events,
    methods,
    properties,
  },
  keywordstyle=[261]\processMidClassdefKW@mlpretty,
%    \end{macrocode}
%    \begin{macrocode}
  % 
  morekeywords=[262]{end},
  keywordstyle=[262]\processEndKW@mlpretty,
  %
  % strings
  morestring=[m]',
  stringstyle=\processString@mlpretty,
  %
  % comments
  morecomment=[l]\%,                                       % to-end-of-line
  morecomment=[n]{\%\{\^^M}{\%\}\^^M},                     % block
  moredelim=**[il][\processDotDotDot@mlpretty]{...},       % line continuation
  moredelim=**[l][\processSectionTitle@mlpretty]{\%\%},    % code section
  moredelim=**[l][\processSectionTitle@mlpretty]{\%\%\ },  % code section
  commentstyle=\commentStyle@mlpretty,
  %
  % system commands
  moredelim=[l][\syscomStyle@mlpretty]{!},
  %
  % variables with shared scope
  mlsharedvarStyle@mlpretty = \processSharedVar@mlpretty,
}
[% `listings' aspects needed
  keywords,
  strings,
  comments,
]



% --- State variables ---
% Counters and switches used as ``state variables''
% (used to keep track of context)
\newcount\netBracketCount@mlpretty  % net running count of brackets
                                    % ([{ count for +1, )]} count for -1 
\newcount\blkLvl@mlpretty             % block nesting level
\newcount\blkLvlAtClassdef@mlpretty     % block nesting level at last classdef

\newif\ifClosingEndKW@mlpretty@            \ClosingEndKW@mlpretty@true
\newif\ifInClassdef@mlpretty@                \InClassdef@mlpretty@false
\newif\ifInStr@mlpretty@                          \InStr@mlpretty@false
\newif\ifInLineCom@mlpretty@                  \InLineCom@mlpretty@false
\newif\ifTooLateForSectionTitle@mlpretty@%
                                 \TooLateForSectionTitle@mlpretty@false
\newif\ifWithinSectionTitle@mlpretty@\WithinSectionTitle@mlpretty@false


% --- Macros for resetting counters and switches ---
\newcommand\resetBracketCount@mlpretty{\global\netBracketCount@mlpretty=0}

\newcommand\resetEndKW@mlpretty
{%
  \global\ClosingEndKW@mlpretty@true%
  \resetBracketCount@mlpretty%
}

\newcommand\resetClassdefKW@mlpretty
{%
  \global\InClassdef@mlpretty@false%
  \global\blkLvl@mlpretty=0%
  \global\blkLvlAtClassdef@mlpretty=0%
}


% --- internal style macros ---

% Font family, series, shape, and size (color is defined separately)
\newcommand\basicFontSpecs@mlpretty
{%
  \ttfamily%
  \lst@ifdisplaystyle%
    \normalsize%
  \fi%
}
\newcommand\keywordFontSpecs@mlpretty{}
\newcommand\lastElemFontSpecs@mlpretty{}
\newcommand\stringFontSpecs@mlpretty{}
\newcommand\commentFontSpecs@mlpretty{}
\newcommand\sectionTitleFontSpecs@mlpretty
  {\commentFontSpecs@mlpretty\bfseries}
\newcommand\syscomFontSpecs@mlpretty{}
\newcommand\sharedvarFontSpecs@mlpretty{}

% Matlab syntax highlighting colors
\colorlet{textColor@mlpretty}{black}                      % text
\colorlet{lastElemColor@mlpretty}{textColor@mlpretty}     % end
\definecolor{keywordColor@mlpretty}{RGB}{000,000,255}     % keywords
\definecolor{stringColor@mlpretty}{RGB}{160,032,240}      % strings
\definecolor{commentColor@mlpretty}{RGB}{034,139,034}     % comments
\definecolor{sectionTitleColor@mlpretty}{RGB}{034,139,034}% section titles
\colorlet{sectionRuleColor@mlpretty}{black!15}            % code-section rule
\definecolor{syscomColor@mlpretty}{RGB}{178,140,000}      % system commands
\definecolor{sharedvarColor@mlpretty}{RGB}{000,163,163}   % shared scope

% More Matlab colors (currently not used by matlab-prettifier)
\colorlet{bgColor@mlpretty}{white}                        % background color
\definecolor{untermStringColor@mlpretty}{RGB}{178,000,000}% unterm. strings
\definecolor{syntaxErrorColor@mlpretty}{RGB}{255,000,000} % Syntax errors

% Additional custom colors
\colorlet{numbersColor@matlabpretty}{gray}

\newcommand\basicStyle@mlpretty
{%
  \basicFontSpecs@mlpretty%
  \color{textColor@mlpretty}%
}

\newcommand\lastElemStyle@mlpretty
{%
  \lastElemFontSpecs@mlpretty%
  \color{lastElemColor@mlpretty}%
}

\newcommand\keywordStyle@mlpretty
{%
  \keywordFontSpecs@mlpretty%
  \color{keywordColor@mlpretty}%
}

\newcommand\stringStyle@mlpretty
{%
  \global\InStr@mlpretty@true%
  \stringFontSpecs@mlpretty%
  \color{stringColor@mlpretty}%
}

\newcommand\commentStyle@mlpretty
{%
  \commentFontSpecs@mlpretty%
  \color{commentColor@mlpretty}%
}

\newcommand\sectionTitleStyle@mlpretty
{%
  \sectionTitleFontSpecs@mlpretty%
  \color{sectionTitleColor@mlpretty}%
}

\newcommand\syscomStyle@mlpretty
{%
  \syscomFontSpecs@mlpretty%
  \color{syscomColor@mlpretty}%
}

\newcommand\sharedvarStyle@mlpretty
{%
  \sharedvarFontSpecs@mlpretty%
  \color{sharedvarColor@mlpretty}%
}


% Macro for SelectCharTable key
\newcommand\SelectCharTable@mlpretty
{%
  \processOpenBracket@mlpretty{40}{\roundBktOp@mlpretty}%
  \processOpenBracket@mlpretty{91}{\squareBktOp@mlpretty}%
  \processOpenBracket@mlpretty{123}{\curlyBktOp@mlpretty}%
  \processCloseBracket@mlpretty{41}{\roundBktCl@mlpretty}%
  \processCloseBracket@mlpretty{93}{\squareBktCl@mlpretty}%
  \processCloseBracket@mlpretty{125}{\curlyBktCl@mlpretty}%
}


% --- macros for processing opening and closing brackets ---
\newcommand\processOpenBracket@mlpretty[2]
{%
  \lst@DefSaveDef{#1}#2%
  {%
    #2%
    \ifnum\lst@mode=\lst@Pmode\relax% if we're not inside a string or comment
      \global\ClosingEndKW@mlpretty@false%
      \global\advance\netBracketCount@mlpretty by \@ne%
    \fi%
  }%  
}

\newcommand\processCloseBracket@mlpretty[2]
{%
  \lst@DefSaveDef{#1}#2%
  {%
    #2%
    \ifnum\lst@mode=\lst@Pmode\relax% if we're not inside a string or comment
      \ifClosingEndKW@mlpretty@%    % If end is already a blue keyword... 
        \resetBracketCount@mlpretty % ... we can safely reset the count.
      \else%
        \global\advance\netBracketCount@mlpretty by \m@ne%
        \ifnum\netBracketCount@mlpretty>0%
        \else%
          \global\ClosingEndKW@mlpretty@true%
        \fi%
      \fi%
    \fi%
  }%  
}

% --- macros for processing keywords ---
\newcommand\processOpRegKW@mlpretty
{%
  \ifWithinSectionTitle@mlpretty@%
  \else%
    \resetEndKW@mlpretty%
    \global\advance\blkLvl@mlpretty\@ne%
    \keywordStyle@mlpretty%
  \fi%
}

\newcommand\processMidKW@mlpretty
{%
  \ifWithinSectionTitle@mlpretty@%
  \else%
    \resetEndKW@mlpretty%
    \keywordStyle@mlpretty%
  \fi%
}

% No difference between standalone keywords and middle keywords
\newcommand\processStdaKW@mlpretty\processMidKW@mlpretty

\newcommand\processClassdefKW@mlpretty
{%
  \ifWithinSectionTitle@mlpretty@%
    \keywordStyle@mlpretty%
  \else%
    \resetEndKW@mlpretty%
    \global\InClassdef@mlpretty@true%
    \global\blkLvlAtClassdef@mlpretty=\blkLvl@mlpretty%
    \global\advance\blkLvl@mlpretty\@ne%
    \keywordStyle@mlpretty%
  \fi%
}

\newcommand\processMidClassdefKW@mlpretty
{%
  %only for typesetting those as keywords in inline code
  \ifOverridecontext@mlpretty@% 
  \else%
    \ifWithinSectionTitle@mlpretty@%
    \else%
      \ifInClassdef@mlpretty@%
        \resetEndKW@mlpretty%
        \global\advance\blkLvl@mlpretty\@ne%
        \keywordStyle@mlpretty%
      \fi%
    \fi%
  \fi%
}

\newcommand\processEndKW@mlpretty
{%
  % only for typesetting those as ``last element'' in inline code
  \ifOverridecontext@mlpretty@% 
    \lastElemStyle@mlpretty%
  \else%
    \ifWithinSectionTitle@mlpretty@%
    \else%
      \ifClosingEndKW@mlpretty@%
        \ifInLineCom@mlpretty@%
        \else%
          \ifnum\blkLvl@mlpretty>0%
            \global\advance\blkLvl@mlpretty\m@ne%
          \fi%
          \ifnum\blkLvl@mlpretty=\blkLvlAtClassdef@mlpretty%
            \global\InClassdef@mlpretty@false%
          \fi%
          \keywordStyle@mlpretty%
        \fi%
      \else%
        \lastElemStyle@mlpretty%
      \fi%
    \fi%
  \fi%
}


% --- strings ---
\newcommand\processString@mlpretty
{%
  \ifWithinSectionTitle@mlpretty@%
  \else%
    \stringStyle@mlpretty%  
  \fi%
}

% --- macro for handling line continuation ---
\newcommand\processDotDotDot@mlpretty
{%
  \lst@CalcLostSpaceAndOutput%
  \ifWithinSectionTitle@mlpretty@%
    ...%
  \else%
    \ifInLineCom@mlpretty@%
      ...%
    \else%
      \global\InLineCom@mlpretty@true%
      {\keywordStyle@mlpretty...}%
    \fi%
    \commentStyle@mlpretty%
  \fi%
}

% --- macro for processing section title ---
\newlength\emHeight@mlpretty
\newlength\jayDepth@mlpretty
\newlength\sectionRuleOffset@mlpretty
\newlength\sectionRuleThickness@mlpretty
\newcommand\sectionRuleThicknessRatio@mlpretty{.05}

\newcommand\processSectionTitle@mlpretty
{%
  \ifWithinSectionTitle@mlpretty@% to avoid drawing the rule multiple times
  \else%
    \global\WithinSectionTitle@mlpretty@true%
    \resetEndKW@mlpretty%
    \commentStyle@mlpretty%
    \ifTooLateForSectionTitle@mlpretty@%
    \else%
      \bgroup%
        % calculate the vertical offset for the rule
        \setlength\emHeight@mlpretty{\fontcharht\font`M}%
        \setlength\jayDepth@mlpretty{\fontchardp\font`j}%
        \setlength\sectionRuleOffset@mlpretty%
        {%
          \dimexpr.5\emHeight@mlpretty%
                 +.5\baselineskip%
                 -.5\jayDepth@mlpretty\relax%
        }%
        \setlength\sectionRuleThickness@mlpretty%
        {%
          \sectionRuleThicknessRatio@mlpretty\baselineskip%
        }%
        \color{sectionRuleColor@mlpretty}%
        \ifShowCellrules@mlpretty@%
          \makebox[0em][l]%
          {%
            \raisebox{\sectionRuleOffset@mlpretty}[0pt][0pt]%
              {\rule{\lst@linewidth}{\sectionRuleThickness@mlpretty}}%
          }%
        \fi%
      \egroup%
      \sectionTitleStyle@mlpretty%
    \fi%
  \fi%
}

\newcommand\processSharedVar@mlpretty
{%
  \ifWithinSectionTitle@mlpretty@%
  \else%
      \sharedvarStyle@mlpretty%
  \fi%
}


% ----- Hooking into listings -----

% --- InitVarsEOL hook ---
\newcommand\addedToInitVarsEOL@mlpretty{} % polymorphic macro for InitVarsEOL
\newcommand\@ddedToInitVarsEOL@mlpretty
{%
  % at the start of a line, we're not inside a one-line comment
  \global\InLineCom@mlpretty@false%
  % This avoids continuation of unterminated string literals on next line.
  \ifInStr@mlpretty@%
    \global\InStr@mlpretty@false%
    \lst@LeaveMode%
  \fi%
  % we're not in a section title...
  \global\WithinSectionTitle@mlpretty@false%
  % ...but a section title is allowed to start here
  \global\TooLateForSectionTitle@mlpretty@false%
}
\lst@AddToHook{InitVarsEOL}{\addedToInitVarsEOL@mlpretty}

% --- EndGroup hook ---
\newcommand\addedToEndGroup@mlpretty{} % polymorphic macro for EndGroup
\newcommand\@ddedToEndGroup@mlpretty
{%
  % if we were inside a string, we're now getting out of it
  \ifInStr@mlpretty@%
    \global\InStr@mlpretty@false%
  \fi%
}
\lst@AddToHook{EndGroup}{\addedToEndGroup@mlpretty}

% --- PostOutput hook ---
\newcommand\addedToPostOutput@mlpretty{} % polymorphic macro for PostOuput
\newcommand\@ddedToPostOutput@mlpretty
{%
  % At the first PostOutput, it's too late for a section title to start.
  \global\TooLateForSectionTitle@mlpretty@true%
}
\lst@AddToHook{PostOutput}{\addedToPostOutput@mlpretty}

% --- PreInit Hook ---
% Now we apply all those patches at the PreInit hook,
% under the condition that \lst@language and \languageNormedDefd@mlpretty
% expand (once) to the same replacement text.
\newcommand\addedToPreInitHook
{%
  \ifx\lst@language\languageNormedDefd@mlpretty%
    \renewcommand\addedToInitVarsEOL@mlpretty\@ddedToInitVarsEOL@mlpretty%
    \renewcommand\addedToEndGroup@mlpretty\@ddedToEndGroup@mlpretty%
    \renewcommand\addedToPostOutput@mlpretty\@ddedToPostOutput@mlpretty%
  \fi%
}
\lst@AddToHook{PreInit}{\addedToPreInitHook}

% --- DeInit hook ---
% We reset counters apply at the DeInit hook,
% under the condition that \lst@language and \languageNormedDefd@mlpretty
% expand (once) to the same replacement text.
\newcommand\addedToDeInitHook
{%
  \ifx\lst@language\languageNormedDefd@mlpretty%
    \resetEndKW@mlpretty%
    \resetClassdefKW@mlpretty%
  \fi%
}
\lst@AddToHook{DeInit}{\addedToDeInitHook}


% --- Macros for placeholders ---

% Placeholder colors
\definecolor{placeholderColor@mlpretty}{RGB}{209,0,86}

% Macros for placeholder delimiters
\newcommand\placeholderOpDelim@mlpretty{\textlangle}
\newcommand\placeholderClDelim@mlpretty{\textrangle}
\newcommand\placeholderDelimFontSpecs@mlpretty{\normalfont\upshape}
\newcommand\placeholderContentFontSpecs@mlpretty{\normalfont\itshape}

\newcommand\placeholderStyle@mlpretty
{%
  \placeholderContentFontSpecs@mlpretty%
  \color{placeholderColor@mlpretty}%
}

% Macro for conditional italic correction
% (in case the font shape is either italic or slanted)
\newcommand*{\it@mlpretty}{it} 
\newcommand*{\sl@mlpretty}{sl}
\newcommand\condItalicCorrection@mlpretty
{%
  \ifx\f@shape\it@mlpretty%
    \/%
  \else%
    \ifx\f@shape\sl@mlpretty%
      \/%
    \fi%
  \fi%
}

% --- User macro for typesetting snippet placeholders ---
\newcommand\snippetPlaceholder[1]
{%
  \bgroup%
    \placeholderStyle@mlpretty%
    \bgroup%
      % opening delimiter
      \placeholderDelimFontSpecs@mlpretty%
      \placeholderOpDelim@mlpretty%
    \egroup%
    % placeholder content
    #1\condItalicCorrection@mlpretty%
    \bgroup%
      % closing delimiter
      \placeholderDelimFontSpecs@mlpretty%
      \placeholderClDelim@mlpretty%
    \egroup%
  \egroup%
}


% --- built-in matlab-prettifier styles ---

% Quick \& easy style, for those who don't want to bother with customization
\lstdefinestyle{Matlab-standard-style}
{
  language   = \languageNormedDefd@mlpretty,
  frame      = single,
  numbers    = left,
  breaklines = true,
}

% Black & white style
\lstdefinestyle{Matlab-bw-style}
{
  language            = \languageNormedDefd@mlpretty,
  mlkeywordstyle      = \color[gray]{0}             \bfseries        ,
  mlcommentstyle      = \color[gray]{.75}                    \itshape,
  mlstringstyle       = \color[gray]{.5}                             ,
  mlsyscomstyle       = \color[gray]{.25}                            ,
  mlsectiontitlestyle = \color[gray]{.75}           \bfseries\itshape,
  mlsharedvarstyle    = \color[gray]{0}                              ,
  mlplaceholderstyle  = \color[gray]{0}  \normalfont         \itshape,
  frame               = single,
  numbers             = left,
  breaklines          = true,
}

% Style very similar to that of the Pygments lexer called `MatlabLexer',
% (see http://pygments.org/docs/lexers/). This style basically mimics
% the output obtained with the minted, verbments, and pythontex packages.
\lstdefinestyle{Matlab-pygsty-style}
{
  language            = \languageNormedDefd@mlpretty,
  mllastelementstyle  = \color[RGB]{127,000,000}                            ,
  mlkeywordstyle      = \color[RGB]{000,127,000}           \bfseries        ,
  mlcommentstyle      = \color[RGB]{063,127,127}                    \itshape,
  mlstringstyle       = \color[RGB]{186,034,034}                            ,
  mlsyscomstyle       = \color[RGB]{000,127,000}                            ,
  mlsectiontitlestyle = \color[RGB]{063,127,127}                    \itshape,
  mlsharedvarstyle    = \color[RGB]{034,034,186}                            ,
  mlplaceholderstyle  = \color[RGB]{127,063,127}\normalfont         \itshape,
  frame               = single,
  numbers             = left,
  breaklines          = true,
}
%    \end{macrocode}
% \Finale
\endinput