%% matlab-prettifier.sty
%% Copyright 2014 Julien Cretel
%
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3
% of this license or (at your option) any later version.
% The latest version of this license is in
%   http://www.latex-project.org/lppl.txt
% and version 1.3 or later is part of all distributions of LaTeX
% version 2005/12/01 or later.
%
% This work has the LPPL maintenance status `maintained'.
% 
% The Current Maintainer of this work is Julien Cretel
%
% This work currently consists of the file matlab-prettifier.sty.

% --- Package identification ---
\newcommand\pkgName@mlpretty{matlab-prettifier}
\newcommand\pkgDate@mlpretty{2014/02/05}
\newcommand\pkgVer@mlpretty{.alpha}
\newcommand\pkgDesc@mlpretty{LaTeX package for typesetting Matlab listings}
\NeedsTeXFormat{LaTeX2e}
\ProvidesClass{\pkgName@mlpretty}
[%
	\pkgDate@mlpretty{}	v\pkgVer@mlpretty{} \pkgDesc@mlpretty%
]

% --- Discard any option passed to the package ---
\DeclareOption*%
{%
	\OptionNotUsed
	\PackageWarning{\pkgName@mlpretty}{Unknown `\CurrentOption' option}
}	

% --- Process options ---
\ProcessOptions\relax

% --- Package dependencies ---
\RequirePackage[T1]{fontenc}
\RequirePackage{lmodern}
\RequirePackage{textcomp}
\RequirePackage{etoolbox}
\RequirePackage{xcolor}
\RequirePackage{listings}

% --- Language definition (with a few dirty hacks) ---
\lstdefinelanguage{Matlab-pretty}
{%
	sensitive=true,% Matlab is case-sensitive.
	upquote=true,
	showstringspaces=false,
	%
	basicstyle=\basicStyle@mlpretty,
	%
	morekeywords=[257]% opening keywords unrelated to classdef
	{% 
		for,
		if,
		otherwise,
		parfor,
		spmd,
		switch,
		try,
		while,
	},
	keywordstyle=[257]\processOpRegKW@mlpretty,
	%
	morekeywords=[258]% `middle' keywords unrelated to classdef
	{%
		break,
		case,
		catch,
		continue,
		else,
		elseif,
		function,
		return,
	}, 
	keywordstyle=[258]\processMidKW@mlpretty,
	%
	morekeywords=[259]% `standalone' keywords
	{%
		global,
		persistent,
	}, 
	keywordstyle=[259]\processStdaKW@mlpretty,
	%
	morekeywords=[260]{classdef},	
	keywordstyle=[260]\processClDefKW@mlpretty,
	%
	morekeywords=[261]% `middle' keywords related to classdef
	{%
		enumeration,
		events,
		methods,
		properties,
	},
	keywordstyle=[261]\processMidClDefKW@mlpretty,
	% 
	morekeywords=[262]{end},
	keywordstyle=[262]\processEndKW@mlpretty,
	%
	literate=%
		{(}{{\processOpBrkt@mlpretty(}}1
		{[}{{\processOpBrkt@mlpretty[}}1
		{\{}{{\processOpBrkt@mlpretty\{}}1
		{)}{{\processClBrkt@mlpretty)}}1
		{]}{{\processClBrkt@mlpretty]}}1
		{\}}{{\processClBrkt@mlpretty\}}}1
		{)'}{{\processClBrkt@mlpretty)}{\textquotesingle}}2
		{]'}{{\processClBrkt@mlpretty]}{\textquotesingle}}2
		{\}'}{{\processClBrkt@mlpretty\}}{\textquotesingle}}2
		{~}{{\tilde@mlpretty}}1,
	%
	% strings
	morestring=[m]',
	stringstyle=\stringStyle@mlpretty,
	%
	% comments
	morecomment=[l]\%, 																	% to-end-of-line comments
	morecomment=[s]{\%\{\^^M}{\%\}\^^M},								% multiline comments
	moredelim=**[il][\processDotDotDot@mlpretty]{...},	% line-continuation token
	commentstyle=\commentStyle@mlpretty,
	%
	% system commands
	moredelim=[l][\syscomStyle@mlpretty]{!},
}%
[% `listings' aspects needed
	keywords,
	strings,
	comments,
]


% --- State variables ---

\newcounter{opBktCount@mlpretty} 		 % running count of (, [ and, { 
\newcounter{clBktCount@mlpretty} 		 % running count of ), ] and, }
\newcounter{blkLvl@mlpretty}				 % block nesting level
\newcounter{blkLvlAtClDef@mlpretty}	 % block nesting level at last classdef

\newif\ifclosingEndKW@mlpretty@\closingEndKW@mlpretty@true
\newif\ifinClDef@mlpretty@\inClDef@mlpretty@false
\newif\ifinStr@mlpretty@\inStr@mlpretty@false
\newif\ifinLineCom@mlpretty@\inLineCom@mlpretty@false


% --- Macros for resetting counters and switches ---
\newcommand\resetBktCount@mlpretty%
{%
	\setcounter{opBktCount@mlpretty}{0}%
	\setcounter{clBktCount@mlpretty}{0}%
}

\newcommand\resetEndKW@mlpretty%
{%
	\global\closingEndKW@mlpretty@true%
	\resetBktCount@mlpretty%
}

\newcommand\resetClDef@mlpretty%
{%
	\global\inClDef@mlpretty@false
	\setcounter{blkLvl@mlpretty}{0}
	\setcounter{blkLvlAtClDef@mlpretty}{0}
}


% --- internal style macros ---

% Font shape and size
\newcommand\basicShapeSize@mlpretty{\ttfamily\normalsize}
\newcommand\keywordShapeSize@mlpretty\basicShapeSize@mlpretty
\newcommand\stringShapeSize@mlpretty\basicShapeSize@mlpretty
\newcommand\commentShapeSize@mlpretty\basicShapeSize@mlpretty

% Matlab syntax highlighting colors
\colorlet{textColor@mlpretty}{black}                       % text color
\definecolor{keywordColor@mlpretty}{RGB}{000,000,255}      % keywords
\definecolor{stringColor@mlpretty}{RGB}{160,032,240}       % strings
\definecolor{syscomColor@mlpretty}{RGB}{178,140,000}       % system commands
\definecolor{commentColor@mlpretty}{RGB}{034,139,034}      % comments

% Additional colors (currently unused by matlab-prettifier)
\colorlet{bgColor@mlpretty}{white}		                      % background color
\definecolor{untermStringColor@mlpretty}{RGB}{178,000,000} % unterm. strings
\definecolor{syntaxErrorColor@mlpretty}{RGB}{255,000,000}  % Syntax errors

\newcommand\basicStyle@mlpretty%
{%
  \basicShapeSize@mlpretty%
  \color{textColor@mlpretty}%
}

\newcommand\keywordStyle@mlpretty%
{%
  \keywordShapeSize@mlpretty%
  \color{keywordColor@mlpretty}%
}

\newcommand\stringStyle@mlpretty%
{%
  \global\inStr@mlpretty@true%
  \stringShapeSize@mlpretty%
  \color{stringColor@mlpretty}%
}

\newcommand\commentStyle@mlpretty%
{%
  \commentShapeSize@mlpretty%
  \color{commentColor@mlpretty}%
}

\newcommand\syscomStyle@mlpretty%
{%
  \commentShapeSize@mlpretty%
  \color{syscomColor@mlpretty}%
}


% --- macros for processing keywords ---
\newcommand\processOpRegKW@mlpretty%
{%
	\resetEndKW@mlpretty%
	\stepcounter{blkLvl@mlpretty}%
	\keywordStyle@mlpretty%
}

\newcommand\processMidKW@mlpretty%
{%
	\resetEndKW@mlpretty%
	\keywordStyle@mlpretty%
}

\newcommand\processStdaKW@mlpretty%
{%
	\resetEndKW@mlpretty%
	\keywordStyle@mlpretty%
}

\newcommand\processClDefKW@mlpretty%
{%
	\resetEndKW@mlpretty%
	\global\inClDef@mlpretty@true%
	\setcounter{blkLvlAtClDef@mlpretty}{\value{blkLvl@mlpretty}}%
	\stepcounter{blkLvl@mlpretty}%
	\keywordStyle@mlpretty%
}

\newcommand\processMidClDefKW@mlpretty
{%
	\ifinClDef@mlpretty@%
		\resetEndKW@mlpretty%
		\addtocounter{blkLvl@mlpretty}{1}%
		\keywordStyle@mlpretty%
	\fi%
}

\newcommand\processEndKW@mlpretty%
{%	
	\ifclosingEndKW@mlpretty@%
		\ifinLineCom@mlpretty@%
		\else%
			\ifnum\value{blkLvl@mlpretty}>0%
				\addtocounter{blkLvl@mlpretty}{-1}%
			\fi%
			\ifnum\value{blkLvl@mlpretty}=\value{blkLvlAtClDef@mlpretty}%
				\global\inClDef@mlpretty@false%
			\fi%
			\keywordStyle@mlpretty%
		\fi%
	\fi%
}


% --- macros for processing opening and closing brackets ---
\newcommand\processOpBrkt@mlpretty%
{%
	\ifclosingEndKW@mlpretty@%
		\global\closingEndKW@mlpretty@false%
	\fi%
	\stepcounter{opBktCount@mlpretty}%
}

\newcommand\processClBrkt@mlpretty%
{%
	\ifclosingEndKW@mlpretty@%
		\resetBktCount@mlpretty%
	\else%
		\stepcounter{clBktCount@mlpretty}%
		\ifnum\value{clBktCount@mlpretty}<\value{opBktCount@mlpretty}%
		\else%
			\global\closingEndKW@mlpretty@true%
		\fi%
	\fi%
}

% Patch to make literate replacement of ) work as expected when breaklines
% is set to true. Find a way to undo that patch for non-Matlab listings
\newcommand\patchSelectCharTable@mlpretty%
{%
	\patchcmd{\lsthk@SelectCharTable}{)}{`}{}{}%
}
\patchSelectCharTable@mlpretty


% --- macro for literate replacement of tilde character ---
\newcommand\tilde@mlpretty{\raisebox{0.5ex}\texttildelow}


% --- macros for handling unterminated string literal ---
\newcommand\addedToEOLHookUntermStr@mlpretty
{%
	\ifinStr@mlpretty@%
		\global\inStr@mlpretty@false%
		\lst@LeaveMode%
	\fi%
}

\newcommand\addedToEndGroupHookUntermStr@mlpretty
{%
	\ifinStr@mlpretty@%
		\global\inStr@mlpretty@false%
	\fi%
}

% --- macros for handling line continuation ---
\newcommand\processDotDotDot@mlpretty
{%
	\lst@CalcLostSpaceAndOutput%
	\ifinLineCom@mlpretty@%
		...%
	\else%
		\global\inLineCom@mlpretty@true%
		{\keywordStyle@mlpretty...}%
	\fi%
	\commentStyle@mlpretty%
}

\newcommand\addedToEOLHookDotDotDot@mlpretty
{%
	\global\inLineCom@mlpretty@false%
}


% --- Macros for adding to listings hooks ---
% EOL hook
\newcommand\addedToEOL@mlpretty{}
\newcommand\@ddedToEOL@mlpretty%
{%
	\addedToEOLHookDotDotDot@mlpretty%
	\addedToEOLHookUntermStr@mlpretty%
}
\lst@AddToHook{EOL}{\addedToEOL@mlpretty}

% EndGroup hook
\newcommand\addedToEndGroup@mlpretty{}
\newcommand\@ddedToEndGroup@mlpretty%
{%
	\addedToEndGroupHookUntermStr@mlpretty%
}
\lst@AddToHook{EndGroup}{\addedToEndGroup@mlpretty}


% --- Placeholders ---

% Placeholder colors
\definecolor{placeholderDelimColor@mlpretty}{RGB}{209,0,86}
\definecolor{placeholderContentColor@mlpretty}{RGB}{209,0,86}

% Macros for placeholder delimiters
\newcommand\placeholderOpDelim@mlpretty{\textlangle}
\newcommand\placeholderClDelim@mlpretty{\textrangle}
\newcommand\placeholderDelimStyle@mlpretty{\normalfont\upshape}
\newcommand\placeholderContentStyle@mlpretty{\normalfont\itshape}

% Macro for conditional italic correction
\newcommand\itCorr@mlpretty
{%
	\ifdefstring{\f@shape}{sl}
		{\/}
		{%
			\ifdefstring{\f@shape}{it}
			{\/}
			{}%
		}%
}


% --- User macro for typesetting snippet placeholders ---
\newcommand\snippetPlaceholder[1]
{%
	{%
		% opening delimiter
		\placeholderDelimStyle@mlpretty%
		\color{placeholderDelimColor@mlpretty}%
		\placeholderOpDelim@mlpretty%
	}{%
		% placeholder content
		\placeholderContentStyle@mlpretty%
		\color{placeholderContentColor@mlpretty}%
		#1\itCorr@mlpretty%
	}{%
		% closing delimiter
		\placeholderDelimStyle@mlpretty%
		\color{placeholderDelimColor@mlpretty}%
		\placeholderClDelim@mlpretty%
	}%
}


% ----------- key=value interface ---

% keys
\define@key{mlpretty}{basicstyle}{\def\basicStyle@mlpretty{#1}}
\define@key{mlpretty}{keywordstyle}{\def\keywordStyle@mlpretty{#1}}
\define@key{mlpretty}{stringstyle}{\def\stringStyle@mlpretty{#1}}
\define@key{mlpretty}{commentstyle}{\def\commentStyle@mlpretty{#1}}

% define \mlprettyset, the matlab-prettifier equivalent to listings' \lstset
\lst@UserCommand\mlprettyset{\begingroup \lst@setcatcodes \mlprettyset@}
\def\mlprettyset@#1%
{%
	\endgroup
	\ifx\@empty#1%
		\@empty%
	\else%
		\setkeys{lst}{language=Matlab-pretty}%
		\setkeys{mlpretty}{#1}%
	\fi%
}


% --- matlab-prettifier listings environment and macro ---

\newcommand\atBeginCode@mlpretty[1][]%
{%
	\renewcommand\addedToEOL@mlpretty\@ddedToEOL@mlpretty%
	\renewcommand\addedToEndGroup@mlpretty\@ddedToEndGroup@mlpretty%
	\lstset{language = Matlab-pretty,#1}% %TODO replace by my own macro
}

\newcommand\atEndCode@mlpretty%
{%
	\renewcommand\addedToEOL@mlpretty{}%
	\renewcommand\addedToEndGroup@mlpretty{}%
	\resetEndKW@mlpretty%
	\resetClDef@mlpretty%
}

\lstnewenvironment{matlablisting}[1][]%
	{\atBeginCode@mlpretty[#1]}
	{\atEndCode@mlpretty}

\newcommand\inputmatlablisting[2][]%
{%
	{%
		\atBeginCode@mlpretty[#1]%
		\lstinputlisting{#2}%
		\atEndCode@mlpretty%
	}%
}

\endinput