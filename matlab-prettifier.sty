%% matlab-prettifier.sty
% Copyright (C) 2014 by Julien Cretel <jubobs.matlab.prettifier at gmail.com>
%
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3
% of this license or (at your option) any later version.
% The latest version of this license is in
%
%     http://www.latex-project.org/lppl.txt
%
% and version 1.3 or later is part of all distributions of LaTeX
% version 2005/12/01 or later.
%
% This work has the LPPL maintenance status `maintained'.
% 
% The Current Maintainer of this work is Julien Cretel.
%
% This work currently consists of the files matlab-prettifier.dtx,
% matlab-prettifier.ins, and the derived file matlab-prettifier.sty.

% --- Package identification ---
\NeedsTeXFormat{LaTeX2e}[2011/06/27]
\ProvidesPackage{matlab-prettifier}%
 [2014/02/21 v0.1 LaTeX package for prettyprinting Matlab source code]


% --- check for incompatible listings options ---
\newcommand\checkForListingsOption@mlpretty[1]
{%
  \@ifpackagewith{listings}{#1}%
  {
	  \PackageError{matlab-prettifier}%
	    {incompatible listings' option #1}%
	    {Make sure the `listings' package doesn't get loaded with option `#1'}
  }{}
}

\checkForListingsOption@mlpretty{noaspects}
\checkForListingsOption@mlpretty{0.21}
\checkForListingsOption@mlpretty{savemem}


% --- Discard any option passed to the package ---
\DeclareOption*%
{%
  \OptionNotUsed
  \PackageWarning{\pkgName@mlpretty}{Unknown `\CurrentOption' option}
}  

% --- Process options ---
\ProcessOptions\relax

% --- Package dependencies ---
\RequirePackage{textcomp}[2005/09/27]
\RequirePackage{xcolor}[2007/01/21]
\RequirePackage{listings}[2013/08/26]


% ----------- key=value interface ---
% Before we can define the language, we define additional keys

% we create a new ``keyword'' class for variables with shared scope
% by using the very convenient internal listings macro \lst@InstallKeywords
\gdef\InstallKeywords@mlpretty#1#2#3#4#5%
{%
  \lst@Key{ml#2}\relax
    {\lst@UseFamily{#2}[\@ne]##1\relax\lst@MakeKeywords}%
  \lst@Key{mlmore#2}\relax
    {\lst@UseFamily{#2}[\@ne]##1\relax\lst@MakeMoreKeywords}%
  \lst@Key{mldelete#2}\relax
    {\lst@UseFamily{#2}[\@ne]##1\relax\lst@DeleteKeywords}%
  \ifx\@empty#3\@empty\else
     \lst@Key{#3}{#4}{\@namedef{lst@#3}{##1}}%
  \fi
  \expandafter\lst@InstallFamily@
     \csname\@lst @#2@data\expandafter\endcsname
     \csname\@lst @#5\endcsname {#1}{#2}{#3}
}

\InstallKeywords@mlpretty k{sharedvars}{mlsharedvarStyle@mlpretty}\relax%
  {mlsharedvarStyle@mlpretty}{}ld

\lst@Key{mlkeywordstyle}\relax{\renewcommand\keywordStyle@mlpretty{#1}}
\lst@Key{mllastelementstyle}\relax{\renewcommand\lastElemStyle@mlpretty{#1}}
\lst@Key{mlstringstyle}\relax{\renewcommand\stringStyle@mlpretty{#1}}
\lst@Key{mlcommentstyle}\relax{\renewcommand\commentStyle@mlpretty{#1}}
\lst@Key{mlsectionrulethickness}\relax%
  {\renewcommand\sectionRuleThicknessRatio@mlpretty{#1}}
\lst@Key{mlsectionrulecolor}\relax%
  {\colorlet{sectionRuleColor@mlpretty}{#1}}
\lst@Key{mlshowsectionrules}{false}[t]%
  {\lstKV@SetIf{#1}\ifShowCellrules@mlpretty@}
\lst@Key{mlsectiontitlestyle}\relax
  {\renewcommand\sectionTitleStyle@mlpretty{#1}}
\lst@Key{mloverride}{false}[t]%
  {\lstKV@SetIf{#1}\ifOverridecontext@mlpretty@}
\lst@Key{mlsyscomstyle}\relax{\renewcommand\syscomStyle@mlpretty{#1}}
\lst@Key{mlsharedvarstyle}\relax{\renewcommand\sharedvarStyle@mlpretty{#1}}
\lst@Key{mlunquotedstringdelim}\relax%
  {\lst@DelimKey\relax{[is][\stringStyle@mlpretty]{#1}}}
\lst@Key{mlplaceholderstyle}\relax%
 {\renewcommand\placeholderStyle@mlpretty{#1}}


% --- Language definition ---
\newcommand\language@mlpretty{Matlab-pretty}
% ``normalised'' language name (listings lowercases language name internally)
% Note: in \foo\bar{\baz}, to expand \baz once before anything else,
% write \ex\foo\ex\bar\ex{\baz} (where \let\ex=\expandafter)
\expandafter\lst@NormedDef\expandafter\languageNormedDefd@mlpretty%
  \expandafter{\language@mlpretty}

\expandafter\expandafter\expandafter\lstdefinelanguage\expandafter%
{\language@mlpretty}
{
  MoreSelectCharTable=\SelectCharTable@mlpretty,
  alsoother={\$@}, % chars not valid in identifiers
  sensitive=true,% Matlab is case-sensitive.
  upquote=true,
  showstringspaces=false,
  rulecolor=\color{black}, % prevents listings bug (nonuniform rule color)
  %
  basicstyle=\basicStyle@mlpretty,
  %
  morekeywords=[257]% opening keywords unrelated to classdef
  {% 
    for,
    if,
    otherwise,
    parfor,
    spmd,
    switch,
    try,
    while,
  },
  keywordstyle=[257]\processOpRegKW@mlpretty,
  %
  morekeywords=[258]% `middle' keywords unrelated to classdef
  {%
    break,
    case,
    catch,
    continue,
    else,
    elseif,
    function,
    return,
  }, 
  keywordstyle=[258]\processMidKW@mlpretty,
  %
  morekeywords=[259]% `standalone' keywords
  {%
    global,
    persistent,
  }, 
  keywordstyle=[259]\processStdaKW@mlpretty,
  %
  morekeywords=[260]{classdef},  
  keywordstyle=[260]\processClassdefKW@mlpretty,
  %
  morekeywords=[261]% `middle' keywords related to classdef
  {%
    enumeration,
    events,
    methods,
    properties,
  },
  keywordstyle=[261]\processMidClassdefKW@mlpretty,
  % 
  morekeywords=[262]{end},
  keywordstyle=[262]\processEndKW@mlpretty,
  %
  % strings
  morestring=[m]',
  stringstyle=\processString@mlpretty,
  %
  % comments
  morecomment=[l]\%,                                       % to-end-of-line
  morecomment=[n]{\%\{\^^M}{\%\}\^^M},                     % block
  moredelim=**[il][\processDotDotDot@mlpretty]{...},       % line continuation
  moredelim=**[l][\processSectionTitle@mlpretty]{\%\%},    % code section
  moredelim=**[l][\processSectionTitle@mlpretty]{\%\%\ },  % code section
  commentstyle=\commentStyle@mlpretty,
  %
  % system commands
  moredelim=[l][\syscomStyle@mlpretty]{!},
  %
  % variables with shared scope
  mlsharedvarStyle@mlpretty = \processSharedVar@mlpretty,
}
[% `listings' aspects needed
  keywords,
  strings,
  comments,
]



% --- State variables ---
% Counters and switches used as ``state variables''
% (used to keep track of context)
\newcount\netBracketCount@mlpretty  % net running count of brackets
                                    % ([{ count for +1, )]} count for -1 
\newcount\blkLvl@mlpretty             % block nesting level
\newcount\blkLvlAtClassdef@mlpretty     % block nesting level at last classdef

\newif\ifClosingEndKW@mlpretty@            \ClosingEndKW@mlpretty@true
\newif\ifInClassdef@mlpretty@                      \InClassdef@mlpretty@false
\newif\ifInStr@mlpretty@                          \InStr@mlpretty@false
\newif\ifInLineCom@mlpretty@                  \InLineCom@mlpretty@false
\newif\ifTooLateForSectionTitle@mlpretty@%
                                 \TooLateForSectionTitle@mlpretty@false
\newif\ifWithinSectionTitle@mlpretty@\WithinSectionTitle@mlpretty@false


% --- Macros for resetting counters and switches ---
\newcommand\resetBracketCount@mlpretty{\global\netBracketCount@mlpretty=0}

\newcommand\resetEndKW@mlpretty
{%
  \global\ClosingEndKW@mlpretty@true%
  \resetBracketCount@mlpretty%
}

\newcommand\resetClassdefKW@mlpretty
{%
  \global\InClassdef@mlpretty@false%
  \global\blkLvl@mlpretty=0%
  \global\blkLvlAtClassdef@mlpretty=0%
}


% --- internal style macros ---

% Font family, series, shape, and size (color is defined separately)
\newcommand\basicFontSpecs@mlpretty
{%
  \ttfamily%
  \lst@ifdisplaystyle%
    \normalsize%
  \fi
}
\newcommand\keywordFontSpecs@mlpretty{}
\newcommand\lastElemFontSpecs@mlpretty{}
\newcommand\stringFontSpecs@mlpretty{}
\newcommand\commentFontSpecs@mlpretty{}
\newcommand\sectionTitleFontSpecs@mlpretty
  {\commentFontSpecs@mlpretty\bfseries}
\newcommand\syscomFontSpecs@mlpretty{}
\newcommand\sharedvarFontSpecs@mlpretty{}

% Matlab syntax highlighting colors
\colorlet{textColor@mlpretty}{black}                      % text
\colorlet{lastElemColor@mlpretty}{textColor@mlpretty}     % end
\definecolor{keywordColor@mlpretty}{RGB}{000,000,255}     % keywords
\definecolor{stringColor@mlpretty}{RGB}{160,032,240}      % strings
\definecolor{commentColor@mlpretty}{RGB}{034,139,034}     % comments
\definecolor{sectionTitleColor@mlpretty}{RGB}{034,139,034}% section titles
\colorlet{sectionRuleColor@mlpretty}{black!15}            % code-section rule
\definecolor{syscomColor@mlpretty}{RGB}{178,140,000}      % system commands
\definecolor{sharedvarColor@mlpretty}{RGB}{000,163,163}   % shared scope

% More Matlab colors (currently not used by matlab-prettifier)
\colorlet{bgColor@mlpretty}{white}                        % background color
\definecolor{untermStringColor@mlpretty}{RGB}{178,000,000}% unterm. strings
\definecolor{syntaxErrorColor@mlpretty}{RGB}{255,000,000} % Syntax errors

% Additional custom colors
\colorlet{numbersColor@matlabpretty}{gray}

\newcommand\basicStyle@mlpretty
{%
  \basicFontSpecs@mlpretty%
  \color{textColor@mlpretty}%
}

\newcommand\lastElemStyle@mlpretty
{%
  \lastElemFontSpecs@mlpretty%
  \color{lastElemColor@mlpretty}%
}

\newcommand\keywordStyle@mlpretty
{%
  \keywordFontSpecs@mlpretty%
  \color{keywordColor@mlpretty}%
}

\newcommand\stringStyle@mlpretty
{%
  \global\InStr@mlpretty@true%
  \stringFontSpecs@mlpretty%
  \color{stringColor@mlpretty}%
}

\newcommand\commentStyle@mlpretty
{%
  \commentFontSpecs@mlpretty%
  \color{commentColor@mlpretty}%
}

\newcommand\sectionTitleStyle@mlpretty
{%
  \sectionTitleFontSpecs@mlpretty%
  \color{sectionTitleColor@mlpretty}%
}

\newcommand\syscomStyle@mlpretty
{%
  \syscomFontSpecs@mlpretty%
  \color{syscomColor@mlpretty}%
}

\newcommand\sharedvarStyle@mlpretty
{%
  \sharedvarFontSpecs@mlpretty%
  \color{sharedvarColor@mlpretty}%
}


% Macro for SelectCharTable key
\newcommand\SelectCharTable@mlpretty
{%
  \processOpenBracket@mlpretty{40}{\roundBktOp@mlpretty}%
  \processOpenBracket@mlpretty{91}{\squareBktOp@mlpretty}%
  \processOpenBracket@mlpretty{123}{\curlyBktOp@mlpretty}%
  \processCloseBracket@mlpretty{41}{\roundBktCl@mlpretty}%
  \processCloseBracket@mlpretty{93}{\squareBktCl@mlpretty}%
  \processCloseBracket@mlpretty{125}{\curlyBktCl@mlpretty}%
}


% --- macros for processing opening and closing brackets ---
\newcommand\processOpenBracket@mlpretty[2]
{%
  \lst@DefSaveDef{#1}#2%
  {%
    #2%
    \ifnum\lst@mode=\lst@Pmode\relax% if we're not inside a string or comment
      \global\ClosingEndKW@mlpretty@false%
      \global\advance\netBracketCount@mlpretty by \@ne%
    \fi
  }%  
}

\newcommand\processCloseBracket@mlpretty[2]
{%
  \lst@DefSaveDef{#1}#2%
  {%
    #2%
    \ifnum\lst@mode=\lst@Pmode\relax% if we're not inside a string or comment
      \ifClosingEndKW@mlpretty@%    % If end is already a blue keyword... 
        \resetBracketCount@mlpretty % ... we can safely reset the count.
      \else
        \global\advance\netBracketCount@mlpretty by \m@ne%
        \ifnum\netBracketCount@mlpretty>0%
        \else
          \global\ClosingEndKW@mlpretty@true%
        \fi
      \fi
    \fi
  }%  
}

% --- macros for processing keywords ---
\newcommand\processOpRegKW@mlpretty
{%
  \ifWithinSectionTitle@mlpretty@%
  \else
    \resetEndKW@mlpretty%
    \global\advance\blkLvl@mlpretty\@ne%
    \keywordStyle@mlpretty%
  \fi
}

\newcommand\processMidKW@mlpretty
{%
  \ifWithinSectionTitle@mlpretty@%
  \else
    \resetEndKW@mlpretty%
    \keywordStyle@mlpretty%
  \fi
}

% No difference between standalone keywords and middle keywords
\newcommand\processStdaKW@mlpretty\processMidKW@mlpretty

\newcommand\processClassdefKW@mlpretty
{%
  \ifWithinSectionTitle@mlpretty@%
  \else
    \resetEndKW@mlpretty%
    \global\InClassdef@mlpretty@true%
    \global\blkLvlAtClassdef@mlpretty=\blkLvl@mlpretty%
    \global\advance\blkLvl@mlpretty\@ne%
    \keywordStyle@mlpretty%
  \fi
}

\newcommand\processMidClassdefKW@mlpretty
{%
  %only for typesetting those as keywords in inline code
  \ifOverridecontext@mlpretty@%
    \keywordStyle@mlpretty%
  \else
    \ifWithinSectionTitle@mlpretty@%
    \else
      \ifInClassdef@mlpretty@%
        \resetEndKW@mlpretty%
        \global\advance\blkLvl@mlpretty\@ne%
        \keywordStyle@mlpretty%
      \fi
    \fi
  \fi
}

\newcommand\processEndKW@mlpretty
{%
  % only for typesetting those as ``last element'' in inline code
  \ifOverridecontext@mlpretty@% 
    \lastElemStyle@mlpretty%
  \else
    \ifWithinSectionTitle@mlpretty@%
    \else
      \ifClosingEndKW@mlpretty@%
        \ifInLineCom@mlpretty@%
        \else
          \ifnum\blkLvl@mlpretty>0%
            \global\advance\blkLvl@mlpretty\m@ne%
          \fi
          \ifnum\blkLvl@mlpretty=\blkLvlAtClassdef@mlpretty%
            \global\InClassdef@mlpretty@false%
          \fi
          \keywordStyle@mlpretty%
        \fi
      \else
        \lastElemStyle@mlpretty%
      \fi
    \fi
  \fi
}


% --- strings ---
\newcommand\processString@mlpretty
{%
  \ifWithinSectionTitle@mlpretty@%
  \else
    \stringStyle@mlpretty%  
  \fi
}

% --- macro for handling line continuation ---
\newcommand\processDotDotDot@mlpretty
{%
  \lst@CalcLostSpaceAndOutput%
  \ifWithinSectionTitle@mlpretty@%
    ...%
  \else
    \ifInLineCom@mlpretty@%
      ...%
    \else
      \global\InLineCom@mlpretty@true%
      {\keywordStyle@mlpretty...}%
    \fi
    \commentStyle@mlpretty%
  \fi
}

% --- macro for processing section title ---
\newlength\emHeight@mlpretty
\newlength\jayDepth@mlpretty
\newlength\sectionRuleOffset@mlpretty
\newlength\sectionRuleThickness@mlpretty
\newcommand\sectionRuleThicknessRatio@mlpretty{.05}

\newcommand\processSectionTitle@mlpretty
{%
  \ifWithinSectionTitle@mlpretty@% to avoid drawing the rule multiple times
  \else
    \global\WithinSectionTitle@mlpretty@true%
    \resetEndKW@mlpretty%
    \commentStyle@mlpretty%
    \ifTooLateForSectionTitle@mlpretty@%
    \else
      \bgroup%
        % calculate the vertical offset for the rule
        \setlength\emHeight@mlpretty{\fontcharht\font`M}%
        \setlength\jayDepth@mlpretty{\fontchardp\font`j}%
        \setlength\sectionRuleOffset@mlpretty%
        {%
          \dimexpr.5\emHeight@mlpretty%
                 +.5\baselineskip%
                 -.5\jayDepth@mlpretty\relax%
        }%
        \setlength\sectionRuleThickness@mlpretty%
        {%
          \sectionRuleThicknessRatio@mlpretty\baselineskip%
        }%
        \color{sectionRuleColor@mlpretty}%
        \ifShowCellrules@mlpretty@%
          \makebox[0em][l]%
          {%
            \raisebox{\sectionRuleOffset@mlpretty}[0pt][0pt]%
              {\rule{\lst@linewidth}{\sectionRuleThickness@mlpretty}}%
          }%
        \fi
      \egroup%
      \sectionTitleStyle@mlpretty%
    \fi
  \fi
}

\newcommand\processSharedVar@mlpretty
{%
  \ifWithinSectionTitle@mlpretty@%
  \else
      \sharedvarStyle@mlpretty%
  \fi
}


% ----- Hooking into listings -----

% --- InitVarsEOL hook ---
\newcommand\addedToInitVarsEOL@mlpretty{} % polymorphic macro for InitVarsEOL
\newcommand\@ddedToInitVarsEOL@mlpretty
{%
  % at the start of a line, we're not inside a one-line comment
  \global\InLineCom@mlpretty@false%
  % This avoids continuation of unterminated string literals on next line.
  \ifInStr@mlpretty@%
    \global\InStr@mlpretty@false%
    \lst@LeaveMode%
  \fi
  % we're not in a section title...
  \global\WithinSectionTitle@mlpretty@false%
  % ...but a section title is allowed to start here
  \global\TooLateForSectionTitle@mlpretty@false%
}
\lst@AddToHook{InitVarsEOL}{\addedToInitVarsEOL@mlpretty}

% --- EndGroup hook ---
\newcommand\addedToEndGroup@mlpretty{} % polymorphic macro for EndGroup
\newcommand\@ddedToEndGroup@mlpretty
{%
  % if we were inside a string, we're now getting out of it
  \ifInStr@mlpretty@%
    \global\InStr@mlpretty@false%
  \fi
}
\lst@AddToHook{EndGroup}{\addedToEndGroup@mlpretty}

% --- PostOutput hook ---
\newcommand\addedToPostOutput@mlpretty{} % polymorphic macro for PostOuput
\newcommand\@ddedToPostOutput@mlpretty
{%
  % At the first PostOutput, it's too late for a section title to start.
  \global\TooLateForSectionTitle@mlpretty@true%
}
\lst@AddToHook{PostOutput}{\addedToPostOutput@mlpretty}

% --- PreInit Hook ---
% Now we apply all those patches at the PreInit hook,
% under the condition that \lst@language and \languageNormedDefd@mlpretty
% expand (once) to the same replacement text.
\newcommand\addedToPreInitHook
{%
  \ifx\lst@language\languageNormedDefd@mlpretty%
    \renewcommand\addedToInitVarsEOL@mlpretty\@ddedToInitVarsEOL@mlpretty%
    \renewcommand\addedToEndGroup@mlpretty\@ddedToEndGroup@mlpretty%
    \renewcommand\addedToPostOutput@mlpretty\@ddedToPostOutput@mlpretty%
  \fi
}
\lst@AddToHook{PreInit}{\addedToPreInitHook}

% --- DeInit hook ---
% We reset counters apply at the DeInit hook,
% under the condition that \lst@language and \languageNormedDefd@mlpretty
% expand (once) to the same replacement text.
\newcommand\addedToDeInitHook
{%
  \ifx\lst@language\languageNormedDefd@mlpretty%
    \resetEndKW@mlpretty%
    \resetClassdefKW@mlpretty%
  \fi
}
\lst@AddToHook{DeInit}{\addedToDeInitHook}


% --- Macros for placeholders ---

% Placeholder colors
\definecolor{placeholderColor@mlpretty}{RGB}{209,0,86}

% Macros for placeholder delimiters
\newcommand\placeholderOpDelim@mlpretty{\textlangle}
\newcommand\placeholderClDelim@mlpretty{\textrangle}
\newcommand\placeholderDelimFontSpecs@mlpretty{\normalfont\upshape}
\newcommand\placeholderContentFontSpecs@mlpretty{\normalfont\itshape}

\newcommand\placeholderStyle@mlpretty
{%
  \placeholderContentFontSpecs@mlpretty%
  \color{placeholderColor@mlpretty}%
}

% Macro for conditional italic correction
% (in case the font shape is either italic or slanted)
\newcommand\condItalicCorrection@mlpretty
{%
  % After checking that \long@f@shape@mlpretty is definable, we
  % define it as a long macro that expands to the current font shape.
  \newcommand\long@f@shape@mlpretty{}%
  \long\edef\long@f@shape@mlpretty{\f@shape}%
  \ifx\long@f@shape@mlpretty\itdefault%
    \/%
  \else
    \ifx\long@f@shape@mlpretty\sldefault%
      \/%
    \fi
  \fi
}

% --- User macro for typesetting snippet placeholders ---
\newcommand\snippetPlaceholder[1]
{%
  \bgroup%
    \placeholderStyle@mlpretty%
    \bgroup%
      % opening delimiter
      \placeholderDelimFontSpecs@mlpretty%
      \placeholderOpDelim@mlpretty%
    \egroup%
    % placeholder content
    #1\condItalicCorrection@mlpretty%
    \bgroup%
      % closing delimiter
      \placeholderDelimFontSpecs@mlpretty%
      \placeholderClDelim@mlpretty%
    \egroup%
  \egroup%
}


% --- built-in matlab-prettifier styles ---

% Quick \& easy style, for those who don't want to bother with customization
\lstdefinestyle{Matlab-stdstyle}
{
  language   = \languageNormedDefd@mlpretty,
  frame      = single,
  numbers    = left,
  breaklines = true,
}

% Black & white style
\lstdefinestyle{Matlab-bwstyle}
{
  language            = \languageNormedDefd@mlpretty,
  mlkeywordstyle      = \color[gray]{0}             \bfseries        ,
  mlcommentstyle      = \color[gray]{.75}                    \itshape,
  mlstringstyle       = \color[gray]{.5}                             ,
  mlsyscomstyle       = \color[gray]{.25}                            ,
  mlsectiontitlestyle = \color[gray]{.75}           \bfseries\itshape,
  mlsharedvarstyle    = \color[gray]{0}                              ,
  mlplaceholderstyle  = \color[gray]{0}  \normalfont         \itshape,
  frame               = single,
  numbers             = left,
  breaklines          = true,
}

% Style very similar to that of the Pygments lexer called `MatlabLexer',
% (see http://pygments.org/docs/lexers/). This style basically mimics
% the output you get with the minted, verbments, and pythontex packages.
\lstdefinestyle{Matlab-pygstyle}
{
  language            = \languageNormedDefd@mlpretty,
  mllastelementstyle  = \color[RGB]{127,000,000}                            ,
  mlkeywordstyle      = \color[RGB]{000,127,000}           \bfseries        ,
  mlcommentstyle      = \color[RGB]{063,127,127}                    \itshape,
  mlstringstyle       = \color[RGB]{186,034,034}                            ,
  mlsyscomstyle       = \color[RGB]{000,127,000}                            ,
  mlsectiontitlestyle = \color[RGB]{063,127,127}                    \itshape,
  mlsharedvarstyle    = \color[RGB]{034,034,186}                            ,
  mlplaceholderstyle  = \color[RGB]{127,063,127}\normalfont         \itshape,
  frame               = single,
  numbers             = left,
  breaklines          = true,
}
%TODO % digit color is [RGB]{102,102,102}

\endinput