%% matlab-prettifier.sty
%% Copyright 2014 Julien Cretel <jubobs.matlab.prettifier at gmail.com>
%
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3
% of this license or (at your option) any later version.
% The latest version of this license is in
%   http://www.latex-project.org/lppl.txt
% and version 1.3 or later is part of all distributions of LaTeX
% version 2005/12/01 or later.
%
% This work has the LPPL maintenance status `maintained'.
% 
% The Current Maintainer of this work is Julien Cretel <jubobs.matlab.prettifier at gmail.com>
%
% This work currently consists of the file matlab-prettifier.sty.

% --- Package identification ---
\newcommand\pkgName@mlpretty{matlab-prettifier}
\newcommand\pkgDate@mlpretty{2014/02/15}
\newcommand\pkgVer@mlpretty{.alpha}
\newcommand\pkgDesc@mlpretty%
  {LaTeX package for typesetting prettified Matlab listings}
\NeedsTeXFormat{LaTeX2e}[2011/06/27]
\ProvidesClass{\pkgName@mlpretty}%
  [\pkgDate@mlpretty{}  v\pkgVer@mlpretty{} \pkgDesc@mlpretty]

% --- Discard any option passed to the package ---
\DeclareOption*%
{%
  \OptionNotUsed
  \PackageWarning{\pkgName@mlpretty}{Unknown `\CurrentOption' option}
}  

% --- Process options ---
\ProcessOptions\relax

% --- Package dependencies ---
\RequirePackage{textcomp}[2005/09/27]
\RequirePackage{etoolbox}[2011/01/03]
\RequirePackage{xcolor}[2007/01/21]
\RequirePackage{listings}[2013/08/26]


% ----------- key=value interface ---
\lst@Key{mlkeywordstyle}\relax{\renewcommand\keywordStyle@mlpretty{#1}}
\lst@Key{mllastelementstyle}\relax{\renewcommand\lastElemStyle@mlpretty{#1}}
\lst@Key{mlstringstyle}\relax{\renewcommand\stringStyle@mlpretty{#1}}
\lst@Key{mlcommentstyle}\relax{\renewcommand\commentStyle@mlpretty{#1}}
\lst@Key{mllastelementstyle}\relax{\renewcommand\lastElemStyle@mlpretty{#1}}
\lst@Key{mlplaceholderstyle}\relax{\renewcommand\placeholderStyle@mlpretty{#1}}
\lst@Key{mlsectionrulethickness}\relax%
  {\renewcommand\sectionRuleThicknessRatio@mlpretty{#1}}
\lst@Key{mlsectionrulecolor}\relax%
  {\colorlet{sectionRuleColor@mlpretty}{#1}}
\lst@Key{mlshowsectionrules}{false}[t]%
  {\lstKV@SetIf{#1}\ifShowCellrules@mlpretty@}
\lst@Key{mlsectiontitlestyle}\relax
  {\renewcommand\sectionTitleStyle@mlpretty{#1}}
\lst@Key{mlsyscomstyle}\relax{\renewcommand\syscomStyle@mlpretty{#1}}
\lst@Key{mloverridecontext}{false}[t]%
  {\lstKV@SetIf{#1}\ifOverridecontext@mlpretty@}

% we create a new ``keyword'' class for variables with shared scope
% by using the very convenient internal listings macro \lst@InstallKeywords
\lst@InstallKeywords k{mlsharedvars}{mlsharedvarStyle@mlpretty}\relax%
  {mlsharedvarStyle@mlpretty}{}ld

% Here we define a sharedvarstyle key that is used by
% \lst@sharedvarStyle@mlpretty internally.
\lst@Key{mlsharedvarstyle}\relax{\renewcommand\sharedvarStyle@mlpretty{#1}}


% --- Language definition ---
\def\language@mlpretty{matlab-pretty} % for test in hooks (listings makes language names lowercase internally)
\lstdefinelanguage{Matlab-pretty}
{%
  MoreSelectCharTable=\SelectCharTable@mlpretty,
  sensitive=true,% Matlab is case-sensitive.
  upquote=true,
  showstringspaces=false,
  rulecolor=\color{black}, % prevents listings bug (nonuniform rule color)
  %
  basicstyle=\basicStyle@mlpretty,
  %
  morekeywords=[257]% opening keywords unrelated to classdef
  {% 
    for,
    if,
    otherwise,
    parfor,
    spmd,
    switch,
    try,
    while,
  },
  keywordstyle=[257]\processOpRegKW@mlpretty,
  %
  morekeywords=[258]% `middle' keywords unrelated to classdef
  {%
    break,
    case,
    catch,
    continue,
    else,
    elseif,
    function,
    return,
  }, 
  keywordstyle=[258]\processMidKW@mlpretty,
  %
  morekeywords=[259]% `standalone' keywords
  {%
    global,
    persistent,
  }, 
  keywordstyle=[259]\processStdaKW@mlpretty,
  %
  morekeywords=[260]{classdef},  
  keywordstyle=[260]\processClDefKW@mlpretty,
  %
  morekeywords=[261]% `middle' keywords related to classdef
  {%
    enumeration,
    events,
    methods,
    properties,
  },
  keywordstyle=[261]\processMidClDefKW@mlpretty,
  % 
  morekeywords=[262]{end},
  keywordstyle=[262]\processEndKW@mlpretty,
  %
  % strings
  morestring=[m]',
  stringstyle=\processString@mlpretty,
  %
  % comments
  morecomment=[l]\%,                                       % to-end-of-line
  morecomment=[n]{\%\{\^^M}{\%\}\^^M},                     % block
  moredelim=**[il][\processDotDotDot@mlpretty]{...},       % line continuation
  moredelim=**[l][\processSectionTitle@mlpretty]{\%\%},    % code section
  moredelim=**[l][\processSectionTitle@mlpretty]{\%\%\ },  % code section
  commentstyle=\commentStyle@mlpretty,
  %
  % system commands
  moredelim=[l][\syscomStyle@mlpretty]{!},
  %
  % variables with shared scope
  mlsharedvarStyle@mlpretty = \processSharedVar@mlpretty,
}%
[% `listings' aspects needed
  keywords,
  strings,
  comments,
]



% --- State variables ---
% Counters and switches used as ``state variables''
% (used to keep track of context)
\newcount\netBracketCount@mlpretty  % net running count of brackets
                                    % ([{ count for +1, )]} count for -1 
\newcount\blkLvl@mlpretty             % block nesting level
\newcount\blkLvlAtClDef@mlpretty     % block nesting level at last classdef

\newif\ifClosingEndKW@mlpretty@            \ClosingEndKW@mlpretty@true
\newif\ifInClDef@mlpretty@                      \InClDef@mlpretty@false
\newif\ifInStr@mlpretty@                          \InStr@mlpretty@false
\newif\ifInLineCom@mlpretty@                  \InLineCom@mlpretty@false
\newif\ifTooLateForSectionTitle@mlpretty@%
                                 \TooLateForSectionTitle@mlpretty@false
\newif\ifWithinSectionTitle@mlpretty@\WithinSectionTitle@mlpretty@false


% --- Macros for resetting counters and switches ---
\newcommand\resetBracketCount@mlpretty{\global\netBracketCount@mlpretty=0}

\newcommand\resetEndKW@mlpretty%
{%
  \global\ClosingEndKW@mlpretty@true%
  \resetBracketCount@mlpretty%
}

\newcommand\resetClassdefKW@mlpretty%
{%
  \global\InClDef@mlpretty@false%
  \global\blkLvl@mlpretty=0%
  \global\blkLvlAtClDef@mlpretty=0%
}


% --- internal style macros ---

% Font family, series, shape, and size (color is defined separately)
\newcommand\basicFontSpecs@mlpretty{\ttfamily\normalsize}
\newcommand\lastElemFontSpecs@mlpretty{}
\newcommand\keywordFontSpecs@mlpretty{}
\newcommand\stringFontSpecs@mlpretty{}
\newcommand\commentFontSpecs@mlpretty{}
\newcommand\sectionTitleFontSpecs@mlpretty
  {\commentFontSpecs@mlpretty\bfseries}
\newcommand\syscomFontSpecs@mlpretty{}
\newcommand\sharedvarFontSpecs@mlpretty{}

% Matlab syntax highlighting colors
\colorlet{textColor@mlpretty}{black}                      % text
\colorlet{lastElemColor@mlpretty}{textColor@mlpretty}     % end
\definecolor{keywordColor@mlpretty}{RGB}{000,000,255}     % keywords
\definecolor{stringColor@mlpretty}{RGB}{160,032,240}      % strings
\definecolor{commentColor@mlpretty}{RGB}{034,139,034}     % comments
\definecolor{sectionTitleColor@mlpretty}{RGB}{034,139,034}% section titles
\colorlet{sectionRuleColor@mlpretty}{black!15}            % code-section rule
\definecolor{syscomColor@mlpretty}{RGB}{178,140,000}      % system commands
\definecolor{sharedvarColor@mlpretty}{RGB}{000,163,163}   % shared scope

% More Matlab colors (currently not used by matlab-prettifier)
\colorlet{bgColor@mlpretty}{white}                         % background color
\definecolor{untermStringColor@mlpretty}{RGB}{178,000,000}% unterm. strings
\definecolor{syntaxErrorColor@mlpretty}{RGB}{255,000,000} % Syntax errors

% Additional custom colors
\colorlet{numbersColor@matlabpretty}{gray}

\newcommand\basicStyle@mlpretty%
{%
  \basicFontSpecs@mlpretty%
  \color{textColor@mlpretty}%
}

\newcommand\lastElemStyle@mlpretty%
{%
  \lastElemFontSpecs@mlpretty%
  \color{lastElemColor@mlpretty}%
}

\newcommand\keywordStyle@mlpretty%
{%
  \keywordFontSpecs@mlpretty%
  \color{keywordColor@mlpretty}%
}

\newcommand\stringStyle@mlpretty%
{%
  \global\InStr@mlpretty@true%
  \stringFontSpecs@mlpretty%
  \color{stringColor@mlpretty}%
}

\newcommand\commentStyle@mlpretty%
{%
  \commentFontSpecs@mlpretty%
  \color{commentColor@mlpretty}%
}

\newcommand\sectionTitleStyle@mlpretty%
{%
  \sectionTitleFontSpecs@mlpretty%
  \color{sectionTitleColor@mlpretty}%
}

\newcommand\syscomStyle@mlpretty%
{%
  \syscomFontSpecs@mlpretty%
  \color{syscomColor@mlpretty}%
}

\newcommand\sharedvarStyle@mlpretty%
{%
  \sharedvarFontSpecs@mlpretty%
  \color{sharedvarColor@mlpretty}%
}


% Macro for SelectCharTable key
\newcommand\SelectCharTable@mlpretty%
{%
  \processOpenBracket@mlpretty{40}{\roundBktOp@mlpretty}%
  \processOpenBracket@mlpretty{91}{\squareBktOp@mlpretty}%
  \processOpenBracket@mlpretty{123}{\curlyBktOp@mlpretty}%
  \processCloseBracket@mlpretty{41}{\roundBktCl@mlpretty}%
  \processCloseBracket@mlpretty{93}{\squareBktCl@mlpretty}%
  \processCloseBracket@mlpretty{125}{\curlyBktCl@mlpretty}%
}


% --- macros for processing opening and closing brackets ---
\newcommand\processOpenBracket@mlpretty[2]%
{%
  \lst@DefSaveDef{#1}#2%
  {%
    #2%
    \ifnum\lst@mode=\lst@Pmode\relax% if we're not inside a string or comment
      \global\ClosingEndKW@mlpretty@false%
      \global\advance\netBracketCount@mlpretty by \@ne%
    \fi%
  }%  
}

\newcommand\processCloseBracket@mlpretty[2]%
{%
  \lst@DefSaveDef{#1}#2%
  {%
    #2%
    \ifnum\lst@mode=\lst@Pmode\relax% if we're not inside a string or comment
      \ifClosingEndKW@mlpretty@% %if end is already a blue keyword, we can reset the count
        \resetBracketCount@mlpretty%
      \else%
        \global\advance\netBracketCount@mlpretty by \m@ne%
        \ifnum\netBracketCount@mlpretty>0%
        \else%
          \global\ClosingEndKW@mlpretty@true%
        \fi%
      \fi%
    \fi%
  }%  
}

% --- macros for processing keywords ---
\newcommand\processOpRegKW@mlpretty%
{%
  \ifWithinSectionTitle@mlpretty@%
  \else%
    \resetEndKW@mlpretty%
    \global\advance\blkLvl@mlpretty\@ne%
    \keywordStyle@mlpretty%
  \fi%
}

\newcommand\processMidKW@mlpretty%
{%
  \ifWithinSectionTitle@mlpretty@%
  \else%
    \resetEndKW@mlpretty%
    \keywordStyle@mlpretty%
  \fi%
}

% No difference between standalone keywords and middle keywords
\newcommand\processStdaKW@mlpretty\processMidKW@mlpretty

\newcommand\processClDefKW@mlpretty%
{%
  \ifWithinSectionTitle@mlpretty@%
  \else%
    \resetEndKW@mlpretty%
    \global\InClDef@mlpretty@true%
    \global\blkLvlAtClDef@mlpretty=\blkLvl@mlpretty%
    \global\advance\blkLvl@mlpretty\@ne%
    \keywordStyle@mlpretty%
  \fi%
}

\newcommand\processMidClDefKW@mlpretty%
{%
  %only for typesetting those as keywords in inline code
  \ifOverridecontext@mlpretty@% 
    \keywordStyle@mlpretty%
  \else%
    \ifWithinSectionTitle@mlpretty@%
    \else%
      \ifInClDef@mlpretty@%
        \resetEndKW@mlpretty%
        \global\advance\blkLvl@mlpretty\@ne%
        \keywordStyle@mlpretty%
      \fi%
    \fi%
  \fi%
}

\newcommand\processEndKW@mlpretty%
{%
  % only for typesetting those as ``last element'' in inline code
  \ifOverridecontext@mlpretty@% 
    \lastElemStyle@mlpretty%
  \else%
    \ifWithinSectionTitle@mlpretty@%
    \else%
      \ifClosingEndKW@mlpretty@%
        \ifInLineCom@mlpretty@%
        \else%
          \ifnum\blkLvl@mlpretty>0%
            \global\advance\blkLvl@mlpretty\m@ne%
          \fi%
          \ifnum\blkLvl@mlpretty=\blkLvlAtClDef@mlpretty%
            \global\InClDef@mlpretty@false%
          \fi%
          \keywordStyle@mlpretty%
        \fi%
      \else%
        \lastElemStyle@mlpretty%
      \fi%
    \fi%
  \fi%
}


% --- strings ---
\newcommand\processString@mlpretty%
{%
  \ifWithinSectionTitle@mlpretty@%
  \else%
    \stringStyle@mlpretty%  
  \fi%
}

% --- macro for handling line continuation ---
\newcommand\processDotDotDot@mlpretty%
{%
  \lst@CalcLostSpaceAndOutput%
  \ifWithinSectionTitle@mlpretty@%
    ...%
  \else%
    \ifInLineCom@mlpretty@%
      ...%
    \else%
      \global\InLineCom@mlpretty@true%
      {\keywordStyle@mlpretty...}%
    \fi%
    \commentStyle@mlpretty%
  \fi%
}

% --- macro for processing section title ---
\newlength\emHeight@mlpretty
\newlength\jayDepth@mlpretty
\newlength\sectionRuleOffset@mlpretty
\newlength\sectionRuleThickness@mlpretty
\newcommand\sectionRuleThicknessRatio@mlpretty{.05}

\newcommand\processSectionTitle@mlpretty%
{%
  \ifWithinSectionTitle@mlpretty@% to avoid drawing the rule multiple times
  \else%
    \global\WithinSectionTitle@mlpretty@true%
    \resetEndKW@mlpretty%
    \commentStyle@mlpretty%
    \ifTooLateForSectionTitle@mlpretty@%
    \else%
      \bgroup%
        % calculate the vertical offset for the rule
        \setlength\emHeight@mlpretty{\fontcharht\font`M}%
        \setlength\jayDepth@mlpretty{\fontchardp\font`j}%
        \setlength\sectionRuleOffset@mlpretty%
        {%
          \dimexpr.5\emHeight@mlpretty%
                 +.5\baselineskip%
                 -.5\jayDepth@mlpretty\relax%
        }%
        \setlength\sectionRuleThickness@mlpretty%
        {%
          \sectionRuleThicknessRatio@mlpretty\baselineskip%
        }%
        \color{sectionRuleColor@mlpretty}%
        \ifShowCellrules@mlpretty@%
          \makebox[0em][l]%
          {%
            \raisebox{\sectionRuleOffset@mlpretty}[0pt][0pt]%
              {\rule{\lst@linewidth}{\sectionRuleThickness@mlpretty}}%
          }%
        \fi%
      \egroup%
      \sectionTitleStyle@mlpretty%
    \fi%
  \fi%
}

\newcommand\processSharedVar@mlpretty%
{%
  \ifWithinSectionTitle@mlpretty@%
  \else%
      \sharedvarStyle@mlpretty%
  \fi%
}


% --- macros for handling code sections in hooks ---
\newcommand\addedToEveryLineCodeSection@mlpretty%
{%
  \global\TooLateForSectionTitle@mlpretty@false%
}

\newcommand\addedToPostOutputCodeSection@mlpretty%
{%
  \global\TooLateForSectionTitle@mlpretty@true%
}


% --- macros for handling unterminated string literal ---
\newcommand\addedToEOLHookUntermStr@mlpretty%
{%
  \ifInStr@mlpretty@%
    \global\InStr@mlpretty@false%
    \lst@LeaveMode%
  \fi%
}

\newcommand\addedToEndGroupHookUntermStr@mlpretty%
{%
  \ifInStr@mlpretty@%
    \global\InStr@mlpretty@false%
  \fi%
}

\newcommand\addedToEOLHookDotDotDot@mlpretty%
{%
  \global\InLineCom@mlpretty@false%
}


% --- Macros for adding to listings hooks ---
% EOL hook
\newcommand\addedToEOL@mlpretty{}
\newcommand\@ddedToEOL@mlpretty%
{%
  \addedToEOLHookDotDotDot@mlpretty%
  \addedToEOLHookUntermStr@mlpretty%
  \global\WithinSectionTitle@mlpretty@false%
}
\lst@AddToHook{EOL}{\addedToEOL@mlpretty}

% EndGroup hook
\newcommand\addedToEndGroup@mlpretty{}
\newcommand\@ddedToEndGroup@mlpretty%
{%
  \addedToEndGroupHookUntermStr@mlpretty%
}
\lst@AddToHook{EndGroup}{\addedToEndGroup@mlpretty}

% EveryLine hook
\newcommand\addedToEveryLine@mlpretty{}
\newcommand\@ddedToEveryLine@mlpretty%
{%
  \addedToEveryLineCodeSection@mlpretty%
}
\lst@AddToHook{EveryLine}{\addedToEveryLine@mlpretty}

% PostOutput hook
\newcommand\addedToPostOutput@mlpretty{}
\newcommand\@ddedToPostOutput@mlpretty%
{%
  \addedToPostOutputCodeSection@mlpretty%
}
\lst@AddToHook{PostOutput}{\addedToPostOutput@mlpretty}

% Now we apply all those patches at the PreSet hook,
% under the condition that \lst@language expands to 
% `matlab-prettifier'.
% PreInit Hook
\newcommand\addedToPreInitHook%
{%
  \ifx\lst@language\language@mlpretty%
    \renewcommand\addedToEOL@mlpretty\@ddedToEOL@mlpretty%
    \renewcommand\addedToEndGroup@mlpretty\@ddedToEndGroup@mlpretty%
    \renewcommand\addedToEveryLine@mlpretty\@ddedToEveryLine@mlpretty%
    \renewcommand\addedToPostOutput@mlpretty\@ddedToPostOutput@mlpretty%
  \fi%
}
\lst@AddToHook{PreInit}{\addedToPreInitHook}

% We reset counters apply at the DeInit hook,
% under the condition that \lst@language expands to 
% `matlab-prettifier'.
% DeInit hook
\newcommand\addedToDeInitHook%
{%
  \ifx\lst@language\language@mlpretty%
    \resetEndKW@mlpretty%
    \resetClassdefKW@mlpretty%
  \fi%
}
\lst@AddToHook{DeInit}{\addedToDeInitHook}


% --- Macros for placeholders ---

% Placeholder colors
\definecolor{placeholderColor@mlpretty}{RGB}{209,0,86}

% Macros for placeholder delimiters
\newcommand\placeholderOpDelim@mlpretty{\textlangle}
\newcommand\placeholderClDelim@mlpretty{\textrangle}
\newcommand\placeholderDelimFontSpecs@mlpretty{\normalfont\upshape}
\newcommand\placeholderContentFontSpecs@mlpretty{\normalfont\itshape}

\newcommand\placeholderStyle@mlpretty%
{%
  \placeholderContentFontSpecs@mlpretty%
  \color{placeholderColor@mlpretty}%
}

% Macro for conditional italic correction
\newcommand\condItalicCorrection@mlpretty%
{%
  \ifdefstring{\f@shape}{sl}
    {\/}
    {%
      \ifdefstring{\f@shape}{it}
      {\/}
      {}%
    }%
}

% --- User macro for typesetting snippet placeholders ---
\newcommand\snippetPlaceholder[1]%
{%
  \bgroup%
    \placeholderStyle@mlpretty%
    \bgroup%
      % opening delimiter
      \placeholderDelimFontSpecs@mlpretty%
      \placeholderOpDelim@mlpretty%
    \egroup%
    % placeholder content
    #1\condItalicCorrection@mlpretty%
    \bgroup%
      % closing delimiter
      \placeholderDelimFontSpecs@mlpretty%
      \placeholderClDelim@mlpretty%
    \egroup%
  \egroup%
}


% --- built-in matlab-prettifier styles ---

% Quick \& easy style, for those who don't want to bother with customization
\lstdefinestyle{Matlab-standard-style}
{
  language   = Matlab-pretty,
  frame      = single,
  numbers    = left,
  breaklines = true,
}

% Black & white style
\lstdefinestyle{Matlab-bw-style}
{
  language            = Matlab-pretty,
  mlkeywordstyle      = \color[gray]{0}             \bfseries        ,
  mlcommentstyle      = \color[gray]{.75}                    \itshape,
  mlstringstyle       = \color[gray]{.5}                             ,
  mlsyscomstyle       = \color[gray]{.25}                            ,
  mlsectiontitlestyle = \color[gray]{.75}           \bfseries\itshape,
  mlsharedvarstyle    = \color[gray]{0}                              ,
  mlplaceholderstyle  = \color[gray]{0}  \normalfont         \itshape,
  frame               = single,
  numbers             = left,
  breaklines          = true,
}

% Style very similar to the Pygments lexer called `MatlabLexer',
% (see http://pygments.org/docs/lexers/). This style can be used
% to typeset Matlab code in a way similar to how minted, verbments,
% and pythontex do it.
\lstdefinestyle{Matlab-pygsty-style}
{
  language            = Matlab-pretty,
  mllastelementstyle  = \color[RGB]{127,000,000}                            ,
  mlkeywordstyle      = \color[RGB]{000,127,000}           \bfseries        ,
  mlcommentstyle      = \color[RGB]{063,127,127}                    \itshape,
  mlstringstyle       = \color[RGB]{186,034,034}                            ,
  mlsyscomstyle       = \color[RGB]{000,127,000}                            ,
  mlsectiontitlestyle = \color[RGB]{063,127,127}                    \itshape,
  mlsharedvarstyle    = \color[RGB]{034,034,186}                            ,
  mlplaceholderstyle  = \color[RGB]{127,063,127}\normalfont         \itshape,
  frame               = single,
  numbers             = left,
  breaklines          = true,
}
%TODO % digit color is [RGB]{102,102,102}


% --- macros for inline code (scaled to the surrounding font size) ---
% overrides the fontsize of \lst@basicstyle
\newcommand\applyCurrentFontsize@mlpretty%
{%
  \let\lst@basicstyleSaved@mlpretty\lst@basicstyle%
  \let\f@sizeSaved@mlpretty\f@size%
  \let\baselineskipSaved@mlpretty\baselineskip%
  \renewcommand\lst@basicstyle%
  {%
      \lst@basicstyleSaved@mlpretty%
      \fontsize{\f@sizeSaved@mlpretty}{\baselineskipSaved@mlpretty}%
      \selectfont%
  }%
}
% inline Matlab code (no need for \atBeginCode and \atEndCode here)
\newcommand\InlineMatlabPretty[2][]
{%
  \bgroup%
    % According to the listings documentation, passing the option with
    % \lstset is preferable to passing them in the optional argument of  
    % \lstinline (which is still considered, as of listings v1.5b)
    \lstset{language=Matlab-pretty, #1}%
    \applyCurrentFontsize@mlpretty%
    \lstinline?#2?% % question mark as delimiter because unlikely to be needed in inline code.
  \egroup%
}

% ... but that's a mouthful, so...
\newcommand\DefineCharForInlineMatlabPretty[1][]%
{%
  \newcommand\lst@shortinlinedef%
  {%
    \lstset{language=Matlab-pretty, #1}%
    \applyCurrentFontsize@mlpretty%
    \lstinline%
  }%
  \lstMakeShortInline@%
}%

\let\DeleteCharForMatlabPrettyInline\lstDeleteShortInline

\endinput