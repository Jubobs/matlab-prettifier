%% matlab-prettifier.sty
%% Copyright 2014 Julien Cretel
%
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3
% of this license or (at your option) any later version.
% The latest version of this license is in
%   http://www.latex-project.org/lppl.txt
% and version 1.3 or later is part of all distributions of LaTeX
% version 2005/12/01 or later.
%
% This work has the LPPL maintenance status `maintained'.
% 
% The Current Maintainer of this work is Julien Cretel
%
% This work currently consists of the file matlab-prettifier.sty.

% --- Package identification ---
\def\pkgName@mlpretty{matlab-prettifier}
\def\pkgDate@mlpretty{2014/02/05}
\def\pkgVer@mlpretty{.alpha}
\def\pkgDesc@mlpretty{LaTeX package for typesetting Matlab listings}
\NeedsTeXFormat{LaTeX2e}
\ProvidesClass{\pkgName@mlpretty}
[%
	\pkgDate@mlpretty{}	v\pkgVer@mlpretty{} \pkgDesc@mlpretty%
]

% --- Discard any option passed to the package ---
\DeclareOption*%
{%
	\OptionNotUsed
	\PackageWarning{\pkgName@mlpretty}{Unknown `\CurrentOption' option}
}	

% --- Process options ---
\ProcessOptions\relax

% --- Package dependencies ---
\RequirePackage{textcomp}
\RequirePackage{etoolbox}
\RequirePackage{xcolor}
\RequirePackage{listings}

% --- Language definition (with a few dirty hacks) ---
\lstdefinelanguage{Matlab-pretty}
{%
	sensitive=true,% Matlab is case-sensitive.
	upquote=true,
	showstringspaces=false,
	rulecolor=\color{black}, % prevents listings bug (nonuniform rule color)
	alsoletter={0123456789_},% to allow those chars in identifiers
	%
	basicstyle=\basicStyle@mlpretty,
	%
	morekeywords=[257]% opening keywords unrelated to classdef
	{% 
		for,
		if,
		otherwise,
		parfor,
		spmd,
		switch,
		try,
		while,
	},
	keywordstyle=[257]\processOpRegKW@mlpretty,
	%
	morekeywords=[258]% `middle' keywords unrelated to classdef
	{%
		break,
		case,
		catch,
		continue,
		else,
		elseif,
		function,
		return,
	}, 
	keywordstyle=[258]\processMidKW@mlpretty,
	%
	morekeywords=[259]% `standalone' keywords
	{%
		global,
		persistent,
	}, 
	keywordstyle=[259]\processStdaKW@mlpretty,
	%
	morekeywords=[260]{classdef},	
	keywordstyle=[260]\processClDefKW@mlpretty,
	%
	morekeywords=[261]% `middle' keywords related to classdef
	{%
		enumeration,
		events,
		methods,
		properties,
	},
	keywordstyle=[261]\processMidClDefKW@mlpretty,
	% 
	morekeywords=[262]{end},
	keywordstyle=[262]\processEndKW@mlpretty,
	%
	literate=*%
		{(}{{\processOpBrkt@mlpretty(}}1
		{[}{{\processOpBrkt@mlpretty[}}1
		{\{}{{\processOpBrkt@mlpretty\{}}1
		{)}{{\processClBrkt@mlpretty)}}1
		{]}{{\processClBrkt@mlpretty]}}1
		{\}}{{\processClBrkt@mlpretty\}}}1
		{)'}{{\processClBrkt@mlpretty)}{\textquotesingle}}2
		{]'}{{\processClBrkt@mlpretty]}{\textquotesingle}}2
		{\}'}{{\processClBrkt@mlpretty\}}{\textquotesingle}}2
		{~}{{\tilde@mlpretty}}1,
	%
	% strings
	morestring=[m]',
	stringstyle=\processString@mlpretty,
	%
	% comments
	morecomment=[l]\%,                                       % to-end-of-line
	morecomment=[s]{\%\{\^^M}{\%\}\^^M},                     % multiline
	moredelim=**[il][\processDotDotDot@mlpretty]{...},       % line continuation
	moredelim=**[l][\processSectionTitle@mlpretty]{\%\%},% code section
	moredelim=**[l][\processSectionTitle@mlpretty]{\%\%\ },  % code section
  commentstyle=\commentStyle@mlpretty,
	%
	% system commands
	moredelim=[l][\syscomStyle@mlpretty]{!},
}%
[% `listings' aspects needed
	keywords,
	strings,
	comments,
]


% --- ``State variables'' ---

\newcount\opBktCount@mlpretty 		 % running count of (, [ and, { 
\newcount\clBktCount@mlpretty 		 % running count of ), ] and, }
\newcount\blkLvl@mlpretty				   % block nesting level
\newcount\blkLvlAtClDef@mlpretty	 % block nesting level at last classdef

\newif\ifClosingEndKW@mlpretty@                    \ClosingEndKW@mlpretty@true
\newif\ifInClDef@mlpretty@                              \InClDef@mlpretty@false
\newif\ifInStr@mlpretty@                                  \InStr@mlpretty@false
\newif\ifInLineCom@mlpretty@                          \InLineCom@mlpretty@false
\newif\ifTooLateForSectionTitle@mlpretty@\TooLateForSectionTitle@mlpretty@false
\newif\ifWithinSectionTitle@mlpretty@        \WithinSectionTitle@mlpretty@false


% --- Macros for resetting counters and switches ---
\def\resetBktCount@mlpretty%
{%
	\global\opBktCount@mlpretty=0%
	\global\clBktCount@mlpretty=0%
}

\def\resetEndKW@mlpretty%
{%
	\global\ClosingEndKW@mlpretty@true%
	\resetBktCount@mlpretty%
}

\def\resetClDef@mlpretty%
{%
	\global\InClDef@mlpretty@false%
	\global\blkLvl@mlpretty=0%
	\global\blkLvlAtClDef@mlpretty=0%
}


% --- internal style macros ---

% Declarations for font family, series, shape, and size (but not color)
\def\basicFontSpecs@mlpretty{\ttfamily\normalsize}
\def\lastElemFontSpecs@mlpretty{\basicFontSpecs@mlpretty}
\def\keywordFontSpecs@mlpretty{\basicFontSpecs@mlpretty}
\def\stringFontSpecs@mlpretty{\basicFontSpecs@mlpretty}
\def\commentFontSpecs@mlpretty{\basicFontSpecs@mlpretty}
\def\syscomFontSpecs@mlpretty{\basicFontSpecs@mlpretty}
\def\sectionTitleFontSpecs@mlpretty{\commentFontSpecs@mlpretty\bfseries}

% Matlab syntax highlighting colors
\colorlet{textColor@mlpretty}{black}                      % text
\colorlet{lastElemColor@mlpretty}{textColor@mlpretty}     % end
\definecolor{keywordColor@mlpretty}{RGB}{000,000,255}     % keywords
\definecolor{stringColor@mlpretty}{RGB}{160,032,240}      % strings
\definecolor{commentColor@mlpretty}{RGB}{034,139,034}     % comments
\definecolor{sectionTitleColor@mlpretty}{RGB}{034,139,034}% section titles
\colorlet{sectionTitleRuleColor@mlpretty}{black!15}       % code-section rule
\definecolor{syscomColor@mlpretty}{RGB}{178,140,000}      % system commands

% Additional colors (currently unused by matlab-prettifier)
\colorlet{bgColor@mlpretty}{white}		                     % background color
\definecolor{untermStringColor@mlpretty}{RGB}{178,000,000}% unterm. strings
\definecolor{syntaxErrorColor@mlpretty}{RGB}{255,000,000} % Syntax errors
\definecolor{sharedScopeColor@mlpretty}{RGB}{000,163,163} % Global variables

\def\basicStyle@mlpretty%
{%
  \basicFontSpecs@mlpretty%
  \color{textColor@mlpretty}%
}

\def\lastElemStyle@mlpretty%
{%
  \lastElemFontSpecs@mlpretty%
  \color{lastElemColor@mlpretty}%
}

\def\keywordStyle@mlpretty%
{%
  \keywordFontSpecs@mlpretty%
  \color{keywordColor@mlpretty}%
}

\def\stringStyle@mlpretty%
{%
  \global\InStr@mlpretty@true%
  \stringFontSpecs@mlpretty%
  \color{stringColor@mlpretty}%
}

\def\commentStyle@mlpretty%
{%
  \commentFontSpecs@mlpretty%
  \color{commentColor@mlpretty}%
}

\def\sectionTitleStyle@mlpretty%
{%
  \sectionTitleFontSpecs@mlpretty%
  \color{sectionTitleColor@mlpretty}%
}

\def\syscomStyle@mlpretty%
{%
  \syscomFontSpecs@mlpretty%
  \color{syscomColor@mlpretty}%
}


% --- macros for processing keywords ---
\def\processOpRegKW@mlpretty%
{%
  \ifWithinSectionTitle@mlpretty@%
  \else%
		\resetEndKW@mlpretty%
		\global\advance\blkLvl@mlpretty by \@ne%
		\keywordStyle@mlpretty%
	\fi%
}

\def\processMidKW@mlpretty%
{%
  \ifWithinSectionTitle@mlpretty@%
  \else%
	  \resetEndKW@mlpretty%
	  \keywordStyle@mlpretty%
  \fi%
}

\def\processStdaKW@mlpretty%
{%
  \ifWithinSectionTitle@mlpretty@%
  \else%
		\resetEndKW@mlpretty%
		\keywordStyle@mlpretty%
	\fi%
}

\def\processClDefKW@mlpretty%
{%
  \ifWithinSectionTitle@mlpretty@%
  \else%
		\resetEndKW@mlpretty%
		\global\InClDef@mlpretty@true%
		\global\blkLvlAtClDef@mlpretty=\blkLvl@mlpretty%
		\global\advance\blkLvl@mlpretty by \@ne%
		\keywordStyle@mlpretty%
  \fi%
}

\def\processMidClDefKW@mlpretty%
{%
  \ifWithinSectionTitle@mlpretty@%
  \else%
		\ifInClDef@mlpretty@%
			\resetEndKW@mlpretty%
			\global\advance\blkLvl@mlpretty by \@ne%
			\keywordStyle@mlpretty%
		\fi%
	\fi%
}

\def\processEndKW@mlpretty%
{%
  \ifWithinSectionTitle@mlpretty@%
  \else%
		\ifClosingEndKW@mlpretty@%
			\ifInLineCom@mlpretty@%
			\else%
				\ifnum\blkLvl@mlpretty>0%
					\global\advance\blkLvl@mlpretty by \m@ne%
				\fi%
				\ifnum\blkLvl@mlpretty=\blkLvlAtClDef@mlpretty%
					\global\InClDef@mlpretty@false%
				\fi%
				\keywordStyle@mlpretty%
			\fi%
		\else%
		  \lastElemStyle@mlpretty%
		\fi%
	\fi%
}


% --- macros for processing opening and closing brackets ---
\def\processOpBrkt@mlpretty%
{%
  \ifWithinSectionTitle@mlpretty@%
  \else%
		\ifClosingEndKW@mlpretty@%
			\global\ClosingEndKW@mlpretty@false%
		\fi%
		\global\advance\opBktCount@mlpretty by \@ne%
	\fi%
}

\def\processClBrkt@mlpretty%
{%
  \ifWithinSectionTitle@mlpretty@%
  \else%
		\ifClosingEndKW@mlpretty@%
			\resetBktCount@mlpretty%
		\else%
			\global\advance\clBktCount@mlpretty by \@ne%
			\ifnum\clBktCount@mlpretty<\opBktCount@mlpretty%
			\else%
				\global\ClosingEndKW@mlpretty@true%
			\fi%
		\fi%
	\fi%
}

% --- strings ---
\def\processString@mlpretty%
{%
  \ifWithinSectionTitle@mlpretty@%
  \else%
    \stringStyle@mlpretty%  
  \fi%
}

% --- macro for handling line continuation ---
\def\processDotDotDot@mlpretty%
{%
	\lst@CalcLostSpaceAndOutput%
	\ifWithinSectionTitle@mlpretty@%
	  ...%
  \else%
		\ifInLineCom@mlpretty@%
			...%
		\else%
			\global\InLineCom@mlpretty@true%
			{\keywordStyle@mlpretty...}%
		\fi%
		\commentStyle@mlpretty%
	\fi%
}

% --- macro for processing section title ---
\newlength\emHeight@mlpretty
\newlength\jayDepth@mlpretty
\newlength\sectionTitleRuleOffset@mlpretty
\newlength\sectionTitleRuleThickness@mlpretty
\def\sectionTitleRuleThicknessRatio@mlpretty{.05}

\def\processSectionTitle@mlpretty%
{%
  \ifWithinSectionTitle@mlpretty@% to avoid drawing the rule multiple times
  \else%
	  \global\WithinSectionTitle@mlpretty@true%
	  \resetEndKW@mlpretty%
	  \commentStyle@mlpretty%
	  \ifTooLateForSectionTitle@mlpretty@%
	  \else%
	    \bgroup%
	      % calculate the vertical offset for the rule
	      \setlength\emHeight@mlpretty{\fontcharht\font`M}%
        \setlength\jayDepth@mlpretty{\fontchardp\font`j}%
        \setlength\sectionTitleRuleOffset@mlpretty%
				{%
				  \dimexpr.5\emHeight@mlpretty+.5\baselineskip-.5\jayDepth@mlpretty\relax%
				}%
				\setlength\sectionTitleRuleThickness@mlpretty%
				{%
				  \sectionTitleRuleThicknessRatio@mlpretty\baselineskip%
        }%
			  \color{sectionTitleRuleColor@mlpretty}%
			  \ifShowCellrules@mlpretty@%
				  \makebox[0em][l]%
				  {%
				    \raisebox{\sectionTitleRuleOffset@mlpretty}[0pt][0pt]%
				      {\rule{\lst@linewidth}{\sectionTitleRuleThickness@mlpretty}}%
				  }%
				\fi%
	    \egroup%
	    \sectionTitleStyle@mlpretty%
	  \fi%
	\fi%
}

% Patch to make literate replacement of ) work as expected
% when breaklines is set to true.
\def\patchSelectCharTable@mlpretty%
{%
	\patchcmd{\lsthk@SelectCharTable}{`)}{``}{}{}%
}

\def\unpatchSelectCharTable@mlpretty%
{%
	\patchcmd{\lsthk@SelectCharTable}{``}{`)}{}{}%
}


% --- macro for literate replacement of tilde character ---
\def\tilde@mlpretty{\raisebox{0.5ex}{\texttildelow}}


% --- macros for handling code sections in hooks ---
\def\addedToEveryLineCodeSection@mlpretty%
{%
  \global\TooLateForSectionTitle@mlpretty@false%
}

\def\addedToPostOutputCodeSection@mlpretty%
{%
  \global\TooLateForSectionTitle@mlpretty@true%
}

% --- macros for handling unterminated string literal ---
\def\addedToEOLHookUntermStr@mlpretty%
{%
	\ifInStr@mlpretty@%
		\global\InStr@mlpretty@false%
		\lst@LeaveMode%
	\fi%
}

\def\addedToEndGroupHookUntermStr@mlpretty%
{%
	\ifInStr@mlpretty@%
		\global\InStr@mlpretty@false%
	\fi%
}


\def\addedToEOLHookDotDotDot@mlpretty%
{%
	\global\InLineCom@mlpretty@false%
}


% --- Macros for adding to listings hooks ---
% EOL hook
\def\addedToEOL@mlpretty{}
\def\@ddedToEOL@mlpretty%
{%
	\addedToEOLHookDotDotDot@mlpretty%
	\addedToEOLHookUntermStr@mlpretty%
	\global\WithinSectionTitle@mlpretty@false%
}
\lst@AddToHook{EOL}{\addedToEOL@mlpretty}

% EndGroup hook
\def\addedToEndGroup@mlpretty{}
\def\@ddedToEndGroup@mlpretty%
{%
	\addedToEndGroupHookUntermStr@mlpretty%
}
\lst@AddToHook{EndGroup}{\addedToEndGroup@mlpretty}

% EveryLine hook
\def\addedToEveryLine@mlpretty{}
\def\@ddedToEveryLine@mlpretty%
{%
  \addedToEveryLineCodeSection@mlpretty%
}
\lst@AddToHook{EveryLine}{\addedToEveryLine@mlpretty}

% PostOutput hook
\def\addedToPostOutput@mlpretty{}
\def\@ddedToPostOutput@mlpretty%
{%
  \addedToPostOutputCodeSection@mlpretty%
}
\lst@AddToHook{PostOutput}{\addedToPostOutput@mlpretty}


% --- Placeholders ---

% Placeholder colors
\definecolor{placeholderDelimColor@mlpretty}{RGB}{209,0,86}
\definecolor{placeholderContentColor@mlpretty}{RGB}{209,0,86}

% Macros for placeholder delimiters
\def\placeholderOpDelim@mlpretty{\textlangle}
\def\placeholderClDelim@mlpretty{\textrangle}
\def\placeholderDelimStyle@mlpretty{\normalfont\upshape}
\def\placeholderContentStyle@mlpretty{\normalfont\itshape}

% Macro for conditional italic correction
\def\itCorr@mlpretty%
{%
	\ifdefstring{\f@shape}{sl}
		{\/}
		{%
			\ifdefstring{\f@shape}{it}
			{\/}
			{}%
		}%
}

% --- User macro for typesetting snippet placeholders ---
\def\snippetPlaceholder#1%
{%
	{%
		% opening delimiter
		\placeholderDelimStyle@mlpretty%
		\color{placeholderDelimColor@mlpretty}%
		\placeholderOpDelim@mlpretty%
	}{%
		% placeholder content
		\placeholderContentStyle@mlpretty%
		\color{placeholderContentColor@mlpretty}%
		#1\itCorr@mlpretty%
	}{%
		% closing delimiter
		\placeholderDelimStyle@mlpretty%
		\color{placeholderDelimColor@mlpretty}%
		\placeholderClDelim@mlpretty%
	}%
}


% ----------- key=value interface ---

% Note: Using the literate key in conjunction with Matlab-pretty is
% ill-advised, as it will clobber the package's literate replacements.
% So we define a new key macro for allowing the user to specify additional
% literate replacements without clobbering existing ones.
\def\addToLiterate@mlpretty#1%
{%
	\edef\lst@literate%
	{%
		\unexpanded\expandafter{\lst@literate} %
		\unexpanded{#1}%
	}%
}

\lst@Key{mlbasicstyle}\relax{\def\basicStyle@mlpretty{#1}}
\lst@Key{lastelementstyle}\relax{\def\lastElemStyle@mlpretty{#1}}
\lst@Key{mlkeywordstyle}\relax{\def\keywordStyle@mlpretty{#1}}
\lst@Key{mlstringstyle}\relax{\def\stringStyle@mlpretty{#1}}
\lst@Key{mlcommentstyle}\relax{\def\commentStyle@mlpretty{#1}}
\lst@Key{mlsyscomstyle}\relax{\def\syscomStyle@mlpretty{#1}}
\lst@Key{mltidle}\relax{\def\tilde@mlpretty{#1}}
\lst@Key{mlliterate}\relax{\addToLiterate@mlpretty{#1}}
\lst@Key{codesectionrulethickness}\relax%
  {\def\sectionTitleRuleThicknessRatio@mlpretty{#1}}
\lst@Key{codesectionrulecolor}\relax%
  {\colorlet{sectionTitleRuleColor@mlpretty}{#1}}
\lst@Key{showcodesectionrules}{false}[t]%
  {\lstKV@SetIf{#1}\ifShowCellrules@mlpretty@}
\lst@Key{codesectiontitlestyle}\relax{\def\sectionTitleStyle@mlpretty{#1}}


% --- matlab-prettifier listings environment and macro ---

\newcommand\atBeginCode@mlpretty[1][]%
{%
  \patchSelectCharTable@mlpretty%
	\def\addedToEOL@mlpretty{\@ddedToEOL@mlpretty}% renew
	\def\addedToEndGroup@mlpretty{\@ddedToEndGroup@mlpretty}% renew
	\def\addedToEveryLine@mlpretty{\@ddedToEveryLine@mlpretty}% renew
	\def\addedToPostOutput@mlpretty{\@ddedToPostOutput@mlpretty}% renew
	\lstset{language=Matlab-pretty,#1}%
}

\def\atEndCode@mlpretty%
{%
	\def\addedToEOL@mlpretty{}% renew
	\def\addedToEndGroup@mlpretty{}% renew
	\def\addedToEveryLine@mlpretty{}% renew
	\def\addedToPostOutput@mlpretty{}% renew
	\resetEndKW@mlpretty%
	\resetClDef@mlpretty%
	\unpatchSelectCharTable@mlpretty%
}

% environment
\lstnewenvironment{matlabpretty}[1][]%
	{\atBeginCode@mlpretty[#1]}
	{\atEndCode@mlpretty}
	
% macro for creating custom matlab-prettifier environments
% Note: simply using \lstdefineenvironment wouldn't do, here,
% because matlab-prettifier must apply/undo patches at the
% beginning/end of the environment.
\newcommand\newmatlabprettyenvironment[2][]
{%
	\lstnewenvironment{#2}[1][]%
		{\atBeginCode@mlpretty[#1,##1]}%
		{\atEndCode@mlpretty}%
}

% macro for source files
\newcommand\inputmatlabpretty[2][]%
{%
	{%
		\atBeginCode@mlpretty[#1]%
		\lstinputlisting{#2}%
		\atEndCode@mlpretty%
	}%
}

% inline Matlab code (no need for \atBeginCode and \atEndCode here)
\newcommand\matlabprettyinline[2][]
{%
  {%
    \lstset{language=Matlab-pretty,#1}% preferable to lstinline[]{} which is an experimental feature of listings (as of v1.5b)
    \lstinline?#2?% % question mark as delimiter because unlikely to be needed in inline code.
  }%
}

% ... but that's a mouthful, so...
\newcommand\DefineCharForMatlabPrettyInline[1][]%
{%
  \def\lst@shortinlinedef%
  {%
    \lstset{language=Matlab-pretty,#1}%
    \lstinline%
  }%
  \lstMakeShortInline@%
}%

\let\DeleteCharForMatlabPrettyInline\lstDeleteShortInline

\endinput