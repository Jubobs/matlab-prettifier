%% matlab-prettifier.sty
% Copyright (C) 2014 by Julien Cretel <jubobs.matlab.prettifier at gmail.com>
%
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3
% of this license or (at your option) any later version.
% The latest version of this license is in
%
%     http://www.latex-project.org/lppl.txt
%
% and version 1.3 or later is part of all distributions of LaTeX
% version 2005/12/01 or later.
%
% This work has the LPPL maintenance status `maintained'.
% 
% The Current Maintainer of this work is Julien Cretel.
%
% This work currently consists of the files matlab-prettifier.dtx,
% matlab-prettifier.ins, and the derived file matlab-prettifier.sty.

% --- Package identification ---
\NeedsTeXFormat{LaTeX2e}[2011/06/27]
\ProvidesPackage{matlab-prettifier}%
 [2014/02/21 v0.1 LaTeX package for prettyprinting Matlab source code]


% --- check for incompatible listings options ---
\newcommand\checkForListingsOption@mlpr[1]
{%
  \@ifpackagewith{listings}{#1}%
  {
	  \PackageError{matlab-prettifier}%
	    {incompatible listings' option #1}%
	    {Make sure the `listings' package doesn't get loaded with option `#1'}
  }{}
}

\checkForListingsOption@mlpr{noaspects}
\checkForListingsOption@mlpr{0.21}
\checkForListingsOption@mlpr{savemem}


% --- Discard any option passed to the package ---
\DeclareOption*%
{%
  \OptionNotUsed
  \PackageWarning{\pkgName@mlpr}{Unknown `\CurrentOption' option}
}  

% --- Process options ---
\ProcessOptions\relax

% --- Package dependencies ---
\RequirePackage{textcomp}[2005/09/27]
\RequirePackage{xcolor}[2007/01/21]
\RequirePackage{listings}[2013/08/26]

% ----------- key=value interface ---
% Before we can define the language, we define additional keys

% we create a new ``keyword'' class for variables with shared scope
% by using the very convenient internal listings macro \lst@InstallKeywords
\gdef\InstallKeywords@mlpr#1#2#3#4#5%
{%
  \lst@Key{ml#2}\relax
    {\lst@UseFamily{#2}[\@ne]##1\relax\lst@MakeKeywords}%
  \lst@Key{mlmore#2}\relax
    {\lst@UseFamily{#2}[\@ne]##1\relax\lst@MakeMoreKeywords}%
  \lst@Key{mldelete#2}\relax
    {\lst@UseFamily{#2}[\@ne]##1\relax\lst@DeleteKeywords}%
  \ifx\@empty#3\@empty\else
     \lst@Key{#3}{#4}{\@namedef{lst@#3}{##1}}%
  \fi
  \expandafter\lst@InstallFamily@
     \csname\@lst @#2@data\expandafter\endcsname
     \csname\@lst @#5\endcsname {#1}{#2}{#3}
}

\InstallKeywords@mlpr k{sharedvars}{mlsharedvarStyle@mlpr}\relax%
  {mlsharedvarStyle@mlpr}{}ld

\lst@Key{mlkeywordstyle}\relax{\renewcommand\keywordStyle@mlpr{#1}}
\lst@Key{mllastelementstyle}\relax{\renewcommand\lastElemStyle@mlpr{#1}}
\lst@Key{mlstringstyle}\relax{\renewcommand\stringStyle@mlpr{#1}}
\lst@Key{mlcommentstyle}\relax{\renewcommand\commentStyle@mlpr{#1}}
\lst@Key{mlsectionrulethickness}\relax%
  {\renewcommand\sectionRuleThicknessRatio@mlpr{#1}}
\lst@Key{mlsectionrulecolor}\relax%
  {\colorlet{sectionRuleColor@mlpr}{#1}}
\lst@Key{mlshowsectionrules}{false}[t]%
  {\lstKV@SetIf{#1}\ifShowCellrules@mlpr@}
\lst@Key{mlsectiontitlestyle}\relax
  {\renewcommand\sectionTitleStyle@mlpr{#1}}
\lst@Key{mloverride}{false}[t]%
  {\lstKV@SetIf{#1}\ifOverridecontext@mlpr@}
\lst@Key{mlsyscomstyle}\relax{\renewcommand\syscomStyle@mlpr{#1}}
\lst@Key{mlsharedvarstyle}\relax{\renewcommand\sharedvarStyle@mlpr{#1}}
\lst@Key{mlunquotedstringdelim}\relax%
  {\lst@DelimKey\relax{[is][\stringStyle@mlpr]{#1}}}
\lst@Key{mlplaceholderstyle}\relax%
 {\renewcommand\placeholderStyle@mlpr{#1}}


% --- Language definition ---
\newcommand\language@mlpr{Matlab-pretty}
% ``normalised'' language name (listings lowercases language name internally)
% Note: in \foo\bar{\baz}, to expand \baz once before anything else,
% write \ex\foo\ex\bar\ex{\baz} (where \let\ex=\expandafter)
\expandafter\lst@NormedDef\expandafter\languageNormedDefd@mlpr%
  \expandafter{\language@mlpr}

\expandafter\expandafter\expandafter\lstdefinelanguage\expandafter%
{\language@mlpr}
{
  MoreSelectCharTable=\SelectCharTable@mlpr,
  alsoother={\$@}, % chars not valid in identifiers
  sensitive=true,% Matlab is case-sensitive.
  upquote=true,
  showstringspaces=false,
  rulecolor=\color{black}, % prevents listings bug (nonuniform rule color)
  %
  basicstyle=\basicStyle@mlpr,
  %
  morekeywords=[257]% opening keywords unrelated to classdef
  {% 
    for,
    if,
    otherwise,
    parfor,
    spmd,
    switch,
    try,
    while,
  },
  keywordstyle=[257]\processOpRegKW@mlpr,
  %
  morekeywords=[258]% `middle' keywords unrelated to classdef
  {%
    break,
    case,
    catch,
    continue,
    else,
    elseif,
    function,
    return,
  }, 
  keywordstyle=[258]\processMidKW@mlpr,
  %
  morekeywords=[259]% `standalone' keywords
  {%
    global,
    persistent,
  }, 
  keywordstyle=[259]\processStdaKW@mlpr,
  %
  morekeywords=[260]{classdef},  
  keywordstyle=[260]\processClassdefKW@mlpr,
  %
  morekeywords=[261]% `middle' keywords related to classdef
  {%
    enumeration,
    events,
    methods,
    properties,
  },
  keywordstyle=[261]\processMidClassdefKW@mlpr,
  % 
  morekeywords=[262]{end},
  keywordstyle=[262]\processEndKW@mlpr,
  %
  % strings
  morestring=[m]',
  stringstyle=\processString@mlpr,
  %
  % comments
  morecomment=[l]\%,                                       % to-end-of-line
  morecomment=[n]{\%\{\^^M}{\%\}\^^M},                     % block
  commentstyle=\commentStyle@mlpr,
  moredelim=**[il][\processDotDotDot@mlpr]{...},       % line continuation
  moredelim=[l][\processSectionTitle@mlpr]{\%\%},  % code section
  %
  % system commands
  moredelim=[l][\syscomStyle@mlpr]{!},
  %
  % variables with shared scope
  mlsharedvarstyle = \processSharedVar@mlpr,
}
[% `listings' aspects needed
  keywords,
  strings,
  comments,
]



% --- State variables ---
% Counters and switches used as ``state variables''
% (used to keep track of context)
\newcount\netBracketCount@mlpr  % net running count of brackets
                                    % ([{ count for +1, )]} count for -1 
\newcount\blkLvl@mlpr             % block nesting level
\newcount\blkLvlAtClassdef@mlpr     % block nesting level at last classdef

\newif\ifClosingEndKW@mlpr@             \ClosingEndKW@mlpr@true
\newif\ifInClassdef@mlpr@                 \InClassdef@mlpr@false
\newif\ifInStr@mlpr@                           \InStr@mlpr@false
\newif\ifNonWhiteOccured@mlpr@       \NonWhiteOccured@mlpr@false
\newif\ifWithinSectionTitle@mlpr@ \WithinSectionTitle@mlpr@false


% --- Macros for resetting counters and switches ---
\newcommand\resetBracketCount@mlpr{\global\netBracketCount@mlpr=0}

\newcommand\resetEndKW@mlpr
{%
  \global\ClosingEndKW@mlpr@true%
  \resetBracketCount@mlpr%
}

\newcommand\resetClassdefKW@mlpr
{%
  \global\InClassdef@mlpr@false%
  \global\blkLvl@mlpr=0%
  \global\blkLvlAtClassdef@mlpr=0%
}


% --- internal style macros ---

% Font family, series, shape, and size (color is defined separately)
\newcommand\basicFontSpecs@mlpr
{%
  \def\fvm@Scale{.85}%
  \fontfamily{fvm}\selectfont%
  \lst@ifdisplaystyle%
    \normalsize%
  \fi
}
\newcommand\keywordFontSpecs@mlpr{}
\newcommand\lastElemFontSpecs@mlpr{}
\newcommand\stringFontSpecs@mlpr{}
\newcommand\commentFontSpecs@mlpr{}
\newcommand\sectionTitleFontSpecs@mlpr
  {\commentFontSpecs@mlpr\bfseries}
\newcommand\syscomFontSpecs@mlpr{}
\newcommand\sharedvarFontSpecs@mlpr{}

% Matlab syntax highlighting colors
\colorlet{textColor@mlpr}{black}                      % text
\colorlet{lastElemColor@mlpr}{textColor@mlpr}     % end
\definecolor{keywordColor@mlpr}{RGB}{000,000,255}     % keywords
\definecolor{stringColor@mlpr}{RGB}{160,032,240}      % strings
\definecolor{commentColor@mlpr}{RGB}{034,139,034}     % comments
\definecolor{sectionTitleColor@mlpr}{RGB}{034,139,034}% section titles
\colorlet{sectionRuleColor@mlpr}{black!15}            % code-section rule
\definecolor{syscomColor@mlpr}{RGB}{178,140,000}      % system commands
\definecolor{sharedvarColor@mlpr}{RGB}{000,163,163}   % shared scope

% More Matlab colors (currently not used by matlab-prettifier)
\colorlet{bgColor@mlpr}{white}                        % background color
\definecolor{untermStringColor@mlpr}{RGB}{178,000,000}% unterm. strings
\definecolor{syntaxErrorColor@mlpr}{RGB}{255,000,000} % Syntax errors

% Additional custom colors
\colorlet{numbersColor@matlabpretty}{gray}

\newcommand\basicStyle@mlpr
{%
  \basicFontSpecs@mlpr%
  \color{textColor@mlpr}%
}

\newcommand\lastElemStyle@mlpr
{%
  \lastElemFontSpecs@mlpr%
  \color{lastElemColor@mlpr}%
}

\newcommand\keywordStyle@mlpr
{%
  \keywordFontSpecs@mlpr%
  \color{keywordColor@mlpr}%
}

\newcommand\stringStyle@mlpr
{%
  \global\InStr@mlpr@true%
  \stringFontSpecs@mlpr%
  \color{stringColor@mlpr}%
}

\newcommand\commentStyle@mlpr
{%
  \commentFontSpecs@mlpr%
  \color{commentColor@mlpr}%
}

\newcommand\sectionTitleStyle@mlpr
{%
  \sectionTitleFontSpecs@mlpr%
  \color{sectionTitleColor@mlpr}%
}

\newcommand\syscomStyle@mlpr
{%
  \syscomFontSpecs@mlpr%
  \color{syscomColor@mlpr}%
}

\newcommand\sharedvarStyle@mlpr
{%
  \sharedvarFontSpecs@mlpr%
  \color{sharedvarColor@mlpr}%
}


% Macro for SelectCharTable key
\newcommand\SelectCharTable@mlpr
{%
  \processOpenBracket@mlpr{40}{\roundBktOp@mlpr}%
  \processOpenBracket@mlpr{91}{\squareBktOp@mlpr}%
  \processOpenBracket@mlpr{123}{\curlyBktOp@mlpr}%
  \processCloseBracket@mlpr{41}{\roundBktCl@mlpr}%
  \processCloseBracket@mlpr{93}{\squareBktCl@mlpr}%
  \processCloseBracket@mlpr{125}{\curlyBktCl@mlpr}%
}


% --- macros for processing opening and closing brackets ---
\newcommand\processOpenBracket@mlpr[2]
{%
  \lst@DefSaveDef{#1}#2%
  {%
    #2%
    \ifnum\lst@mode=\lst@Pmode\relax% if we're not inside a string or comment
      \global\ClosingEndKW@mlpr@false%
      \global\advance\netBracketCount@mlpr by \@ne%
    \fi
  }%  
}

\newcommand\processCloseBracket@mlpr[2]
{%
  \lst@DefSaveDef{#1}#2%
  {%
    #2%
    \ifnum\lst@mode=\lst@Pmode\relax% if we're not inside a string or comment
      \ifClosingEndKW@mlpr@%    % If end is already a blue keyword... 
        \resetBracketCount@mlpr % ... we can safely reset the count.
      \else
        \global\advance\netBracketCount@mlpr by \m@ne%
        \ifnum\netBracketCount@mlpr>0%
        \else
          \global\ClosingEndKW@mlpr@true%
        \fi
      \fi
    \fi
  }%  
}

% --- macros for processing keywords ---
\newcommand\processOpRegKW@mlpr
{%
  \ifWithinSectionTitle@mlpr@%
  \else
    \resetEndKW@mlpr%
    \global\advance\blkLvl@mlpr\@ne%
    \keywordStyle@mlpr%
  \fi
}

\newcommand\processMidKW@mlpr
{%
  \ifWithinSectionTitle@mlpr@%
  \else
    \resetEndKW@mlpr%
    \keywordStyle@mlpr%
  \fi
}

% No difference between standalone keywords and middle keywords
\newcommand\processStdaKW@mlpr\processMidKW@mlpr

\newcommand\processClassdefKW@mlpr
{%
  \ifWithinSectionTitle@mlpr@%
  \else
    \resetEndKW@mlpr%
    \global\InClassdef@mlpr@true%
    \global\blkLvlAtClassdef@mlpr=\blkLvl@mlpr%
    \global\advance\blkLvl@mlpr\@ne%
    \keywordStyle@mlpr%
  \fi
}

\newcommand\processMidClassdefKW@mlpr
{%
  %only for typesetting those as keywords in inline code
  \ifOverridecontext@mlpr@%
    \keywordStyle@mlpr%
  \else
    \ifWithinSectionTitle@mlpr@%
    \else
      \ifInClassdef@mlpr@%
        \resetEndKW@mlpr%
        \global\advance\blkLvl@mlpr\@ne%
        \keywordStyle@mlpr%
      \fi
    \fi
  \fi
}

\newcommand\processEndKW@mlpr
{%
  % only for typesetting those as ``last element'' in inline code
  \ifOverridecontext@mlpr@% 
    \lastElemStyle@mlpr%
  \else
    \ifWithinSectionTitle@mlpr@%
    \else
      \ifClosingEndKW@mlpr@%
        \lst@ifLmode%
        \else
          \ifnum\blkLvl@mlpr>0%
            \global\advance\blkLvl@mlpr\m@ne%
          \fi
          \ifnum\blkLvl@mlpr=\blkLvlAtClassdef@mlpr%
            \global\InClassdef@mlpr@false%
          \fi
          \keywordStyle@mlpr%
        \fi
      \else
        \lst@ifLmode%
        \else
          \lastElemStyle@mlpr%
        \fi
      \fi
    \fi
  \fi
}


% --- strings ---
\newcommand\processString@mlpr
{%
  \ifWithinSectionTitle@mlpr@%
  \else
    \stringStyle@mlpr%  
  \fi
}

% --- macro for handling line continuation ---
\newcommand\processDotDotDot@mlpr
{%
  \lst@CalcLostSpaceAndOutput%
  \ifWithinSectionTitle@mlpr@%
    ...%
  \else
    \lst@ifLmode%
      ...%
    \else
      {\keywordStyle@mlpr...}%
      \lst@Lmodetrue%
    \fi
    \commentStyle@mlpr%
  \fi
}

% --- macro for processing section title ---
\newlength\emHeight@mlpr
\newlength\jayDepth@mlpr
\newlength\sectionRuleOffset@mlpr
\newlength\sectionRuleThickness@mlpr
\newcommand\sectionRuleThicknessRatio@mlpr{.05}

\newcommand\processSectionTitle@mlpr
{%
  \ifWithinSectionTitle@mlpr@%
    \sectionTitleStyle@mlpr%
  \else
    \ifNonWhiteOccured@mlpr@%
      \lst@Lmodetrue%
      \commentStyle@mlpr%
    \else % a section title is starting here
      \global\WithinSectionTitle@mlpr@true%
      \resetEndKW@mlpr%
      \drawSectionRule@mlpr%
      \sectionTitleStyle@mlpr%
    \fi
  \fi
}

% helper macro for drawing horizontal rule in \processSectionTitle@mlpr 
\newcommand\drawSectionRule@mlpr
{%
  \bgroup%
    % calculate the vertical offset for the rule
    \setlength\emHeight@mlpr{\fontcharht\font`M}%
    \setlength\jayDepth@mlpr{\fontchardp\font`j}%
    \setlength\sectionRuleOffset@mlpr%
    {%
      \dimexpr.5\emHeight@mlpr%
             +.5\baselineskip%
             -.5\jayDepth@mlpr\relax%
    }%
    \setlength\sectionRuleThickness@mlpr%
    {%
      \sectionRuleThicknessRatio@mlpr\baselineskip%
    }%
    \color{sectionRuleColor@mlpr}%
    \ifShowCellrules@mlpr@%
      \makebox[0em][l]%
      {%
        \raisebox{\sectionRuleOffset@mlpr}[0pt][0pt]%
          {\rule{\lst@linewidth}{\sectionRuleThickness@mlpr}}%
      }%
    \fi
  \egroup% 
}

\newcommand\processSharedVar@mlpr
{%
  \ifWithinSectionTitle@mlpr@%
  \else
      \sharedvarStyle@mlpr%
  \fi
}


% ----- Hooking into listings -----

% --- InitVarsEOL hook ---
\newcommand\addedToInitVarsEOL@mlpr{} % polymorphic macro for InitVarsEOL
\newcommand\@ddedToInitVarsEOL@mlpr
{%
  % This avoids continuation of unterminated string literals on next line.
  \ifInStr@mlpr@%
    \global\InStr@mlpr@false%
    \lst@LeaveMode%
  \fi
  % we're not in a section title...
  \global\WithinSectionTitle@mlpr@false%
  % ...but a section title is allowed to start here
  \global\NonWhiteOccured@mlpr@false%
}
\lst@AddToHook{InitVarsEOL}{\addedToInitVarsEOL@mlpr}

% --- EndGroup hook ---
\newcommand\addedToEndGroup@mlpr{} % polymorphic macro for EndGroup
\newcommand\@ddedToEndGroup@mlpr
{%
  % if we were inside a string, we're now getting out of it
  \ifInStr@mlpr@%
    \global\InStr@mlpr@false%
  \fi
}
\lst@AddToHook{EndGroup}{\addedToEndGroup@mlpr}

% --- PostOutput hook ---
\newcommand\addedToPostOutput@mlpr{} % polymorphic macro for PostOuput
\newcommand\@ddedToPostOutput@mlpr
{%
  % At the first PostOutput, it's too late for a section title to start.
  \global\NonWhiteOccured@mlpr@true%
}
\lst@AddToHook{PostOutput}{\addedToPostOutput@mlpr}

% --- PreInit Hook ---
% Now we apply all those patches at the PreInit hook,
% under the condition that \lst@language and \languageNormedDefd@mlpr
% expand (once) to the same replacement text.
\newcommand\addedToPreInitHook@mlpr
{%
  \ifx\lst@language\languageNormedDefd@mlpr%
    \renewcommand\addedToInitVarsEOL@mlpr\@ddedToInitVarsEOL@mlpr%
    \renewcommand\addedToEndGroup@mlpr\@ddedToEndGroup@mlpr%
    \renewcommand\addedToPostOutput@mlpr\@ddedToPostOutput@mlpr%
  \fi
}
\lst@AddToHook{PreInit}{\addedToPreInitHook@mlpr}

% --- DeInit hook ---
% We reset counters apply at the DeInit hook,
% under the condition that \lst@language and \languageNormedDefd@mlpr
% expand (once) to the same replacement text.
\newcommand\addedToDeInitHook@mlpr
{%
  \ifx\lst@language\languageNormedDefd@mlpr%
    \resetEndKW@mlpr%
    \resetClassdefKW@mlpr%
  \fi
}
\lst@AddToHook{DeInit}{\addedToDeInitHook@mlpr}


% --- Macros for placeholders ---

% Placeholder colors
\definecolor{placeholderColor@mlpr}{RGB}{209,0,86}

% Macros for placeholder delimiters
\newcommand\placeholderOpDelim@mlpr{\textlangle}
\newcommand\placeholderClDelim@mlpr{\textrangle}
\newcommand\placeholderDelimFontSpecs@mlpr{\rmfamily\upshape}
\newcommand\placeholderContentFontSpecs@mlpr{\rmfamily\itshape}

\newcommand\placeholderStyle@mlpr
{%
  \placeholderContentFontSpecs@mlpr%
  \color{placeholderColor@mlpr}%
}

% Macro for conditional italic correction
% (in case the font shape is either italic or slanted)
\newcommand\condItalicCorrection@mlpr
{%
  % After checking that \long@f@shape@mlpr is definable, we
  % define it as a long macro that expands to the current font shape.
  \newcommand\long@f@shape@mlpr{}%
  \long\edef\long@f@shape@mlpr{\f@shape}%
  \ifx\long@f@shape@mlpr\itdefault%
    \/%
  \else
    \ifx\long@f@shape@mlpr\sldefault%
      \/%
    \fi
  \fi
}

% --- User macro for typesetting snippet placeholders ---
\newcommand\snippetPlaceholder[1]
{%
  \bgroup%
    \placeholderStyle@mlpr%
    \bgroup%
      % opening delimiter
      \placeholderDelimFontSpecs@mlpr%
      \placeholderOpDelim@mlpr%
    \egroup%
    % placeholder content
    #1\condItalicCorrection@mlpr%
    \bgroup%
      % closing delimiter
      \placeholderDelimFontSpecs@mlpr%
      \placeholderClDelim@mlpr%
    \egroup%
  \egroup%
}


% --- built-in matlab-prettifier styles ---

% Quick \& easy style, for those who don't want to bother with customization
\lstdefinestyle{Matlab-stdstyle}
{
  language   = \languageNormedDefd@mlpr,
  frame       = single,
  rulecolor   = \color{black!67},
  numbers     = left,
  numberstyle = \color{black!33}\footnotesize,
  breaklines  = true,
}

% Black & white style
\lstdefinestyle{Matlab-bwstyle}
{
  language            = \languageNormedDefd@mlpr,
  mlkeywordstyle      = \color[gray]{0}             \bfseries        ,
  mlcommentstyle      = \color[gray]{.75}                    \itshape,
  mlstringstyle       = \color[gray]{.5}                             ,
  mlsyscomstyle       = \color[gray]{.25}                            ,
  mlsectiontitlestyle = \color[gray]{.75}           \bfseries\itshape,
  mlsharedvarstyle    = \color[gray]{0}                              ,
  mlplaceholderstyle  = \color[gray]{0}  \rmfamily           \itshape,
  frame               = single,
  rulecolor           = \color{black!67},
  numbers             = left,
  numberstyle         = \color{black!33},
  breaklines          = true,
}

% Style very similar to that of the Pygments lexer called `MatlabLexer',
% (see http://pygments.org/docs/lexers/). This style basically mimics
% the output you get with the minted, verbments, and pythontex packages.
\lstdefinestyle{Matlab-pygstyle}
{
  language            = \languageNormedDefd@mlpr,
  mllastelementstyle  = \color[RGB]{127,000,000}                            ,
  mlkeywordstyle      = \color[RGB]{000,127,000}           \bfseries        ,
  mlcommentstyle      = \color[RGB]{063,127,127}                    \itshape,
  mlstringstyle       = \color[RGB]{186,034,034}                            ,
  mlsyscomstyle       = \color[RGB]{000,127,000}                            ,
  mlsectiontitlestyle = \color[RGB]{063,127,127}                    \itshape,
  mlsharedvarstyle    = \color[RGB]{034,034,186}                            ,
  mlplaceholderstyle  = \color[RGB]{127,063,127}\rmfamily           \itshape,
  frame               = single,
  rulecolor           = \color{black!67},
  numbers             = left,
  numberstyle         = \color{black!33},
  breaklines          = true,
}
%TODO % digit color is [RGB]{102,102,102}

\endinput