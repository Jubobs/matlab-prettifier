%% matlab-prettifier.sty
%% Copyright 2014 Julien Cretel <jubobs.matlab.prettifier at gmail.com>
%
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3
% of this license or (at your option) any later version.
% The latest version of this license is in
%   http://www.latex-project.org/lppl.txt
% and version 1.3 or later is part of all distributions of LaTeX
% version 2005/12/01 or later.
%
% This work has the LPPL maintenance status `maintained'.
% 
% The Current Maintainer of this work is Julien Cretel <jubobs.matlab.prettifier at gmail.com>
%
% This work currently consists of the file matlab-prettifier.sty.

% --- Package identification ---
\newcommand\pkgName@mlpretty{matlab-prettifier}
\newcommand\pkgDate@mlpretty{2014/02/15}
\newcommand\pkgVer@mlpretty{.alpha}
\newcommand\pkgDesc@mlpretty{LaTeX package for typesetting Matlab listings}
\NeedsTeXFormat{LaTeX2e}[2011/06/27]
\ProvidesClass{\pkgName@mlpretty}
[%
	\pkgDate@mlpretty{}	v\pkgVer@mlpretty{} \pkgDesc@mlpretty%
]

% --- Discard any option passed to the package ---
\DeclareOption*%
{%
	\OptionNotUsed
	\PackageWarning{\pkgName@mlpretty}{Unknown `\CurrentOption' option}
}	

% --- Process options ---
\ProcessOptions\relax

% --- Package dependencies ---
\RequirePackage{textcomp}[2005/09/27]
\RequirePackage{etoolbox}[2011/01/03]
\RequirePackage{xcolor}[2007/01/21]
\RequirePackage{listings}[2013/08/26]


% ----------- key=value interface ---
%TODO
% Note: Using the literate key in conjunction with Matlab-pretty is
% ill-advised, as it will clobber the package's literate replacements.
% So we define a new key macro for allowing the user to specify additional
% literate replacements without clobbering existing ones.
%\newcommand\addToLiterate@mlpretty#1%
%{%
%	\edef\lst@literate%
%	{%
%		\unexpanded\expandafter{\lst@literate} %
%		\unexpanded{#1}%
%	}%
%}
%\lst@Key{mlliterate}\relax{\addToLiterate@mlpretty{#1}}

\lst@Key{mlkeywordstyle}\relax{\renewcommand\keywordStyle@mlpretty{#1}}
\lst@Key{mllastelementstyle}\relax{\renewcommand\lastElemStyle@mlpretty{#1}}
\lst@Key{mlstringstyle}\relax{\renewcommand\stringStyle@mlpretty{#1}}
\lst@Key{mlcommentstyle}\relax{\renewcommand\commentStyle@mlpretty{#1}}
\lst@Key{mltidle}\relax{\renewcommand\tilde@mlpretty{#1}}
\lst@Key{mlsectionrulethickness}\relax%
  {\renewcommand\sectionRuleThicknessRatio@mlpretty{#1}}
\lst@Key{mlsectionrulecolor}\relax%
  {\colorlet{sectionRuleColor@mlpretty}{#1}}
\lst@Key{mlshowsectionrules}{false}[t]%
  {\lstKV@SetIf{#1}\ifShowCellrules@mlpretty@}
\lst@Key{mlsectiontitlestyle}\relax
  {\renewcommand\sectionTitleStyle@mlpretty{#1}}
\lst@Key{mlsyscomstyle}\relax{\renewcommand\syscomStyle@mlpretty{#1}}

% we create a new ``keyword'' class for variables with shared scope
% by using the very convenient internal listings macro \lst@InstallKeywords
\lst@InstallKeywords k{mlsharedvars}{mlsharedvarStyle@mlpretty}\relax%
  {mlsharedvarStyle@mlpretty}{}ld

% Here we define a sharedvarstyle key that is used by
% \lst@sharedvarStyle@mlpretty internally.
\lst@Key{mlsharedvarstyle}\relax{\renewcommand\sharedvarStyle@mlpretty{#1}}


% --- Language definition ---
\lstdefinelanguage{Matlab-pretty}
{%
	sensitive=true,% Matlab is case-sensitive.
	upquote=true,
	showstringspaces=false,
	rulecolor=\color{black}, % prevents listings bug (nonuniform rule color)
%	alsoletter={0123456789_},% to allow those chars in identifiers %TODO 
	%
	basicstyle=\basicStyle@mlpretty,
	%
	morekeywords=[257]% opening keywords unrelated to classdef
	{% 
		for,
		if,
		otherwise,
		parfor,
		spmd,
		switch,
		try,
		while,
	},
	keywordstyle=[257]\processOpRegKW@mlpretty,
	%
	morekeywords=[258]% `middle' keywords unrelated to classdef
	{%
		break,
		case,
		catch,
		continue,
		else,
		elseif,
		function,
		return,
	}, 
	keywordstyle=[258]\processMidKW@mlpretty,
	%
	morekeywords=[259]% `standalone' keywords
	{%
		global,
		persistent,
	}, 
	keywordstyle=[259]\processStdaKW@mlpretty,
	%
	morekeywords=[260]{classdef},	
	keywordstyle=[260]\processClDefKW@mlpretty,
	%
	morekeywords=[261]% `middle' keywords related to classdef
	{%
		enumeration,
		events,
		methods,
		properties,
	},
	keywordstyle=[261]\processMidClDefKW@mlpretty,
	% 
	morekeywords=[262]{end},
	keywordstyle=[262]\processEndKW@mlpretty,
	%
	literate=*%
		{(}{{\processOpBrkt@mlpretty(}}1
		{[}{{\processOpBrkt@mlpretty[}}1
		{\{}{{\processOpBrkt@mlpretty\{}}1
		{)}{{\processClBrkt@mlpretty)}}1
		{]}{{\processClBrkt@mlpretty]}}1
		{\}}{{\processClBrkt@mlpretty\}}}1
		{)'}{{\processClBrkt@mlpretty)}{\textquotesingle}}2
		{]'}{{\processClBrkt@mlpretty]}{\textquotesingle}}2
		{\}'}{{\processClBrkt@mlpretty\}}{\textquotesingle}}2
		{~}{{\tilde@mlpretty}}1,
	%
	% strings
	morestring=[m]',
	stringstyle=\processString@mlpretty,
	%
	% comments
	morecomment=[l]\%,                                       % to-end-of-line
	morecomment=[n]{\%\{\^^M}{\%\}\^^M},                     % block
	moredelim=**[il][\processDotDotDot@mlpretty]{...},       % line continuation
	moredelim=**[l][\processSectionTitle@mlpretty]{\%\%},    % code section
	moredelim=**[l][\processSectionTitle@mlpretty]{\%\%\ },  % code section
  commentstyle=\commentStyle@mlpretty,
	%
	% system commands
	moredelim=[l][\syscomStyle@mlpretty]{!},
	%
	% variables with shared scope
	mlsharedvarStyle@mlpretty = \processSharedVar@mlpretty,
}%
[% `listings' aspects needed
	keywords,
	strings,
	comments,
]


% --- State variables ---
% Counters and switches used as ``state variables''
% (used to keep track of context)
\newcount\opBktCount@mlpretty 		 % running count of (, [ and, { 
\newcount\clBktCount@mlpretty 		 % running count of ), ] and, }
\newcount\blkLvl@mlpretty				   % block nesting level
\newcount\blkLvlAtClDef@mlpretty	 % block nesting level at last classdef

\newif\ifClosingEndKW@mlpretty@            \ClosingEndKW@mlpretty@true
\newif\ifInClDef@mlpretty@                      \InClDef@mlpretty@false
\newif\ifInStr@mlpretty@                          \InStr@mlpretty@false
\newif\ifInLineCom@mlpretty@                  \InLineCom@mlpretty@false
\newif\ifTooLateForSectionTitle@mlpretty@%
                                 \TooLateForSectionTitle@mlpretty@false
\newif\ifWithinSectionTitle@mlpretty@\WithinSectionTitle@mlpretty@false


% --- Macros for resetting counters and switches ---
\newcommand\resetBktCount@mlpretty%
{%
	\global\opBktCount@mlpretty=0%
	\global\clBktCount@mlpretty=0%
}

\newcommand\resetEndKW@mlpretty%
{%
	\global\ClosingEndKW@mlpretty@true%
	\resetBktCount@mlpretty%
}

\newcommand\resetClDef@mlpretty%
{%
	\global\InClDef@mlpretty@false%
	\global\blkLvl@mlpretty=0%
	\global\blkLvlAtClDef@mlpretty=0%
}


% --- internal style macros ---

% Font family, series, shape, and size (color is defined separately)
\newcommand\basicFontSpecs@mlpretty{\ttfamily\normalsize}
\newcommand\lastElemFontSpecs@mlpretty{}
\newcommand\keywordFontSpecs@mlpretty{}
\newcommand\stringFontSpecs@mlpretty{}
\newcommand\commentFontSpecs@mlpretty{}
\newcommand\sectionTitleFontSpecs@mlpretty
  {\commentFontSpecs@mlpretty\bfseries}
\newcommand\syscomFontSpecs@mlpretty{}
\newcommand\sharedvarFontSpecs@mlpretty{}

% Matlab syntax highlighting colors
\colorlet{textColor@mlpretty}{black}                      % text
\colorlet{lastElemColor@mlpretty}{textColor@mlpretty}     % end
\definecolor{keywordColor@mlpretty}{RGB}{000,000,255}     % keywords
\definecolor{stringColor@mlpretty}{RGB}{160,032,240}      % strings
\definecolor{commentColor@mlpretty}{RGB}{034,139,034}     % comments
\definecolor{sectionTitleColor@mlpretty}{RGB}{034,139,034}% section titles
\colorlet{sectionRuleColor@mlpretty}{black!15}            % code-section rule
\definecolor{syscomColor@mlpretty}{RGB}{178,140,000}      % system commands
\definecolor{sharedvarColor@mlpretty}{RGB}{000,163,163}   % shared scope

% More Matlab colors (currently not used by matlab-prettifier)
\colorlet{bgColor@mlpretty}{white}		                     % background color
\definecolor{untermStringColor@mlpretty}{RGB}{178,000,000}% unterm. strings
\definecolor{syntaxErrorColor@mlpretty}{RGB}{255,000,000} % Syntax errors

% Additional custom colors
\colorlet{numbersColor@matlabpretty}{gray}

\newcommand\basicStyle@mlpretty%
{%
  \basicFontSpecs@mlpretty%
  \color{textColor@mlpretty}%
}

\newcommand\lastElemStyle@mlpretty%
{%
  \lastElemFontSpecs@mlpretty%
  \color{lastElemColor@mlpretty}%
}

\newcommand\keywordStyle@mlpretty%
{%
  \keywordFontSpecs@mlpretty%
  \color{keywordColor@mlpretty}%
}

\newcommand\stringStyle@mlpretty%
{%
  \global\InStr@mlpretty@true%
  \stringFontSpecs@mlpretty%
  \color{stringColor@mlpretty}%
}

\newcommand\commentStyle@mlpretty%
{%
  \commentFontSpecs@mlpretty%
  \color{commentColor@mlpretty}%
}

\newcommand\sectionTitleStyle@mlpretty%
{%
  \sectionTitleFontSpecs@mlpretty%
  \color{sectionTitleColor@mlpretty}%
}

\newcommand\syscomStyle@mlpretty%
{%
  \syscomFontSpecs@mlpretty%
  \color{syscomColor@mlpretty}%
}

\newcommand\sharedvarStyle@mlpretty%
{%
  \sharedvarFontSpecs@mlpretty%
  \color{sharedvarColor@mlpretty}%
}


% --- macros for processing keywords ---
\newcommand\processOpRegKW@mlpretty%
{%
  \ifWithinSectionTitle@mlpretty@%
  \else%
		\resetEndKW@mlpretty%
		\global\advance\blkLvl@mlpretty\@ne%
		\keywordStyle@mlpretty%
	\fi%
}

\newcommand\processMidKW@mlpretty%
{%
  \ifWithinSectionTitle@mlpretty@%
  \else%
	  \resetEndKW@mlpretty%
	  \keywordStyle@mlpretty%
  \fi%
}

\newcommand\processStdaKW@mlpretty%
{%
  \ifWithinSectionTitle@mlpretty@%
  \else%
		\resetEndKW@mlpretty%
		\keywordStyle@mlpretty%
	\fi%
}

\newcommand\processClDefKW@mlpretty%
{%
  \ifWithinSectionTitle@mlpretty@%
  \else%
		\resetEndKW@mlpretty%
		\global\InClDef@mlpretty@true%
		\global\blkLvlAtClDef@mlpretty=\blkLvl@mlpretty%
		\global\advance\blkLvl@mlpretty\@ne%
		\keywordStyle@mlpretty%
  \fi%
}

\newcommand\processMidClDefKW@mlpretty%
{%
  \ifWithinSectionTitle@mlpretty@%
  \else%
		\ifInClDef@mlpretty@%
			\resetEndKW@mlpretty%
			\global\advance\blkLvl@mlpretty\@ne%
			\keywordStyle@mlpretty%
		\fi%
	\fi%
}

\newcommand\processEndKW@mlpretty%
{%
  \ifWithinSectionTitle@mlpretty@%
  \else%
		\ifClosingEndKW@mlpretty@%
			\ifInLineCom@mlpretty@%
			\else%
				\ifnum\blkLvl@mlpretty>0%
					\global\advance\blkLvl@mlpretty\m@ne%
				\fi%
				\ifnum\blkLvl@mlpretty=\blkLvlAtClDef@mlpretty%
					\global\InClDef@mlpretty@false%
				\fi%
				\keywordStyle@mlpretty%
			\fi%
		\else%
		  \lastElemStyle@mlpretty%
		\fi%
	\fi%
}


% --- macros for processing opening and closing brackets ---
\newcommand\processOpBrkt@mlpretty%
{%
  \ifWithinSectionTitle@mlpretty@%
  \else%
		\ifClosingEndKW@mlpretty@%
			\global\ClosingEndKW@mlpretty@false%
		\fi%
		\global\advance\opBktCount@mlpretty by \@ne%
	\fi%
}

\newcommand\processClBrkt@mlpretty%
{%
  \ifWithinSectionTitle@mlpretty@%
  \else%
		\ifClosingEndKW@mlpretty@%
			\resetBktCount@mlpretty%
		\else%
			\global\advance\clBktCount@mlpretty by \@ne%
			\ifnum\clBktCount@mlpretty<\opBktCount@mlpretty%
			\else%
				\global\ClosingEndKW@mlpretty@true%
			\fi%
		\fi%
	\fi%
}

% --- strings ---
\newcommand\processString@mlpretty%
{%
  \ifWithinSectionTitle@mlpretty@%
  \else%
    \stringStyle@mlpretty%  
  \fi%
}

% --- macro for handling line continuation ---
\newcommand\processDotDotDot@mlpretty%
{%
	\lst@CalcLostSpaceAndOutput%
	\ifWithinSectionTitle@mlpretty@%
	  ...%
  \else%
		\ifInLineCom@mlpretty@%
			...%
		\else%
			\global\InLineCom@mlpretty@true%
			{\keywordStyle@mlpretty...}%
		\fi%
		\commentStyle@mlpretty%
	\fi%
}

% --- macro for processing section title ---
\newlength\emHeight@mlpretty
\newlength\jayDepth@mlpretty
\newlength\sectionRuleOffset@mlpretty
\newlength\sectionRuleThickness@mlpretty
\newcommand\sectionRuleThicknessRatio@mlpretty{.05}

\newcommand\processSectionTitle@mlpretty%
{%
  \ifWithinSectionTitle@mlpretty@% to avoid drawing the rule multiple times
  \else%
	  \global\WithinSectionTitle@mlpretty@true%
	  \resetEndKW@mlpretty%
	  \commentStyle@mlpretty%
	  \ifTooLateForSectionTitle@mlpretty@%
	  \else%
	    \bgroup%
	      % calculate the vertical offset for the rule
	      \setlength\emHeight@mlpretty{\fontcharht\font`M}%
        \setlength\jayDepth@mlpretty{\fontchardp\font`j}%
        \setlength\sectionRuleOffset@mlpretty%
				{%
				  \dimexpr.5\emHeight@mlpretty%
				         +.5\baselineskip%
				         -.5\jayDepth@mlpretty\relax%
				}%
				\setlength\sectionRuleThickness@mlpretty%
				{%
				  \sectionRuleThicknessRatio@mlpretty\baselineskip%
        }%
			  \color{sectionRuleColor@mlpretty}%
			  \ifShowCellrules@mlpretty@%
				  \makebox[0em][l]%
				  {%
				    \raisebox{\sectionRuleOffset@mlpretty}[0pt][0pt]%
				      {\rule{\lst@linewidth}{\sectionRuleThickness@mlpretty}}%
				  }%
				\fi%
	    \egroup%
	    \sectionTitleStyle@mlpretty%
	  \fi%
	\fi%
}

\newcommand\processSharedVar@mlpretty%
{%
  \ifWithinSectionTitle@mlpretty@%
  \else%
      \sharedvarStyle@mlpretty%
  \fi%
}


% Patch to make literate replacement of ) work as expected
% when breaklines is set to true.
\newcommand\patchSelectCharTable@mlpretty%
{%
	\patchcmd{\lsthk@SelectCharTable}{`)}{``}{}{}%
}

\newcommand\unpatchSelectCharTable@mlpretty%
{%
	\patchcmd{\lsthk@SelectCharTable}{``}{`)}{}{}%
}


% --- macro for literate replacement of tilde character ---
\newcommand\tilde@mlpretty{\raisebox{0.5ex}{\texttildelow}}


% --- macros for handling code sections in hooks ---
\newcommand\addedToEveryLineCodeSection@mlpretty%
{%
  \global\TooLateForSectionTitle@mlpretty@false%
}

\newcommand\addedToPostOutputCodeSection@mlpretty%
{%
  \global\TooLateForSectionTitle@mlpretty@true%
}

% --- macros for handling unterminated string literal ---
\newcommand\addedToEOLHookUntermStr@mlpretty%
{%
	\ifInStr@mlpretty@%
		\global\InStr@mlpretty@false%
		\lst@LeaveMode%
	\fi%
}

\newcommand\addedToEndGroupHookUntermStr@mlpretty%
{%
	\ifInStr@mlpretty@%
		\global\InStr@mlpretty@false%
	\fi%
}


\newcommand\addedToEOLHookDotDotDot@mlpretty%
{%
	\global\InLineCom@mlpretty@false%
}


% --- Macros for adding to listings hooks ---
% EOL hook
\newcommand\addedToEOL@mlpretty{}
\newcommand\@ddedToEOL@mlpretty%
{%
	\addedToEOLHookDotDotDot@mlpretty%
	\addedToEOLHookUntermStr@mlpretty%
	\global\WithinSectionTitle@mlpretty@false%
}
\lst@AddToHook{EOL}{\addedToEOL@mlpretty}

% EndGroup hook
\newcommand\addedToEndGroup@mlpretty{}
\newcommand\@ddedToEndGroup@mlpretty%
{%
	\addedToEndGroupHookUntermStr@mlpretty%
}
\lst@AddToHook{EndGroup}{\addedToEndGroup@mlpretty}

% EveryLine hook
\newcommand\addedToEveryLine@mlpretty{}
\newcommand\@ddedToEveryLine@mlpretty%
{%
  \addedToEveryLineCodeSection@mlpretty%
}
\lst@AddToHook{EveryLine}{\addedToEveryLine@mlpretty}

% PostOutput hook
\newcommand\addedToPostOutput@mlpretty{}
\newcommand\@ddedToPostOutput@mlpretty%
{%
  \addedToPostOutputCodeSection@mlpretty%
}
\lst@AddToHook{PostOutput}{\addedToPostOutput@mlpretty}


% --- matlab-prettifier listings environment and macro ---

\newcommand\atBeginCode@mlpretty[1][]%
{%
  \patchSelectCharTable@mlpretty%
	\renewcommand\addedToEOL@mlpretty{\@ddedToEOL@mlpretty}%
	\renewcommand\addedToEndGroup@mlpretty{\@ddedToEndGroup@mlpretty}%
	\renewcommand\addedToEveryLine@mlpretty{\@ddedToEveryLine@mlpretty}%
	\renewcommand\addedToPostOutput@mlpretty{\@ddedToPostOutput@mlpretty}%
	\lstset{language=Matlab-pretty,#1}%
}

\newcommand\atEndCode@mlpretty%
{%
	\renewcommand\addedToEOL@mlpretty{}%
	\renewcommand\addedToEndGroup@mlpretty{}%
	\renewcommand\addedToEveryLine@mlpretty{}%
	\renewcommand\addedToPostOutput@mlpretty{}%
	\resetEndKW@mlpretty%
	\resetClDef@mlpretty%
	\unpatchSelectCharTable@mlpretty%
}

% environment
\lstnewenvironment{matlabpretty}[1][]%
	{\atBeginCode@mlpretty[#1]}
	{\atEndCode@mlpretty}
	
% macro for creating custom matlab-prettifier environments
% Note: simply using \lstdefineenvironment wouldn't do, here,
% because matlab-prettifier must apply/undo patches at the
% beginning/end of the environment.
\newcommand\newmatlabprettyenvironment[2][]
{%
	\lstnewenvironment{#2}[1][]%
		{\atBeginCode@mlpretty[#1,##1]}%
		{\atEndCode@mlpretty}%
}

% Macro for source files.
% Note: here we pass the options to \lstinputlisting instead of
% \atBeginCode@mlpretty, otherwise options such as `firstline',
% `firstnumber', etc. have no effect
\newcommand\inputmatlabpretty[2][]%
{%
	{%
		\atBeginCode@mlpretty%
		\lstinputlisting[#1]{#2}%
		\atEndCode@mlpretty%
	}%
}


% --- inline code ---

\newcommand\applyCurrentFontsize@mlpretty% overrides the fontsize of \lst@basicstyle
{%
  \let\lst@basicstyleSaved@mlpretty\lst@basicstyle%
  \let\f@sizeSaved@mlpretty\f@size%
  \let\baselineskipSaved@mlpretty\baselineskip%
  \newcommand\lst@basicstyle%
  {%
      \lst@basicstyleSaved@mlpretty%
      \fontsize{\f@sizeSaved@mlpretty}{\baselineskipSaved@mlpretty}%
      \selectfont%
  }%
}

% inline Matlab code (no need for \atBeginCode and \atEndCode here)
\newcommand\matlabprettyinline[2][]
{%
  \bgroup
    \lstset{language=Matlab-pretty,#1}% preferable to lstinline[]{} which is an experimental feature of listings (as of v1.5b)
    \applyCurrentFontsize@mlpretty%
    \lstinline?#2?% % question mark as delimiter because unlikely to be needed in inline code.
  \egroup
}

% ... but that's a mouthful, so...
\newcommand\DefineCharForMatlabPrettyInline[1][]%
{%
  \newcommand\lst@shortinlinedef%
  {%
    \lstset{language=Matlab-pretty,#1}%
    \applyCurrentFontsize@mlpretty%
    \lstinline%
  }%
  \lstMakeShortInline@%
}%

\let\DeleteCharForMatlabPrettyInline\lstDeleteShortInline


% --- built-in matlab-prettifier styles (for users not necessarily familiar with listings) ---

% Quick style, for those who don't want to bother with customization
\lstdefinestyle{Matlab-easy-style}
{
  language   = Matlab-pretty,
  frame      = single,
  numbers    = left,
  breaklines = true,
}

% Black & white style
\lstdefinestyle{Matlab-bw-style}
{
  language            = Matlab-pretty,
  mlkeywordstyle      = \color[gray]{0}  \bfseries        ,
  mlcommentstyle      = \color[gray]{.75}         \itshape,
  mlstringstyle       = \color[gray]{.5}                  ,
  mlsyscomstyle       = \color[gray]{.25}                 ,
  mlsectiontitlestyle = \color[gray]{.75}\bfseries\itshape,
  mlsharedvarstyle    = \color[gray]{0}                   ,
  frame               = single,
  numbers             = left,
  breaklines          = true,
}

% Style very similar to the Pygments lexer called `MatlabLexer',
% (see http://pygments.org/docs/lexers/). This style can be used
% to typeset Matlab code in a way similar to how minted, verbments,
% and pythontex do it.
\lstdefinestyle{Matlab-pygsty-style}
{
  language            = Matlab-pretty,
  mllastelementstyle  = \color[RGB]{127,063,127}                 ,
  mlkeywordstyle      = \color[RGB]{000,127,000}\bfseries        ,
  mlcommentstyle      = \color[RGB]{063,127,127}         \itshape,
  mlstringstyle       = \color[RGB]{186,034,034}                 ,
  mlsyscomstyle       = \color[RGB]{000,127,000}                 ,
  mlsectiontitlestyle = \color[RGB]{063,127,127}         \itshape,
  mlsharedvarstyle    = \color[RGB]{127,127,063}                 ,
  frame               = single,
  numbers             = left,
  breaklines          = true,
}
%TODO % digit color is [RGB]{102,102,102}


% --- Macros for placeholders ---

% Placeholder colors
\definecolor{placeholderDelimColor@mlpretty}{RGB}{209,0,86}
\definecolor{placeholderContentColor@mlpretty}{RGB}{209,0,86}

% Macros for placeholder delimiters
\newcommand\placeholderOpDelim@mlpretty{\textlangle}
\newcommand\placeholderClDelim@mlpretty{\textrangle}
\newcommand\placeholderDelimStyle@mlpretty{\normalfont\upshape}
\newcommand\placeholderContentStyle@mlpretty{\normalfont\itshape}

% Macro for conditional italic correction
\newcommand\itCorr@mlpretty%
{%
	\ifdefstring{\f@shape}{sl}
		{\/}
		{%
			\ifdefstring{\f@shape}{it}
			{\/}
			{}%
		}%
}

% --- User macro for typesetting snippet placeholders ---
\newcommand\snippetPlaceholder[1]%
{%
	\bgroup
		% opening delimiter
		\placeholderDelimStyle@mlpretty%
		\color{placeholderDelimColor@mlpretty}%
		\placeholderOpDelim@mlpretty%
	\egroup
	\bgroup
		% placeholder content
		\placeholderContentStyle@mlpretty%
		\color{placeholderContentColor@mlpretty}%
		#1\itCorr@mlpretty%
	\egroup
	\bgroup
		% closing delimiter
		\placeholderDelimStyle@mlpretty%
		\color{placeholderDelimColor@mlpretty}%
		\placeholderClDelim@mlpretty%
	\egroup
}


\endinput