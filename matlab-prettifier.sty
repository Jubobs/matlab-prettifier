%% matlab-prettifier.sty
%% Copyright 2014 Julien Cretel
%
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3
% of this license or (at your option) any later version.
% The latest version of this license is in
%   http://www.latex-project.org/lppl.txt
% and version 1.3 or later is part of all distributions of LaTeX
% version 2005/12/01 or later.
%
% This work has the LPPL maintenance status `maintained'.
% 
% The Current Maintainer of this work is Julien Cretel
%
% This work currently consists of the file matlab-prettifier.sty.

% --- Package identification ---
\newcommand\PkgName@mlpretty{matlab-prettifier}
\newcommand\PkgDate@mlpretty{2014/02/05}
\newcommand\PkgVer@mlpretty{0.1}
\newcommand\PkgDescript@mlpretty{LaTeX package for typesetting Matlab listings}
\NeedsTeXFormat{LaTeX2e}
\ProvidesClass{\PkgName@mlpretty}
[%
	\PkgDate@mlpretty{}
	v\PkgVer@mlpretty{}
	\PkgDescript@mlpretty%
]

% --- Discard any option passed to the package ---
\DeclareOption*%
{%
	\OptionNotUsed
	\PackageWarning{\PkgName@mlpretty}{Unknown `\CurrentOption' option}
}	

% --- Process options ---
\ProcessOptions\relax

% --- Require packages ---
\RequirePackage{etoolbox}
\RequirePackage{xcolor}
\RequirePackage{textcomp} % for upquote option
\RequirePackage{listings}

% --- Language definition (with a few dirty tricks) ---
\lstdefinelanguage{Matlab-pretty}
{%
	sensitive=true,% Matlab is case-sensitive.
	upquote=true,
	showstringspaces=false,
	%
	basicstyle=\BasicStyle@mlpretty,
	%
	% The keywords defined here are based on the list returned by the Matlab (R2013a) function 'iskeyword'.
	%TODO Multiple classes of keywords are used here.
	morekeywords=[257]% keywords opening blocks that are not related to class definition
	{% 
		for,
		if,
		otherwise,
		parfor,
		spmd,
		switch,
		try,
		while,
	},
	keywordstyle=[257]\ProcessOpRegKW@mlpretty,
	%
	morekeywords=[258]% keywords occurring within blocks that are not related to class definition
	{%
		break,
		case,
		catch,
		continue,
		else,
		elseif,
		function, %TODO ?
		return,
	}, 
	keywordstyle=[258]\ProcessMidKW@mlpretty,
	%
	morekeywords=[259]% standalone keywords
	{%
		global,
		persistent,
	}, 
	keywordstyle=[259]\ProcessStdaKW@mlpretty,
	%
	morekeywords=[260]{classdef},	
	keywordstyle=[260]\ProcessClDefKW@mlpretty,
	%
	morekeywords=[261]% keywords occuring within classdef blocks
	{%
		enumeration,
		events,
		methods,
		properties,
	},
	keywordstyle=[261]\ProcessMidClDefKW@mlpretty,
	% 
	morekeywords=[262]{end},
	keywordstyle=[262]\ProcessEndKW@mlpretty,
	%
	literate=%
		{(}{{\ProcessOpBrkt@mlpretty(}}1
		{[}{{\ProcessOpBrkt@mlpretty[}}1
		{\{}{{\ProcessOpBrkt@mlpretty\{}}1
		{)}{{\ProcessClBrkt@mlpretty)}}1
		{]}{{\ProcessClBrkt@mlpretty]}}1
		{\}}{{\ProcessClBrkt@mlpretty\}}}1
		{)'}{{\ProcessClBrkt@mlpretty)}{\textquotesingle}}2
		{]'}{{\ProcessClBrkt@mlpretty]}{\textquotesingle}}2
		{\}'}{{\ProcessClBrkt@mlpretty\}}{\textquotesingle}}2
		{~}{{\Tilde@mlpretty}}1,
	%
	% strings
	morestring=[m]',
	stringstyle=\StringStyle@mlpretty,
	%
	% comments
	morecomment=[l]\%, 																% to-end-of-line comments
	morecomment=[s]{\%\{\^^M}{\%\}\^^M},							% multiple-line comments
	moredelim=**[il][\ProcessDotDotDot@mlpretty]{...},	% line-continuation token
	commentstyle=\commentstyle@mlpretty,
	%
	% system commands
	moredelim=[l][\color{orange}]{!},
}%
[% `listings' aspects needed
	keywords,
	strings,
	comments,
]



% --- internal style macros ---

% font shape and size
\newcommand\basicshapesize@mlpretty{\ttfamily\normalsize}
\newcommand\keywordshapesize@mlpretty\basicshapesize@mlpretty
\newcommand\stringshapesize@mlpretty\basicshapesize@mlpretty
\newcommand\commentshapesize@mlpretty\basicshapesize@mlpretty

% Desktop tool colors
\colorlet{textcolor@mlpretty}{black}		% Text color 				%TODO currently unused
\colorlet{bgcolor@mlpretty}{white}			% Background color 	%TODO currently unused

% Matlab syntax highlighting colors
\definecolor{keywordcolor@mlpretty}{RGB}{000,000,255}			% Keywords
\definecolor{stringcolor@mlpretty}{RGB}{160,032,240}			% Strings
\definecolor{syscomcolor@mlpretty}{RGB}{178,140,000}			% System commands
\definecolor{commentcolor@mlpretty}{RGB}{034,139,034}			% Comments
\definecolor{noendstringcolor@mlpretty}{RGB}{178,000,000}	% Unterminated strings
\definecolor{syntaxerrorcolor@mlpretty}{RGB}{255,000,000}	% Syntax errors

\newcommand\BasicStyle@mlpretty{\basicshapesize@mlpretty\color{textcolor@mlpretty}}
\newcommand\keywordstyle@mlpretty{\keywordshapesize@mlpretty\color{keywordcolor@mlpretty}}
\newcommand\StringStyle@mlpretty{\global\InStr@mlpretty@true\stringshapesize@mlpretty\color{stringcolor@mlpretty}}
\newcommand\commentstyle@mlpretty{\commentshapesize@mlpretty\color{commentcolor@mlpretty}}


% --- State variables ---

\newcounter{OpBktCount@mlpretty} % running count of occurences of (, [ and, { 
\newcounter{ClBktCount@mlpretty} % running count of occurences of ), ] and, }
\newcounter{BlkLvl@mlpretty}					% keeps track of block nesting level
\newcounter{BlkLvlAtClDef@mlpretty}	% saves the block nesting level at the last occurence of the classdef keyword

\newif\ifClosingEndKW@mlpretty@\ClosingEndKW@mlpretty@true % if true, the end keyword acts as a closing keyword
\newif\ifInClDef@mlpretty@\InClDef@mlpretty@false					% if true, %TODO
\newif\ifInStr@mlpretty@\InStr@mlpretty@false							% if true, we're inside a string
\newif\ifInLineCom@mlpretty@\InLineCom@mlpretty@false			% if true, we're inside a to-the-end-of-the-line comment


% --- Macros for resetting counters and switches ---
\newcommand\ResetBktCount@mlpretty%
{%
	\setcounter{OpBktCount@mlpretty}{0}%
	\setcounter{ClBktCount@mlpretty}{0}%
}

\newcommand\ResetEndKW@mlpretty%
{%
	\global\ClosingEndKW@mlpretty@true%
	\ResetBktCount@mlpretty%
}

\newcommand\ResetClDef@mlpretty%
{%
	\global\InClDef@mlpretty@false
	\setcounter{BlkLvl@mlpretty}{0}
	\setcounter{BlkLvlAtClDef@mlpretty}{0}
}


% --- macro for processing keywords ---
\newcommand\ProcessOpRegKW@mlpretty%
{%
	\ResetEndKW@mlpretty%
	\stepcounter{BlkLvl@mlpretty}%
	\keywordstyle@mlpretty%
}

\newcommand\ProcessMidKW@mlpretty%
{%
	\ResetEndKW@mlpretty%
	\keywordstyle@mlpretty%
}

\newcommand\ProcessStdaKW@mlpretty%
{%
	\ResetEndKW@mlpretty%
	\keywordstyle@mlpretty%
}

\newcommand\ProcessClDefKW@mlpretty%
{%
	\ResetEndKW@mlpretty%
	\global\InClDef@mlpretty@true%
	\setcounter{BlkLvlAtClDef@mlpretty}{\value{BlkLvl@mlpretty}}%
	\stepcounter{BlkLvl@mlpretty}%
	\keywordstyle@mlpretty%
}

\newcommand\ProcessMidClDefKW@mlpretty
{%
	\ifInClDef@mlpretty@%
		\ResetEndKW@mlpretty%
		\addtocounter{BlkLvl@mlpretty}{1}%
		\keywordstyle@mlpretty%
	\fi%
}

\newcommand\ProcessEndKW@mlpretty%
{%	
	\ifClosingEndKW@mlpretty@%
		\ifInLineCom@mlpretty@%
		\else%
			\ifnum\value{BlkLvl@mlpretty}>0%
				\addtocounter{BlkLvl@mlpretty}{-1}%
			\fi%
			\ifnum\value{BlkLvl@mlpretty}=\value{BlkLvlAtClDef@mlpretty}%
				\global\InClDef@mlpretty@false%
			\fi%
			\keywordstyle@mlpretty%
		\fi%
	\fi%
}


% --- macros for processing opening and closing brackets ---
\newcommand\ProcessOpBrkt@mlpretty%
{%
	\ifClosingEndKW@mlpretty@%
		\global\ClosingEndKW@mlpretty@false%
	\fi%
	\stepcounter{OpBktCount@mlpretty}%
}

\newcommand\ProcessClBrkt@mlpretty%
{%
	\ifClosingEndKW@mlpretty@%
		\ResetBktCount@mlpretty%
	\else%
		\stepcounter{ClBktCount@mlpretty}%
		\ifnum\value{ClBktCount@mlpretty}<\value{OpBktCount@mlpretty}%
		\else%
			\global\ClosingEndKW@mlpretty@true%
		\fi%
	\fi%
}

% Patch to make literate replacement of ) work as expected when breaklines is set to true
%TODO Find a way to undo that patch for listings other than Matlab
\newcommand\PatchSelectCharTable@mlpretty%
{%
	\patchcmd{\lsthk@SelectCharTable}{)}{`}{}{}%
}
\PatchSelectCharTable@mlpretty


% --- macro for literate replacement of tilde character ---
\newcommand\Tilde@mlpretty{\raisebox{0.5ex}\texttildelow}


% --- macros for handling unterminated string literal ---
\newcommand\AddedToEOLHookUntermStr@mlpretty
{%
	\ifInStr@mlpretty@%
		\global\InStr@mlpretty@false%
		\lst@LeaveMode%
	\fi%
}

\newcommand\AddedToEndGroupHookUntermStr@mlpretty
{%
	\ifInStr@mlpretty@%
		\global\InStr@mlpretty@false%
	\fi%
}


% --- macros for handling line continuation ---
\newcommand\ProcessDotDotDot@mlpretty%
{%
	\lst@CalcLostSpaceAndOutput%
	\ifInLineCom@mlpretty@%
		...%
	\else%
		\global\InLineCom@mlpretty@true%
		{%
			%\ignorespaces
			\keywordstyle@mlpretty%
			...%
		}%
	\fi%
	\commentstyle@mlpretty%
}

\newcommand\AddedToEOLHookDotDotDot@mlpretty
{%
	\global\InLineCom@mlpretty@false%
}


% --- Add my macros to EOL and EndGroup hooks ---
% EOL hook
\newcommand\AddedToEOL@mlpretty{}
\newcommand\@ddedToEOL@mlpretty%
{%
	\AddedToEOLHookDotDotDot@mlpretty%
	\AddedToEOLHookUntermStr@mlpretty%
}
\lst@AddToHook{EOL}{\AddedToEOL@mlpretty}

% EndGroup hook
\newcommand\AddedToEndGroup@mlpretty{}
\newcommand\@ddedToEndGroup@mlpretty%
{%
	\AddedToEndGroupHookUntermStr@mlpretty%
}
\lst@AddToHook{EndGroup}{\AddedToEndGroup@mlpretty}


% --- Placeholders ---
% Macros for delimiters
\newcommand\placeholderdelimo@mlpretty{\textlangle}
\newcommand\placeholderdelimc@mlpretty{\textrangle}
\newcommand\placeholderdelimstyle@mlpretty{\normalfont\upshape}
\newcommand\placeholdercontentstyle@mlpretty{\normalfont\itshape}
% Placeholder colors
\definecolor{placeholderdelimcolor@mlpretty}{RGB}{209,0,86}	% Placeholder delimiter color	
\definecolor{placeholdercontentcolor@mlpretty}{RGB}{209,0,86}		% Placeholder text color

% --- macro for typesetting placeholders ---
\newcommand\lstmlplaceholder[1]
{%
	{%
		% opening delimiter
		\placeholderdelimstyle@mlpretty%
		\color{placeholderdelimcolor@mlpretty}%
		\placeholderdelimo@mlpretty%
	}{%
		% placeholder content
		\placeholdercontentstyle@mlpretty%
		\color{placeholdercontentcolor@mlpretty}%
		#1\italiccorrection@mlpretty%
	}{%
		% closing delimiter
		\placeholderdelimstyle@mlpretty%
		\color{placeholderdelimcolor@mlpretty}%
		\placeholderdelimc@mlpretty%
	}%
}

% --- auxiliary macro (for conditional italic correction in placeholder) ---
\newcommand\italiccorrection@mlpretty
{%
	\ifdefstring{\f@shape}{sl}
		{\/}
		{%
			\ifdefstring{\f@shape}{it}
			{\/}
			{}%
		}%
}



% ----------- key=value interface ---

% keys
\define@key{mlpretty}{basicstyle}{\def\BasicStyle@mlpretty{#1}}
\define@key{mlpretty}{keywordstyle}{\def\keywordstyle@mlpretty{#1}}
\define@key{mlpretty}{stringstyle}{\def\StringStyle@mlpretty{#1}}
\define@key{mlpretty}{commentstyle}{\def\commentstyle@mlpretty{#1}}

% define \mlprettyset, the matlab-prettifier equivalent to listings' \lstset
\lst@UserCommand\mlprettyset{\begingroup \lst@setcatcodes \mlprettyset@}
\def\mlprettyset@#1%
{%
	\endgroup
	\ifx\@empty#1%
		\@empty%
	\else%
		\setkeys{lst}{language=Matlab-pretty}%
		\setkeys{mlpretty}{#1}%
	\fi%
}

% --- matlab-prettifier listings environment and macro ---

\newcommand\StartingCode@mlpretty[1][]%
{%
	\renewcommand\AddedToEOL@mlpretty\@ddedToEOL@mlpretty%
	\renewcommand\AddedToEndGroup@mlpretty\@ddedToEndGroup@mlpretty%
	\lstset{language = Matlab-pretty,#1}% %TODO replace by my own macro
}

\newcommand\EndingCode@mlpretty%
{%
	\renewcommand\AddedToEOL@mlpretty{}%
	\renewcommand\AddedToEndGroup@mlpretty{}%
	\ResetEndKW@mlpretty%
	\ResetClDef@mlpretty%
}

\lstnewenvironment{matlablisting}[1][]%
	{\StartingCode@mlpretty[#1]}
	{\EndingCode@mlpretty}


\newcommand\inputmatlablisting[2][]%
{%
	{%
		\StartingCode@mlpretty[#1]%
		\lstinputlisting{#2}%
		\EndingCode@mlpretty%
	}%
}

\endinput