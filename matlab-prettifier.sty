%% matlab-prettifier.sty
%% Copyright 2014 Julien Cretel
%
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3
% of this license or (at your option) any later version.
% The latest version of this license is in
%   http://www.latex-project.org/lppl.txt
% and version 1.3 or later is part of all distributions of LaTeX
% version 2005/12/01 or later.
%
% This work has the LPPL maintenance status `maintained'.
% 
% The Current Maintainer of this work is Julien Cretel
%
% This work currently consists of the file matlab-prettifier.sty.

% --- Package identification ---
\newcommand\lstml@PkgName{matlab-prettifier}
\newcommand\lstml@PkgDate{2014/02/05}
\newcommand\lstml@PkgVer{0.1}
\newcommand\lstml@PkgDescript{LaTeX package for typesetting Matlab listings}
\NeedsTeXFormat{LaTeX2e}
\ProvidesClass{\lstml@PkgName}
[%
	\lstml@PkgDate{}
	v\lstml@PkgVer{}
	\lstml@PkgDescript%
]

% --- Discard any option passed to the package ---
\DeclareOption*%
{%
	\OptionNotUsed
	\PackageWarning{\lstml@PkgName}{Unknown `\CurrentOption' option}
}	

% --- Process options ---
\ProcessOptions\relax

% --- Require packages ---
\RequirePackage{etoolbox}
\RequirePackage{xcolor}
\RequirePackage{textcomp} % for upquote option
\RequirePackage{listings}

% --- Language definition (with a few dirty tricks) ---
\lstdefinelanguage{Matlab-pretty}
{%
	sensitive=true,% Matlab is case-sensitive.
	upquote=true,
	showstringspaces=false,
	%
	basicstyle=\lstml@BasicStyle,
	%
	% The keywords defined here are based on the list returned by the Matlab (R2013a) function 'iskeyword'.
	%TODO Multiple classes of keywords are used here.
	morekeywords=[257]% keywords opening blocks that are not related to class definition
	{% 
		for,
		if,
		otherwise,
		parfor,
		spmd,
		switch,
		try,
		while,
	},
	keywordstyle=[257]\lstml@ProcessOpRegKW,
	%
	morekeywords=[258]% keywords occurring within blocks that are not related to class definition
	{%
		break,
		case,
		catch,
		continue,
		else,
		elseif,
		function, %TODO ?
		return,
	}, 
	keywordstyle=[258]\lstml@ProcessMidKW,
	%
	morekeywords=[259]% standalone keywords
	{%
		global,
		persistent,
	}, 
	keywordstyle=[259]\lstml@ProcessStdaKW,
	%
	morekeywords=[260]{classdef},	
	keywordstyle=[260]\lstml@ProcessClDefKW,
	%
	morekeywords=[261]% keywords occuring within classdef blocks
	{%
		enumeration,
		events,
		methods,
		properties,
	},
	keywordstyle=[261]\lstml@ProcessMidClDefKW,
	% 
	morekeywords=[262]{end},
	keywordstyle=[262]\lstml@ProcessEndKW,
	%
	literate=%
		{(}{{\lstml@ProcessOpBrkt(}}1
		{[}{{\lstml@ProcessOpBrkt[}}1
		{\{}{{\lstml@ProcessOpBrkt\{}}1
		{)}{{\lstml@ProcessClBrkt)}}1
		{]}{{\lstml@ProcessClBrkt]}}1
		{\}}{{\lstml@ProcessClBrkt\}}}1
		{)'}{{\lstml@ProcessClBrkt)}{\textquotesingle}}2
		{]'}{{\lstml@ProcessClBrkt]}{\textquotesingle}}2
		{\}'}{{\lstml@ProcessClBrkt\}}{\textquotesingle}}2
		{~}{{\lstml@Tilde}}1,
	%
	% strings
	morestring=[m]',
	stringstyle=\lstml@StringStyle,
	%
	% comments
	morecomment=[l]\%, 																% to-end-of-line comments
	morecomment=[s]{\%\{\^^M}{\%\}\^^M},							% multiple-line comments
	moredelim=**[il][\lstml@ProcessDotDotDot]{...},	% line-continuation token
	commentstyle=\lstml@commentstyle,
	%
	% system commands
	moredelim=[l][\color{orange}]{!},
}%
[% `listings' aspects needed
	keywords,
	strings,
	comments,
]



% --- internal style macros ---

% font shape and size
\newcommand\lstml@basicshapesize{\ttfamily\normalsize}
\newcommand\lstml@keywordshapesize\lstml@basicshapesize
\newcommand\lstml@stringshapesize\lstml@basicshapesize
\newcommand\lstml@commentshapesize\lstml@basicshapesize

% Desktop tool colors
\colorlet{lstml@textcolor}{black}		% Text color 				%TODO currently unused
\colorlet{lstml@bgcolor}{white}			% Background color 	%TODO currently unused

% Matlab syntax highlighting colors
\definecolor{lstml@keywordcolor}{RGB}{000,000,255}			% Keywords
\definecolor{lstml@stringcolor}{RGB}{160,032,240}			% Strings
\definecolor{lstml@syscomcolor}{RGB}{178,140,000}			% System commands
\definecolor{lstml@commentcolor}{RGB}{034,139,034}			% Comments
\definecolor{lstml@noendstringcolor}{RGB}{178,000,000}	% Unterminated strings
\definecolor{lstml@syntaxerrorcolor}{RGB}{255,000,000}	% Syntax errors

\newcommand\lstml@BasicStyle{\lstml@basicshapesize\color{lstml@textcolor}}
\newcommand\lstml@keywordstyle{	\lstml@keywordshapesize\color{lstml@keywordcolor}}
\newcommand\lstml@StringStyle{\global\lstml@InStrtrue\lstml@stringshapesize\color{lstml@stringcolor}}
\newcommand\lstml@commentstyle{\lstml@commentshapesize\color{lstml@commentcolor}}


% --- State variables ---

\newcounter{lstml@OpBktCount} % running count of occurences of (, [ and, { 
\newcounter{lstml@ClBktCount} % running count of occurences of ), ] and, }
\newcounter{lstml@BlkLvl}					% keeps track of block nesting level
\newcounter{lstml@BlkLvlAtClDef}	% saves the block nesting level at the last occurence of the classdef keyword

\newif\iflstml@ClosingEndKW\lstml@ClosingEndKWtrue % if true, the end keyword acts as a closing keyword
\newif\iflstml@InClDef\lstml@InClDeffalse					% if true, %TODO
\newif\iflstml@InStr\lstml@InStrfalse							% if true, we're inside a string
\newif\iflstml@InLineCom\lstml@InLineComfalse			% if true, we're inside a to-the-end-of-the-line comment


% --- Macros for resetting counters and switches ---
\newcommand\lstml@ResetBktCount%
{%
	\setcounter{lstml@OpBktCount}{0}%
	\setcounter{lstml@ClBktCount}{0}%
}

\newcommand\lstml@ResetEndKW%
{%
	\global\lstml@ClosingEndKWtrue%
	\lstml@ResetBktCount%
}

\newcommand\lstml@ResetClDef%
{%
	\global\lstml@InClDeffalse
	\setcounter{lstml@BlkLvl}{0}
	\setcounter{lstml@BlkLvlAtClDef}{0}
}


% --- macro for processing keywords ---
\newcommand\lstml@ProcessOpRegKW%
{%
	\lstml@ResetEndKW%
	\stepcounter{lstml@BlkLvl}%
	\ignorespaces%
	\lstml@keywordstyle%
}

\newcommand\lstml@ProcessMidKW%
{%
	\lstml@ResetEndKW%
	\ignorespaces%
	\lstml@keywordstyle%
}

\newcommand\lstml@ProcessStdaKW%
{%
	\lstml@ResetEndKW%
	\ignorespaces%
	\lstml@keywordstyle%
}

\newcommand\lstml@ProcessClDefKW%
{%
	\lstml@ResetEndKW%
	\global\lstml@InClDeftrue%
	\setcounter{lstml@BlkLvlAtClDef}{\value{lstml@BlkLvl}}%
	\stepcounter{lstml@BlkLvl}%
	\ignorespaces%
	\lstml@keywordstyle%
}

\newcommand\lstml@ProcessMidClDefKW
{%
	\iflstml@InClDef%
		\lstml@ResetEndKW%
		\addtocounter{lstml@BlkLvl}{1}%
		\ignorespaces%
		\lstml@keywordstyle%
	\fi%
}

\newcommand\lstml@ProcessEndKW%
{%	
	\iflstml@ClosingEndKW%
		\iflstml@InLineCom%
		\else%
			\ifnum\value{lstml@BlkLvl}>0%
				\addtocounter{lstml@BlkLvl}{-1}%
			\fi%
			\ifnum\value{lstml@BlkLvl}=\value{lstml@BlkLvlAtClDef}%
				\global\lstml@InClDeffalse%
			\fi%
			\ignorespaces%
			\lstml@keywordstyle%
		\fi%
	\fi%
}


% --- macros for processing opening and closing brackets ---
\newcommand\lstml@ProcessOpBrkt%
{%
	\iflstml@ClosingEndKW%
		\global\lstml@ClosingEndKWfalse%
	\fi%
	\stepcounter{lstml@OpBktCount}%
}

\newcommand\lstml@ProcessClBrkt%
{%
	\iflstml@ClosingEndKW%
		\lstml@ResetBktCount%
	\else%
		\stepcounter{lstml@ClBktCount}%
		\ifnum\value{lstml@ClBktCount}<\value{lstml@OpBktCount}%
		\else%
			\global\lstml@ClosingEndKWtrue%
		\fi%
	\fi%
}

% Patch to make literate replacement of ) work as expected when breaklines is set to true
%TODO Find a way to undo that patch for listings other than Matlab
\newcommand\lstml@PatchSelectCharTable%
{%
	\patchcmd{\lsthk@SelectCharTable}{)}{`}{}{}%
}
\lstml@PatchSelectCharTable


% --- macro for literate replacement of tilde character ---
\newcommand\lstml@Tilde{\raisebox{0.5ex}\texttildelow}


% --- macros for handling unterminated string literal ---
\newcommand\lstml@AddedToEOLHookUntermStr
{%
	\iflstml@InStr%
		\global\lstml@InStrfalse%
		\lst@LeaveMode%
	\fi%
}

\newcommand\lstml@AddedToEndGroupHookUntermStr
{%
	\iflstml@InStr%
		\global\lstml@InStrfalse%
	\fi%
}


% --- macros for handling line continuation ---
\newcommand\lstml@ProcessDotDotDot%
{%
	\lst@CalcLostSpaceAndOutput%
	\iflstml@InLineCom%
		...%
	\else%
		\global\lstml@InLineComtrue%
		{%
			\ignorespaces
			\lstml@keywordstyle%
			...%
		}%
	\fi%
	\lstml@commentstyle%
}

\newcommand\lstml@AddedToEOLHookDotDotDot
{%
	\global\lstml@InLineComfalse%
}


% --- Add my macros to EOL and EndGroup hooks ---
% EOL hook
\newcommand\lstml@AddedToEOL{}
\newcommand\lstml@@ddedToEOL%
{%
	\lstml@AddedToEOLHookDotDotDot%
	\lstml@AddedToEOLHookUntermStr%
}
\lst@AddToHook{EOL}{\lstml@AddedToEOL}

% EndGroup hook
\newcommand\lstml@AddedToEndGroup{}
\newcommand\lstml@@ddedToEndGroup%
{%
	\lstml@AddedToEndGroupHookUntermStr%
}
\lst@AddToHook{EndGroup}{\lstml@AddedToEndGroup}


% --- Placeholders ---
% Macros for delimiters
\newcommand\lstml@placeholderdelimo{\textlangle}
\newcommand\lstml@placeholderdelimc{\textrangle}
\newcommand\lstml@placeholderdelimstyle{\normalfont\upshape}
\newcommand\lstml@placeholdercontentstyle{\normalfont\itshape}
% Placeholder colors
\definecolor{lstml@placeholderdelimcolor}{RGB}{209,0,86}	% Placeholder delimiter color	
\definecolor{lstml@placeholdercontentcolor}{RGB}{209,0,86}		% Placeholder text color

% --- macro for typesetting placeholders ---
\newcommand\lstmlplaceholder[1]
{%
	{%
		% opening delimiter
		\lstml@placeholderdelimstyle%
		\color{lstml@placeholderdelimcolor}%
		\lstml@placeholderdelimo%
	}{%
		% placeholder content
		\lstml@placeholdercontentstyle%
		\color{lstml@placeholdercontentcolor}%
		#1\lstml@italiccorrection%
	}{%
		% closing delimiter
		\lstml@placeholderdelimstyle%
		\color{lstml@placeholderdelimcolor}%
		\lstml@placeholderdelimc%
	}%
}

% --- auxiliary macro (for conditional italic correction in placeholder) ---
\newcommand\lstml@italiccorrection
{%
	\ifdefstring{\f@shape}{sl}
		{\/}
		{%
			\ifdefstring{\f@shape}{it}
			{\/}
			{}%
		}%
}



% ----------- key=value interface ---

% keys
\define@key{mlpretty}{basicstyle}{\def\lstml@BasicStyle{#1}}
\define@key{mlpretty}{keywordstyle}{\def\lstml@keywordstyle{#1}}
\define@key{mlpretty}{stringstyle}{\def\lstml@StringStyle{#1}}
\define@key{mlpretty}{commentstyle}{\def\lstml@commentstyle{#1}}

% define \mlprettyset, the matlab-prettifier equivalent to listings' \lstset
\lst@UserCommand\mlprettyset{\begingroup \lst@setcatcodes \mlprettyset@}
\def\mlprettyset@#1%
{%
	\endgroup
	\ifx\@empty#1%
		\@empty%
	\else%
		\setkeys{lst}{language=Matlab-pretty}%
		\setkeys{mlpretty}{#1}%
	\fi%
}

% --- matlab-prettifier listings environment and macro ---

\newcommand\StartingCode@mlpretty[1][]%
{%
	\renewcommand\lstml@AddedToEOL\lstml@@ddedToEOL%
	\renewcommand\lstml@AddedToEndGroup\lstml@@ddedToEndGroup%
	\lstset{language = Matlab-pretty,#1}% %TODO replace by my own macro
}

\newcommand\EndingCode@mlpretty%
{%
	\renewcommand\lstml@AddedToEOL{}%
	\renewcommand\lstml@AddedToEndGroup{}%
	\lstml@ResetEndKW%
	\lstml@ResetClDef%
}

\lstnewenvironment{matlablisting}[1][]%
	{\StartingCode@mlpretty[#1]}
	{\EndingCode@mlpretty}


\newcommand\inputmatlablisting[2][]%
{%
	{%
		\StartingCode@mlpretty[#1]%
		\lstinputlisting{#2}%
		\EndingCode@mlpretty%
	}%
}

\endinput